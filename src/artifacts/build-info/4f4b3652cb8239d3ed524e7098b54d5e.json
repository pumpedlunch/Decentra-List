{"id":"4f4b3652cb8239d3ed524e7098b54d5e","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/interfaces/DecentralistProxyFactoryInterface.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\";\r\nimport \"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol\";\r\n\r\nabstract contract DecentralistProxyFactoryInterface {\r\n    function minimumLiveness() external view virtual returns (uint64);\r\n\r\n    function implementationContract() external view virtual returns (address);\r\n\r\n    function allClones() external view virtual returns (address[] memory);\r\n\r\n    function finder() external view virtual returns (FinderInterface);\r\n\r\n    function collateralWhitelist()\r\n        external\r\n        view virtual\r\n        returns (AddressWhitelistInterface);\r\n\r\n    event NewClone(address _clone);\r\n\r\n    /**\r\n     * @notice Creates a new decentraList smart contract.\r\n     * @param _listCriteria Criteria for what addresses should be included on the list. Can be on-chain text or a link to IPFS.\r\n     * @param _title Short title for the list.\r\n     * @param _token The address of the token currency used for this contract. Must be on UMA's collateral whitelist.\r\n     * @param _bondAmount Additional bond required, beyond the final fee.\r\n     * @param _additionReward Reward per address successfully added to the list, paid by the contract to the proposer.\r\n     * @param _removalReward Reward per address successfully removed from the list, paid by the contract to the proposer.\r\n     * @param _liveness The period, in seconds, in which a proposal can be disputed. Must be greater than 8 hours.\r\n     * @param _owner Owner of the contract can remove funds from the contract and adjust bondAmount, rewards and liveness.\r\n     * Set to the 0 address to make the contract a non-managed public good.\r\n     */\r\n    function createNewDecentralist(\r\n        bytes memory _listCriteria,\r\n        string memory _title,\r\n        address _token,\r\n        uint256 _bondAmount,\r\n        uint256 _additionReward,\r\n        uint256 _removalReward,\r\n        uint64 _liveness,\r\n        address _owner\r\n    ) external virtual returns(address instance);\r\n\r\n    /**\r\n     * @notice Returns all instances created.\r\n     */\r\n    function getAllClones() external view virtual returns (address[] memory);\r\n\r\n    /**\r\n     * @notice This pulls in the most up-to-date collateral whitelist.\r\n     * @dev If a new OptimisticOracle is added and this function is run between a list revision's proposal and execution,\r\n     * the proposal will become unexecutable.\r\n     */\r\n    function syncWhitelist() public virtual;\r\n}\r\n"},"@uma/core/contracts/oracle/interfaces/FinderInterface.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Provides addresses of the live contracts implementing certain interfaces.\n * @dev Examples are the Oracle or Store interfaces.\n */\ninterface FinderInterface {\n    /**\n     * @notice Updates the address of the contract that implements `interfaceName`.\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\n     * @param implementationAddress address of the deployed contract that implements the interface.\n     */\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\n\n    /**\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\n     * @param interfaceName queried interface.\n     * @return implementationAddress address of the deployed contract that implements the interface.\n     */\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\n}\n"},"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface AddressWhitelistInterface {\n    function addToWhitelist(address newElement) external;\n\n    function removeFromWhitelist(address newElement) external;\n\n    function isOnWhitelist(address newElement) external view returns (bool);\n\n    function getWhitelist() external view returns (address[] memory);\n}\n"},"contracts/interfaces/DecentralistInterface.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"@uma/core/contracts/oracle/interfaces/StoreInterface.sol\";\r\nimport \"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\";\r\n\r\nabstract contract DecentralistInterface is Initializable, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event RevisionProposed(\r\n        uint256 indexed revisionId,\r\n        int256 proposedValue,\r\n        address[] pendingAddresses\r\n    );\r\n    event RevisionApproved(uint256 indexed revisionId, int256 proposedValue);\r\n    event RevisionRejected(uint256 indexed revisionId, int256 proposedValue);\r\n    event RevisionExecuted(\r\n        uint256 indexed revisionId,\r\n        int256 proposedValue,\r\n        address[] revisedAddresses\r\n    );\r\n\r\n    event RewardsSet(uint256 additionReward, uint256 removalReward);\r\n    event LivenessSet(uint64 liveness);\r\n    event BondSet(uint256 bondAmount);\r\n\r\n    function oracle()\r\n        external\r\n        view\r\n        virtual\r\n        returns (OptimisticOracleV2Interface);\r\n\r\n    function store() external view virtual returns (StoreInterface);\r\n\r\n    function finder() external view virtual returns (FinderInterface);\r\n\r\n    function fixedAncillaryData() external view virtual returns (bytes memory);\r\n\r\n    function title() external view virtual returns (string memory);\r\n\r\n    function bondAmount() external view virtual returns (uint256);\r\n\r\n    function token() external view virtual returns (IERC20);\r\n\r\n    function additionReward() external view virtual returns (uint256);\r\n\r\n    function removalReward() external view virtual returns (uint256);\r\n\r\n    function liveness() external view virtual returns (uint64);\r\n\r\n    function minimumLiveness() external view virtual returns (uint64);\r\n\r\n    enum Status {\r\n        Invalid,\r\n        Pending,\r\n        Approved,\r\n        Rejected,\r\n        Executed\r\n    }\r\n\r\n    struct Revision {\r\n        address proposer;\r\n        bytes32 addressesHash;\r\n        int256 proposedValue;\r\n        Status status;\r\n    }\r\n\r\n    // maps revisionId to Revision struct\r\n    function revisions(uint256 RevisionId)\r\n        external\r\n        view\r\n        virtual\r\n        returns (Revision memory);\r\n\r\n    // returns boolean whether address is on list\r\n    function onList(address) external view virtual returns (bool);\r\n\r\n    /**\r\n     * @notice Initializes the contract.\r\n     * @param _finder The address of UMA Finder contract. This is set in the DecentralistProxyFactory constructor.\r\n     * @param _listCriteria Criteria for what addresses should be included on the list. Can be on-chain text or a link to IPFS.\r\n     * @param _title Short title for the list.\r\n     * @param _token The address of the token currency used for this contract. Must be on UMA's collateral whitelist.\r\n     * @param _bondAmount Additional bond required, beyond the final fee.\r\n     * @param _additionReward Reward per address successfully added to the list, paid by the contract to the proposer.\r\n     * @param _removalReward Reward per address successfully removed from the list, paid by the contract to the proposer.\r\n     * @param _liveness The period, in seconds, in which a proposal can be disputed.\r\n     * @param _minimumLiveness The minimum allowable liveness period, in seconds.\r\n     * @param _owner Owner of the contract can remove funds from the contract and adjust reward rates. Set to the 0 address to make the contract 'public'.\r\n     */\r\n    function initialize(\r\n        address _finder,\r\n        bytes memory _listCriteria,\r\n        string memory _title,\r\n        address _token,\r\n        uint256 _bondAmount,\r\n        uint256 _additionReward,\r\n        uint256 _removalReward,\r\n        uint64 _liveness,\r\n        uint64 _minimumLiveness,\r\n        address _owner\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice Proposes addresses to add or remove from the list.\r\n     * @param _value Indicates if the proposed revision is adding or removing addresses. 0 = remove, 1e18 = add.\r\n     * @param _addresses Array of addresses for the proposed revision.\r\n     * @dev Caller must have approved this contract to spend the total bond amount of the contract's token before calling.\r\n     */\r\n    function proposeRevision(int256 _value, address[] calldata _addresses)\r\n        external\r\n        virtual;\r\n\r\n    /**\r\n     * @notice Callback function called upon oracle data settlement to update the Revision status to Approved or Rejected.\r\n     * @param timestamp Timestamp to identify the existing request.\r\n     * @param ancillaryData Ancillary data of the data being requested.\r\n     * @param value Value returned from the oracle.\r\n     */\r\n    function priceSettled(\r\n        bytes32, /* identifier */\r\n        uint256 timestamp,\r\n        bytes memory ancillaryData,\r\n        int256 value\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice Executes approved revisions by revising the list and paying out rewards to the proposer.\r\n     * @param _revisionId ID of revision to be executed. If Revision submitted does not have status Approved, tx will revert.\r\n     * @param _addresses Address array that matches the array logged in the RevisionProposed event for the provided _revisionId.\r\n     */\r\n    function executeRevision(uint256 _revisionId, address[] calldata _addresses)\r\n        external virtual;\r\n\r\n    /**\r\n     * @notice Allows owner to withdraw the default tokens from the contract.\r\n     * @param recipient The recipient of the tokens.\r\n     * @param amount The amount of tokens to to send.\r\n     */\r\n    function withdraw(address recipient, uint256 amount) external virtual;\r\n\r\n    /**\r\n     * @notice Allows owner to rescue tokens sent accidentally to the contract.\r\n     * @param recipient The recipient of the tokens.\r\n     * @param amount The amount of tokens to to send.\r\n     * @param _token The contract address of the token to send.\r\n     */\r\n    function rescue(\r\n        address recipient,\r\n        uint256 amount,\r\n        address _token\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice Sets the rewards for successful revisions.\r\n     * @param _additionReward Reward to proposer per address successfully added to the list.\r\n     * @param _removalReward Reward to proposer per address successfully removed from the list.\r\n     */\r\n    function setRewards(uint256 _additionReward, uint256 _removalReward)\r\n        external virtual;\r\n\r\n    /**\r\n     * @notice Sets the bond amount for revisions.\r\n     * @param _bondAmount Amount of the bond token that will need to be paid for future proposals.\r\n     */\r\n    function setBond(uint256 _bondAmount) external virtual;\r\n\r\n    /**\r\n     * @notice Sets the liveness for future revisions. This is the amount of delay before a proposal is approved by\r\n     * default.\r\n     * @param _liveness Liveness to set in seconds.\r\n     */\r\n    function setLiveness(uint64 _liveness) external virtual;\r\n\r\n    /**\r\n     * @notice This pulls in the most up-to-date Optimistic Oracle contract.\r\n     * @dev If a new OptimisticOracle is added and this is run between a revision's introduction and execution, the\r\n     * proposal will become unexecutable.\r\n     */\r\n    function syncContracts() public virtual;\r\n}\r\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./FinderInterface.sol\";\n\n/**\n * @title Financial contract facing Oracle interface.\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\n */\nabstract contract OptimisticOracleV2Interface {\n    event RequestPrice(\n        address indexed requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        address currency,\n        uint256 reward,\n        uint256 finalFee\n    );\n    event ProposePrice(\n        address indexed requester,\n        address indexed proposer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 proposedPrice,\n        uint256 expirationTimestamp,\n        address currency\n    );\n    event DisputePrice(\n        address indexed requester,\n        address indexed proposer,\n        address indexed disputer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 proposedPrice\n    );\n    event Settle(\n        address indexed requester,\n        address indexed proposer,\n        address indexed disputer,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes ancillaryData,\n        int256 price,\n        uint256 payout\n    );\n    // Struct representing the state of a price request.\n    enum State {\n        Invalid, // Never requested.\n        Requested, // Requested, no other actions taken.\n        Proposed, // Proposed, but not expired or disputed yet.\n        Expired, // Proposed, not disputed, past liveness.\n        Disputed, // Disputed, but no DVM price returned yet.\n        Resolved, // Disputed and DVM price is available.\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\n    }\n\n    struct RequestSettings {\n        bool eventBased; // True if the request is set to be event-based.\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\n        uint256 customLiveness; // Custom liveness value set by the requester.\n    }\n\n    // Struct representing a price request.\n    struct Request {\n        address proposer; // Address of the proposer.\n        address disputer; // Address of the disputer.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        bool settled; // True if the request is settled.\n        RequestSettings requestSettings; // Custom settings associated with a request.\n        int256 proposedPrice; // Price that the proposer submitted.\n        int256 resolvedPrice; // Price resolved once the request is settled.\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\n    }\n\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\n    // to accept a price request made with ancillary data length over a certain size.\n    uint256 public constant ancillaryBytesLimit = 8192;\n\n    function defaultLiveness() external view virtual returns (uint256);\n\n    function finder() external view virtual returns (FinderInterface);\n\n    function getCurrentTime() external view virtual returns (uint256);\n\n    // Note: this is required so that typechain generates a return value with named fields.\n    mapping(bytes32 => Request) public requests;\n\n    /**\n     * @notice Requests a new price.\n     * @param identifier price identifier being requested.\n     * @param timestamp timestamp of the price being requested.\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n     *               which could make sense if the contract requests and proposes the value in the same call or\n     *               provides its own reward system.\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\n     * This can be changed with a subsequent call to setBond().\n     */\n    function requestPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        IERC20 currency,\n        uint256 reward\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Set the proposal bond associated with a price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param bond custom bond amount to set.\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\n     * changed again with a subsequent call to setBond().\n     */\n    function setBond(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 bond\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\n     * bond, so there is still profit to be made even if the reward is refunded.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setRefundOnDispute(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual;\n\n    /**\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\n     * being auto-resolved.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param customLiveness new custom liveness.\n     */\n    function setCustomLiveness(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        uint256 customLiveness\n    ) external virtual;\n\n    /**\n     * @notice Sets the request to be an \"event-based\" request.\n     * @dev Calling this method has a few impacts on the request:\n     *\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\n     *    with the request.\n     *\n     * 2. The proposer cannot propose the \"too early\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\n     *    prematurely proposes a response loses their bond.\n     *\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\n     *    the requesting contract.\n     *\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     */\n    function setEventBased(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual;\n\n    /**\n     * @notice Sets which callbacks should be enabled for the request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\n     */\n    function setCallbacks(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        bool callbackOnPriceProposed,\n        bool callbackOnPriceDisputed,\n        bool callbackOnPriceSettled\n    ) external virtual;\n\n    /**\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n     * from this proposal. However, any bonds are pulled from the caller.\n     * @param proposer address to set as the proposer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePriceFor(\n        address proposer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Proposes a price value for an existing price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @param proposedPrice price being proposed.\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\n     * the proposer once settled if the proposal is correct.\n     */\n    function proposePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData,\n        int256 proposedPrice\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n     * @param disputer address to set as the disputer.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\n     */\n    function disputePriceFor(\n        address disputer,\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Disputes a price value for an existing price request with an active proposal.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\n     */\n    function disputePrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (uint256 totalBond);\n\n    /**\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\n     * hasn't been settled.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return resolved price.\n     */\n    function settleAndGetPrice(\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (int256);\n\n    /**\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n     * the returned bonds as well as additional rewards.\n     */\n    function settle(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) external virtual returns (uint256 payout);\n\n    /**\n     * @notice Gets the current data structure containing all information about a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the Request data structure.\n     */\n    function getRequest(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (Request memory);\n\n    /**\n     * @notice Returns the state of a price request.\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return the State enum value.\n     */\n    function getState(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (State);\n\n    /**\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\n     * @param requester sender of the initial price request.\n     * @param identifier price identifier to identify the existing request.\n     * @param timestamp timestamp to identify the existing request.\n     * @param ancillaryData ancillary data of the price being requested.\n     * @return true if price has resolved or settled, false otherwise.\n     */\n    function hasPrice(\n        address requester,\n        bytes32 identifier,\n        uint256 timestamp,\n        bytes memory ancillaryData\n    ) public view virtual returns (bool);\n\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\n        public\n        view\n        virtual\n        returns (bytes memory);\n}\n"},"@uma/core/contracts/oracle/interfaces/StoreInterface.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../common/implementation/FixedPoint.sol\";\n\n/**\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\n */\ninterface StoreInterface {\n    /**\n     * @notice Pays Oracle fees in ETH to the store.\n     * @dev To be used by contracts whose margin currency is ETH.\n     */\n    function payOracleFees() external payable;\n\n    /**\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\n     * @param erc20Address address of the ERC20 token used to pay the fee.\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\n     */\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\n\n    /**\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\n     * @param startTime defines the beginning time from which the fee is paid.\n     * @param endTime end time until which the fee is paid.\n     * @param pfc \"profit from corruption\", or the maximum amount of margin currency that a\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\n     * @return latePenalty for paying the fee after the deadline.\n     */\n    function computeRegularFee(\n        uint256 startTime,\n        uint256 endTime,\n        FixedPoint.Unsigned calldata pfc\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\n\n    /**\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\n     * @param currency token used to pay the final fee.\n     * @return finalFee amount due.\n     */\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@uma/core/contracts/common/implementation/FixedPoint.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\n\n/**\n * @title Library for fixed point arithmetic on uints\n */\nlibrary FixedPoint {\n    using SafeMath for uint256;\n    using SignedSafeMath for int256;\n\n    // Supports 18 decimals. E.g., 1e18 represents \"1\", 5e17 represents \"0.5\".\n    // For unsigned values:\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\n\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\n    struct Unsigned {\n        uint256 rawValue;\n    }\n\n    /**\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\n     * @param a uint to convert into a FixedPoint.\n     * @return the converted FixedPoint.\n     */\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if equal, or False.\n     */\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue == fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if equal, or False.\n     */\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue == b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue > fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue < fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\n        return a.rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice The minimum of `a` and `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the minimum of `a` and `b`.\n     */\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return a.rawValue < b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice The maximum of `a` and `b`.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the maximum of `a` and `b`.\n     */\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return a.rawValue > b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice Adds two `Unsigned`s, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.add(b.rawValue));\n    }\n\n    /**\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return add(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.sub(b.rawValue));\n    }\n\n    /**\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return sub(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\n     * @param a a uint256.\n     * @param b a FixedPoint.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return sub(fromUnscaledUint(a), b);\n    }\n\n    /**\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        // There are two caveats with this computation:\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\n        // stored internally as a uint256 ~10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\n        // would round to 3, but this computation produces the result 2.\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\n    }\n\n    /**\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.\n     * @param b a uint256.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Multiplies two `Unsigned`s and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\n        if (mod != 0) {\n            return Unsigned(mulFloor.add(1));\n        } else {\n            return Unsigned(mulFloor);\n        }\n    }\n\n    /**\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.\n     * @param b a FixedPoint.\n     * @return the product of `a` and `b`.\n     */\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\n        return Unsigned(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        // There are two caveats with this computation:\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\n        // 10^41 is stored internally as a uint256 10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        return Unsigned(a.rawValue.div(b));\n    }\n\n    /**\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a uint256 numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        return div(fromUnscaledUint(a), b);\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an `Unsigned` and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\n        uint256 divFloor = aScaled.div(b.rawValue);\n        uint256 mod = aScaled.mod(b.rawValue);\n        if (mod != 0) {\n            return Unsigned(divFloor.add(1));\n        } else {\n            return Unsigned(divFloor);\n        }\n    }\n\n    /**\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\n        // Because it is possible that a quotient gets truncated, we can't just call \"Unsigned(a.rawValue.div(b))\"\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\n        // This creates the possibility of overflow if b is very large.\n        return divCeil(a, fromUnscaledUint(b));\n    }\n\n    /**\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\n     * @dev This will \"floor\" the result.\n     * @param a a FixedPoint numerator.\n     * @param b a uint256 denominator.\n     * @return output is `a` to the power of `b`.\n     */\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\n        output = fromUnscaledUint(1);\n        for (uint256 i = 0; i < b; i = i.add(1)) {\n            output = mul(output, a);\n        }\n    }\n\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\n    // Supports 18 decimals. E.g., 1e18 represents \"1\", 5e17 represents \"0.5\".\n    // For signed values:\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\n\n    struct Signed {\n        int256 rawValue;\n    }\n\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\n        require(a.rawValue >= 0, \"Negative value provided\");\n        return Unsigned(uint256(a.rawValue));\n    }\n\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\n        require(a.rawValue <= uint256(type(int256).max), \"Unsigned too large\");\n        return Signed(int256(a.rawValue));\n    }\n\n    /**\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\n     * @param a int to convert into a FixedPoint.Signed.\n     * @return the converted FixedPoint.Signed.\n     */\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\n        return Signed(a.mul(SFP_SCALING_FACTOR));\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a int256.\n     * @return True if equal, or False.\n     */\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue == fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if equal, or False.\n     */\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue == b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue > fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a > b`, or False.\n     */\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue > b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is greater than or equal to `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a >= b`, or False.\n     */\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue < fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a < b`, or False.\n     */\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue < b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\n        return a.rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\n    }\n\n    /**\n     * @notice Whether `a` is less than or equal to `b`.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return True if `a <= b`, or False.\n     */\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\n    }\n\n    /**\n     * @notice The minimum of `a` and `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the minimum of `a` and `b`.\n     */\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return a.rawValue < b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice The maximum of `a` and `b`.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the maximum of `a` and `b`.\n     */\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return a.rawValue > b.rawValue ? a : b;\n    }\n\n    /**\n     * @notice Adds two `Signed`s, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.add(b.rawValue));\n    }\n\n    /**\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return the sum of `a` and `b`.\n     */\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return add(a, fromUnscaledInt(b));\n    }\n\n    /**\n     * @notice Subtracts two `Signed`s, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.sub(b.rawValue));\n    }\n\n    /**\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return sub(a, fromUnscaledInt(b));\n    }\n\n    /**\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\n     * @param a an int256.\n     * @param b a FixedPoint.Signed.\n     * @return the difference of `a` and `b`.\n     */\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\n        return sub(fromUnscaledInt(a), b);\n    }\n\n    /**\n     * @notice Multiplies two `Signed`s, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        // There are two caveats with this computation:\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\n        // stored internally as an int256 ~10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\n        // would round to 3, but this computation produces the result 2.\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\n    }\n\n    /**\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\n     * @dev This will \"floor\" the product.\n     * @param a a FixedPoint.Signed.\n     * @param b an int256.\n     * @return the product of `a` and `b`.\n     */\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Multiplies two `Signed`s and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the product of `a` and `b`.\n     */\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\n        // Manual mod because SignedSafeMath doesn't support it.\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\n        if (mod != 0) {\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\n            return Signed(mulTowardsZero.add(valueToAdd));\n        } else {\n            return Signed(mulTowardsZero);\n        }\n    }\n\n    /**\n     * @notice Multiplies an `Signed` and an unscaled int256 and \"ceil's\" the product, reverting on overflow.\n     * @param a a FixedPoint.Signed.\n     * @param b a FixedPoint.Signed.\n     * @return the product of `a` and `b`.\n     */\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\n        return Signed(a.rawValue.mul(b));\n    }\n\n    /**\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        // There are two caveats with this computation:\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\n        // 10^41 is stored internally as an int256 10^59.\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\n    }\n\n    /**\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a a FixedPoint numerator.\n     * @param b an int256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        return Signed(a.rawValue.div(b));\n    }\n\n    /**\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\n     * @dev This will \"floor\" the quotient.\n     * @param a an int256 numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\n        return div(fromUnscaledInt(a), b);\n    }\n\n    /**\n     * @notice Divides one `Signed` by an `Signed` and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b a FixedPoint denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\n        int256 divTowardsZero = aScaled.div(b.rawValue);\n        // Manual mod because SignedSafeMath doesn't support it.\n        int256 mod = aScaled % b.rawValue;\n        if (mod != 0) {\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\n            return Signed(divTowardsZero.add(valueToAdd));\n        } else {\n            return Signed(divTowardsZero);\n        }\n    }\n\n    /**\n     * @notice Divides one `Signed` by an unscaled int256 and \"ceil's\" the quotient, reverting on overflow or division by 0.\n     * @param a a FixedPoint numerator.\n     * @param b an int256 denominator.\n     * @return the quotient of `a` divided by `b`.\n     */\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\n        // Because it is possible that a quotient gets truncated, we can't just call \"Signed(a.rawValue.div(b))\"\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\n        // This creates the possibility of overflow if b is very large.\n        return divAwayFromZero(a, fromUnscaledInt(b));\n    }\n\n    /**\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\n     * @dev This will \"floor\" the result.\n     * @param a a FixedPoint.Signed.\n     * @param b a uint256 (negative exponents are not allowed).\n     * @return output is `a` to the power of `b`.\n     */\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\n        output = fromUnscaledInt(1);\n        for (uint256 i = 0; i < b; i = i.add(1)) {\n            output = mul(output, a);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedSafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SignedSafeMath {\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        return a + b;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[975],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":976,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":975,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,975],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1875:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2141:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/utils/Initializable.sol","exportedSymbols":{"Address":[953],"Initializable":[263]},"id":264,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":264,"sourceUnit":954,"src":"138:33:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"173:2198:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":263,"linearizedBaseContracts":[263],"name":"Initializable","nameLocation":"2390:13:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":117,"nodeType":"StructuredDocumentation","src":"2410:109:1","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":119,"mutability":"mutable","name":"_initialized","nameLocation":"2538:12:1","nodeType":"VariableDeclaration","scope":263,"src":"2524:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":118,"name":"uint8","nodeType":"ElementaryTypeName","src":"2524:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"2557:91:1","text":" @dev Indicates that the contract is in the process of being initialized."},"id":122,"mutability":"mutable","name":"_initializing","nameLocation":"2666:13:1","nodeType":"VariableDeclaration","scope":263,"src":"2653:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":121,"name":"bool","nodeType":"ElementaryTypeName","src":"2653:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"2686:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":127,"name":"Initialized","nameLocation":"2787:11:1","nodeType":"EventDefinition","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2805:7:1","nodeType":"VariableDeclaration","scope":127,"src":"2799:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":124,"name":"uint8","nodeType":"ElementaryTypeName","src":"2799:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2798:15:1"},"src":"2781:33:1"},{"body":{"id":182,"nodeType":"Block","src":"3090:472:1","statements":[{"assignments":[131],"declarations":[{"constant":false,"id":131,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3105:14:1","nodeType":"VariableDeclaration","scope":182,"src":"3100:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":130,"name":"bool","nodeType":"ElementaryTypeName","src":"3100:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":134,"initialValue":{"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3122:14:1","subExpression":{"id":132,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"3123:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3100:36:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":136,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"3168:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":137,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"3186:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3201:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3186:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3168:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":141,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3167:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3208:34:1","subExpression":{"arguments":[{"arguments":[{"id":146,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3236:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$263","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$263","typeString":"contract Initializable"}],"id":145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3228:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":144,"name":"address","nodeType":"ElementaryTypeName","src":"3228:7:1","typeDescriptions":{}}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3228:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":142,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"3209:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$953_$","typeString":"type(library Address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3217:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":676,"src":"3209:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3209:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":150,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"3246:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3262:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3246:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3208:55:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":154,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3207:57:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3167:97:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3278:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":135,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3146:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3146:190:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":158,"nodeType":"ExpressionStatement","src":"3146:190:1"},{"expression":{"id":161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":159,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"3346:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3361:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3346:16:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":162,"nodeType":"ExpressionStatement","src":"3346:16:1"},{"condition":{"id":163,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"3376:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":169,"nodeType":"IfStatement","src":"3372:65:1","trueBody":{"id":168,"nodeType":"Block","src":"3392:45:1","statements":[{"expression":{"id":166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":164,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"3406:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3422:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3406:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":167,"nodeType":"ExpressionStatement","src":"3406:20:1"}]}},{"id":170,"nodeType":"PlaceholderStatement","src":"3446:1:1"},{"condition":{"id":171,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"3461:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":181,"nodeType":"IfStatement","src":"3457:99:1","trueBody":{"id":180,"nodeType":"Block","src":"3477:79:1","statements":[{"expression":{"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":172,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"3491:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3507:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3491:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":175,"nodeType":"ExpressionStatement","src":"3491:21:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3543:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":176,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"3531:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3531:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":179,"nodeType":"EmitStatement","src":"3526:19:1"}]}}]},"documentation":{"id":128,"nodeType":"StructuredDocumentation","src":"2820:242:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."},"id":183,"name":"initializer","nameLocation":"3076:11:1","nodeType":"ModifierDefinition","parameters":{"id":129,"nodeType":"ParameterList","parameters":[],"src":"3087:2:1"},"src":"3067:495:1","virtual":false,"visibility":"internal"},{"body":{"id":215,"nodeType":"Block","src":"4377:255:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4395:14:1","subExpression":{"id":189,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"4396:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":191,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"4413:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":192,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"4428:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4413:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4395:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4437:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":188,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4387:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4387:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":197,"nodeType":"ExpressionStatement","src":"4387:99:1"},{"expression":{"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":198,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"4496:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":199,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"4511:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4496:22:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":201,"nodeType":"ExpressionStatement","src":"4496:22:1"},{"expression":{"id":204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":202,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"4528:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4544:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4528:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":205,"nodeType":"ExpressionStatement","src":"4528:20:1"},{"id":206,"nodeType":"PlaceholderStatement","src":"4558:1:1"},{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":207,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"4569:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4585:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4569:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":210,"nodeType":"ExpressionStatement","src":"4569:21:1"},{"eventCall":{"arguments":[{"id":212,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":186,"src":"4617:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":211,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"4605:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4605:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":214,"nodeType":"EmitStatement","src":"4600:25:1"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"3568:766:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."},"id":216,"name":"reinitializer","nameLocation":"4348:13:1","nodeType":"ModifierDefinition","parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"version","nameLocation":"4368:7:1","nodeType":"VariableDeclaration","scope":216,"src":"4362:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":185,"name":"uint8","nodeType":"ElementaryTypeName","src":"4362:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4361:15:1"},"src":"4339:293:1","virtual":false,"visibility":"internal"},{"body":{"id":225,"nodeType":"Block","src":"4870:97:1","statements":[{"expression":{"arguments":[{"id":220,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"4888:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4903:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":219,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4880:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4880:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":223,"nodeType":"ExpressionStatement","src":"4880:69:1"},{"id":224,"nodeType":"PlaceholderStatement","src":"4959:1:1"}]},"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"4638:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":226,"name":"onlyInitializing","nameLocation":"4851:16:1","nodeType":"ModifierDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[],"src":"4867:2:1"},"src":"4842:125:1","virtual":false,"visibility":"internal"},{"body":{"id":261,"nodeType":"Block","src":"5415:230:1","statements":[{"expression":{"arguments":[{"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5433:14:1","subExpression":{"id":231,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"5434:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5449:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5425:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5425:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":235,"nodeType":"ExpressionStatement","src":"5425:66:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":236,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"5505:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5525:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":238,"name":"uint8","nodeType":"ElementaryTypeName","src":"5525:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":237,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5520:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5520:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5532:3:1","memberName":"max","nodeType":"MemberAccess","src":"5520:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5505:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":260,"nodeType":"IfStatement","src":"5501:138:1","trueBody":{"id":259,"nodeType":"Block","src":"5537:102:1","statements":[{"expression":{"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":243,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"5551:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5571:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":245,"name":"uint8","nodeType":"ElementaryTypeName","src":"5571:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":244,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5566:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5566:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5578:3:1","memberName":"max","nodeType":"MemberAccess","src":"5566:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"5551:30:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":250,"nodeType":"ExpressionStatement","src":"5551:30:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5617:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":253,"name":"uint8","nodeType":"ElementaryTypeName","src":"5617:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":252,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5612:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5612:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5624:3:1","memberName":"max","nodeType":"MemberAccess","src":"5612:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":251,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"5600:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5600:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":258,"nodeType":"EmitStatement","src":"5595:33:1"}]}}]},"documentation":{"id":227,"nodeType":"StructuredDocumentation","src":"4973:388:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."},"id":262,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5375:20:1","nodeType":"FunctionDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[],"src":"5395:2:1"},"returnParameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"5415:0:1"},"scope":263,"src":"5366:279:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":264,"src":"2372:3275:1","usedErrors":[]}],"src":"113:5535:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[341]},"id":342,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":265,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":266,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":341,"linearizedBaseContracts":[341],"name":"IERC20","nameLocation":"212:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"225:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":275,"name":"Transfer","nameLocation":"394:8:2","nodeType":"EventDefinition","parameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:2","nodeType":"VariableDeclaration","scope":275,"src":"403:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":271,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:2","nodeType":"VariableDeclaration","scope":275,"src":"425:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":270,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":273,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:2","nodeType":"VariableDeclaration","scope":275,"src":"445:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":272,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:2"},"src":"388:72:2"},{"anonymous":false,"documentation":{"id":276,"nodeType":"StructuredDocumentation","src":"466:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":284,"name":"Approval","nameLocation":"625:8:2","nodeType":"EventDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":278,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:2","nodeType":"VariableDeclaration","scope":284,"src":"634:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":280,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:2","nodeType":"VariableDeclaration","scope":284,"src":"657:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":279,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":282,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:2","nodeType":"VariableDeclaration","scope":284,"src":"682:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":281,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:2"},"src":"619:78:2"},{"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"703:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":290,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:2","nodeType":"FunctionDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[],"src":"794:2:2"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":290,"src":"820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":287,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:2"},"scope":341,"src":"774:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"835:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":298,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:2","nodeType":"FunctionDefinition","parameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"account","nameLocation":"939:7:2","nodeType":"VariableDeclaration","scope":298,"src":"931:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:2"},"returnParameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":298,"src":"971:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:2"},"scope":341,"src":"912:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"986:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":308,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:2","nodeType":"FunctionDefinition","parameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"to","nameLocation":"1219:2:2","nodeType":"VariableDeclaration","scope":308,"src":"1211:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":300,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"amount","nameLocation":"1231:6:2","nodeType":"VariableDeclaration","scope":308,"src":"1223:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":302,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:2"},"returnParameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":308,"src":"1257:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":305,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:2"},"scope":341,"src":"1193:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"1269:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":318,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:2","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"owner","nameLocation":"1565:5:2","nodeType":"VariableDeclaration","scope":318,"src":"1557:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"spender","nameLocation":"1580:7:2","nodeType":"VariableDeclaration","scope":318,"src":"1572:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":312,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:2"},"returnParameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":318,"src":"1612:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":315,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:2"},"scope":341,"src":"1538:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"1627:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":328,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:2","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"spender","nameLocation":"2299:7:2","nodeType":"VariableDeclaration","scope":328,"src":"2291:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":323,"mutability":"mutable","name":"amount","nameLocation":"2316:6:2","nodeType":"VariableDeclaration","scope":328,"src":"2308:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":322,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:2"},"returnParameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":328,"src":"2342:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":325,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:2"},"scope":341,"src":"2274:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":329,"nodeType":"StructuredDocumentation","src":"2354:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":340,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:2","nodeType":"FunctionDefinition","parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"from","nameLocation":"2685:4:2","nodeType":"VariableDeclaration","scope":340,"src":"2677:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":330,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"to","nameLocation":"2707:2:2","nodeType":"VariableDeclaration","scope":340,"src":"2699:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"amount","nameLocation":"2727:6:2","nodeType":"VariableDeclaration","scope":340,"src":"2719:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:2"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":340,"src":"2758:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":337,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:2"},"scope":341,"src":"2646:118:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":342,"src":"202:2564:2","usedErrors":[]}],"src":"106:2661:2"},"id":2},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[377]},"id":378,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":343,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":344,"nodeType":"StructuredDocumentation","src":"139:480:3","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":377,"linearizedBaseContracts":[377],"name":"IERC20Permit","nameLocation":"630:12:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":345,"nodeType":"StructuredDocumentation","src":"649:792:3","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":362,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1455:6:3","nodeType":"FunctionDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"owner","nameLocation":"1479:5:3","nodeType":"VariableDeclaration","scope":362,"src":"1471:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":346,"name":"address","nodeType":"ElementaryTypeName","src":"1471:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"spender","nameLocation":"1502:7:3","nodeType":"VariableDeclaration","scope":362,"src":"1494:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"value","nameLocation":"1527:5:3","nodeType":"VariableDeclaration","scope":362,"src":"1519:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":350,"name":"uint256","nodeType":"ElementaryTypeName","src":"1519:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"deadline","nameLocation":"1550:8:3","nodeType":"VariableDeclaration","scope":362,"src":"1542:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":355,"mutability":"mutable","name":"v","nameLocation":"1574:1:3","nodeType":"VariableDeclaration","scope":362,"src":"1568:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":354,"name":"uint8","nodeType":"ElementaryTypeName","src":"1568:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":357,"mutability":"mutable","name":"r","nameLocation":"1593:1:3","nodeType":"VariableDeclaration","scope":362,"src":"1585:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1585:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"s","nameLocation":"1612:1:3","nodeType":"VariableDeclaration","scope":362,"src":"1604:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1461:158:3"},"returnParameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"1628:0:3"},"scope":377,"src":"1446:183:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":363,"nodeType":"StructuredDocumentation","src":"1635:294:3","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":370,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1943:6:3","nodeType":"FunctionDefinition","parameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"owner","nameLocation":"1958:5:3","nodeType":"VariableDeclaration","scope":370,"src":"1950:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":364,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1949:15:3"},"returnParameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":370,"src":"1988:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":367,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1987:9:3"},"scope":377,"src":"1934:63:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":371,"nodeType":"StructuredDocumentation","src":"2003:128:3","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":376,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2198:16:3","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"2214:2:3"},"returnParameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":376,"src":"2240:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2240:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2239:9:3"},"scope":377,"src":"2189:60:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":378,"src":"620:1631:3","usedErrors":[]}],"src":"114:2138:3"},"id":3},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[953],"IERC20":[341],"IERC20Permit":[377],"SafeERC20":[658]},"id":659,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":379,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":380,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":659,"sourceUnit":342,"src":"140:23:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","file":"../extensions/draft-IERC20Permit.sol","id":381,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":659,"sourceUnit":378,"src":"164:46:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":382,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":659,"sourceUnit":954,"src":"211:36:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"249:457:4","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":658,"linearizedBaseContracts":[658],"name":"SafeERC20","nameLocation":"715:9:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":386,"libraryName":{"id":384,"name":"Address","nameLocations":["737:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":953,"src":"737:7:4"},"nodeType":"UsingForDirective","src":"731:26:4","typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":408,"nodeType":"Block","src":"865:103:4","statements":[{"expression":{"arguments":[{"id":397,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"895:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":400,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"925:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"931:8:4","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":308,"src":"925:14:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"940:8:4","memberName":"selector","nodeType":"MemberAccess","src":"925:23:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":403,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":391,"src":"950:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":393,"src":"954:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":398,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"902:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"906:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"902:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"902:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":396,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"875:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$341_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"875:86:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":407,"nodeType":"ExpressionStatement","src":"875:86:4"}]},"id":409,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"772:12:4","nodeType":"FunctionDefinition","parameters":{"id":394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"token","nameLocation":"801:5:4","nodeType":"VariableDeclaration","scope":409,"src":"794:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":388,"nodeType":"UserDefinedTypeName","pathNode":{"id":387,"name":"IERC20","nameLocations":["794:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"794:6:4"},"referencedDeclaration":341,"src":"794:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":391,"mutability":"mutable","name":"to","nameLocation":"824:2:4","nodeType":"VariableDeclaration","scope":409,"src":"816:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":390,"name":"address","nodeType":"ElementaryTypeName","src":"816:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":393,"mutability":"mutable","name":"value","nameLocation":"844:5:4","nodeType":"VariableDeclaration","scope":409,"src":"836:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":392,"name":"uint256","nodeType":"ElementaryTypeName","src":"836:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"784:71:4"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[],"src":"865:0:4"},"scope":658,"src":"763:205:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":434,"nodeType":"Block","src":"1102:113:4","statements":[{"expression":{"arguments":[{"id":422,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1132:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":425,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1162:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1168:12:4","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":340,"src":"1162:18:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1162:27:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":428,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1191:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":429,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1197:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":430,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1201:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":423,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1139:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1143:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1139:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":421,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1112:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$341_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:96:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":433,"nodeType":"ExpressionStatement","src":"1112:96:4"}]},"id":435,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"983:16:4","nodeType":"FunctionDefinition","parameters":{"id":419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"token","nameLocation":"1016:5:4","nodeType":"VariableDeclaration","scope":435,"src":"1009:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":411,"nodeType":"UserDefinedTypeName","pathNode":{"id":410,"name":"IERC20","nameLocations":["1009:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"1009:6:4"},"referencedDeclaration":341,"src":"1009:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"from","nameLocation":"1039:4:4","nodeType":"VariableDeclaration","scope":435,"src":"1031:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"to","nameLocation":"1061:2:4","nodeType":"VariableDeclaration","scope":435,"src":"1053:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"value","nameLocation":"1081:5:4","nodeType":"VariableDeclaration","scope":435,"src":"1073:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":417,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"999:93:4"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[],"src":"1102:0:4"},"scope":658,"src":"974:241:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":478,"nodeType":"Block","src":"1581:497:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"1830:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1839:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1830:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":450,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1829:12:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":455,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1870:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$658","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$658","typeString":"library SafeERC20"}],"id":454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1862:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:4","typeDescriptions":{}}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1862:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":457,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"1877:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":451,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"1846:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1852:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":318,"src":"1846:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1846:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1889:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1846:44:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1845:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1829:62:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1905:56:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":446,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1808:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:163:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":465,"nodeType":"ExpressionStatement","src":"1808:163:4"},{"expression":{"arguments":[{"id":467,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2001:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":470,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"2031:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2037:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":328,"src":"2031:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2045:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2031:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":473,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"2055:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"2064:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":468,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2008:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2012:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2008:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2008:62:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":466,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1981:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$341_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1981:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":477,"nodeType":"ExpressionStatement","src":"1981:90:4"}]},"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"1221:249:4","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":479,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1484:11:4","nodeType":"FunctionDefinition","parameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"token","nameLocation":"1512:5:4","nodeType":"VariableDeclaration","scope":479,"src":"1505:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":438,"nodeType":"UserDefinedTypeName","pathNode":{"id":437,"name":"IERC20","nameLocations":["1505:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"1505:6:4"},"referencedDeclaration":341,"src":"1505:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":441,"mutability":"mutable","name":"spender","nameLocation":"1535:7:4","nodeType":"VariableDeclaration","scope":479,"src":"1527:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":440,"name":"address","nodeType":"ElementaryTypeName","src":"1527:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":443,"mutability":"mutable","name":"value","nameLocation":"1560:5:4","nodeType":"VariableDeclaration","scope":479,"src":"1552:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":442,"name":"uint256","nodeType":"ElementaryTypeName","src":"1552:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:76:4"},"returnParameters":{"id":445,"nodeType":"ParameterList","parameters":[],"src":"1581:0:4"},"scope":658,"src":"1475:603:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"2200:194:4","statements":[{"assignments":[490],"declarations":[{"constant":false,"id":490,"mutability":"mutable","name":"newAllowance","nameLocation":"2218:12:4","nodeType":"VariableDeclaration","scope":514,"src":"2210:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":489,"name":"uint256","nodeType":"ElementaryTypeName","src":"2210:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":501,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":495,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2257:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$658","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$658","typeString":"library SafeERC20"}],"id":494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2249:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":493,"name":"address","nodeType":"ElementaryTypeName","src":"2249:7:4","typeDescriptions":{}}},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2249:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":497,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"2264:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":491,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2233:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2239:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":318,"src":"2233:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2233:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"2275:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2233:47:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2210:70:4"},{"expression":{"arguments":[{"id":503,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2310:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":506,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2340:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2346:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":328,"src":"2340:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2354:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2340:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":509,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"2364:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":510,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"2373:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":504,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2317:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2321:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2317:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2317:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":502,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"2290:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$341_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:97:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":513,"nodeType":"ExpressionStatement","src":"2290:97:4"}]},"id":515,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2093:21:4","nodeType":"FunctionDefinition","parameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"token","nameLocation":"2131:5:4","nodeType":"VariableDeclaration","scope":515,"src":"2124:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":481,"nodeType":"UserDefinedTypeName","pathNode":{"id":480,"name":"IERC20","nameLocations":["2124:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"2124:6:4"},"referencedDeclaration":341,"src":"2124:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":484,"mutability":"mutable","name":"spender","nameLocation":"2154:7:4","nodeType":"VariableDeclaration","scope":515,"src":"2146:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":486,"mutability":"mutable","name":"value","nameLocation":"2179:5:4","nodeType":"VariableDeclaration","scope":515,"src":"2171:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":485,"name":"uint256","nodeType":"ElementaryTypeName","src":"2171:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2114:76:4"},"returnParameters":{"id":488,"nodeType":"ParameterList","parameters":[],"src":"2200:0:4"},"scope":658,"src":"2084:310:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":562,"nodeType":"Block","src":"2516:370:4","statements":[{"id":561,"nodeType":"UncheckedBlock","src":"2526:354:4","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"oldAllowance","nameLocation":"2558:12:4","nodeType":"VariableDeclaration","scope":561,"src":"2550:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"2550:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":535,"initialValue":{"arguments":[{"arguments":[{"id":531,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2597:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$658","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$658","typeString":"library SafeERC20"}],"id":530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2589:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":529,"name":"address","nodeType":"ElementaryTypeName","src":"2589:7:4","typeDescriptions":{}}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":533,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"2604:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":527,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"2573:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2579:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":318,"src":"2573:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2550:62:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":537,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2634:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2650:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2634:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2657:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":536,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2626:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2626:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":542,"nodeType":"ExpressionStatement","src":"2626:75:4"},{"assignments":[544],"declarations":[{"constant":false,"id":544,"mutability":"mutable","name":"newAllowance","nameLocation":"2723:12:4","nodeType":"VariableDeclaration","scope":561,"src":"2715:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":543,"name":"uint256","nodeType":"ElementaryTypeName","src":"2715:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":548,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":545,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2738:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":546,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2753:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2738:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2715:43:4"},{"expression":{"arguments":[{"id":550,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"2792:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":553,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"2822:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2828:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":328,"src":"2822:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2836:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2822:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":556,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"2846:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":557,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"2855:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":551,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2799:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2803:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2799:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":549,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"2772:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$341_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2772:97:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":560,"nodeType":"ExpressionStatement","src":"2772:97:4"}]}]},"id":563,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2409:21:4","nodeType":"FunctionDefinition","parameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":518,"mutability":"mutable","name":"token","nameLocation":"2447:5:4","nodeType":"VariableDeclaration","scope":563,"src":"2440:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":517,"nodeType":"UserDefinedTypeName","pathNode":{"id":516,"name":"IERC20","nameLocations":["2440:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"2440:6:4"},"referencedDeclaration":341,"src":"2440:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":520,"mutability":"mutable","name":"spender","nameLocation":"2470:7:4","nodeType":"VariableDeclaration","scope":563,"src":"2462:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":519,"name":"address","nodeType":"ElementaryTypeName","src":"2462:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":522,"mutability":"mutable","name":"value","nameLocation":"2495:5:4","nodeType":"VariableDeclaration","scope":563,"src":"2487:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:76:4"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[],"src":"2516:0:4"},"scope":658,"src":"2400:486:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":618,"nodeType":"Block","src":"3107:257:4","statements":[{"assignments":[584],"declarations":[{"constant":false,"id":584,"mutability":"mutable","name":"nonceBefore","nameLocation":"3125:11:4","nodeType":"VariableDeclaration","scope":618,"src":"3117:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"3117:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":589,"initialValue":{"arguments":[{"id":587,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"3152:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":585,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"3139:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$377","typeString":"contract IERC20Permit"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3145:6:4","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":370,"src":"3139:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3117:41:4"},{"expression":{"arguments":[{"id":593,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"3181:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":594,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"3188:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":595,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"3197:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":596,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":574,"src":"3204:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":597,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"3214:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":598,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"3217:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":599,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"3220:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":590,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"3168:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$377","typeString":"contract IERC20Permit"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3174:6:4","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":362,"src":"3168:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3168:54:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":601,"nodeType":"ExpressionStatement","src":"3168:54:4"},{"assignments":[603],"declarations":[{"constant":false,"id":603,"mutability":"mutable","name":"nonceAfter","nameLocation":"3240:10:4","nodeType":"VariableDeclaration","scope":618,"src":"3232:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":602,"name":"uint256","nodeType":"ElementaryTypeName","src":"3232:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":608,"initialValue":{"arguments":[{"id":606,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"3266:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":604,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"3253:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$377","typeString":"contract IERC20Permit"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:6:4","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":370,"src":"3253:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3253:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3232:40:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":610,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":603,"src":"3290:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":611,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"3304:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3318:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3304:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3290:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3321:35:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":609,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3282:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":617,"nodeType":"ExpressionStatement","src":"3282:75:4"}]},"id":619,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"2901:10:4","nodeType":"FunctionDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"token","nameLocation":"2934:5:4","nodeType":"VariableDeclaration","scope":619,"src":"2921:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$377","typeString":"contract IERC20Permit"},"typeName":{"id":565,"nodeType":"UserDefinedTypeName","pathNode":{"id":564,"name":"IERC20Permit","nameLocations":["2921:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":377,"src":"2921:12:4"},"referencedDeclaration":377,"src":"2921:12:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$377","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":568,"mutability":"mutable","name":"owner","nameLocation":"2957:5:4","nodeType":"VariableDeclaration","scope":619,"src":"2949:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":567,"name":"address","nodeType":"ElementaryTypeName","src":"2949:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"spender","nameLocation":"2980:7:4","nodeType":"VariableDeclaration","scope":619,"src":"2972:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"2972:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"value","nameLocation":"3005:5:4","nodeType":"VariableDeclaration","scope":619,"src":"2997:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":571,"name":"uint256","nodeType":"ElementaryTypeName","src":"2997:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":574,"mutability":"mutable","name":"deadline","nameLocation":"3028:8:4","nodeType":"VariableDeclaration","scope":619,"src":"3020:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":573,"name":"uint256","nodeType":"ElementaryTypeName","src":"3020:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"v","nameLocation":"3052:1:4","nodeType":"VariableDeclaration","scope":619,"src":"3046:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":575,"name":"uint8","nodeType":"ElementaryTypeName","src":"3046:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"r","nameLocation":"3071:1:4","nodeType":"VariableDeclaration","scope":619,"src":"3063:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3063:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"s","nameLocation":"3090:1:4","nodeType":"VariableDeclaration","scope":619,"src":"3082:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3082:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2911:186:4"},"returnParameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"3107:0:4"},"scope":658,"src":"2892:472:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":656,"nodeType":"Block","src":"3817:636:4","statements":[{"assignments":[629],"declarations":[{"constant":false,"id":629,"mutability":"mutable","name":"returndata","nameLocation":"4179:10:4","nodeType":"VariableDeclaration","scope":656,"src":"4166:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":628,"name":"bytes","nodeType":"ElementaryTypeName","src":"4166:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":638,"initialValue":{"arguments":[{"id":635,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"4220:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4226:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":632,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"4200:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}],"id":631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4192:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":630,"name":"address","nodeType":"ElementaryTypeName","src":"4192:7:4","typeDescriptions":{}}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4207:12:4","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":747,"src":"4192:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4166:95:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":639,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"4275:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4286:6:4","memberName":"length","nodeType":"MemberAccess","src":"4275:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4295:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4275:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":655,"nodeType":"IfStatement","src":"4271:176:4","trueBody":{"id":654,"nodeType":"Block","src":"4298:149:4","statements":[{"expression":{"arguments":[{"arguments":[{"id":646,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"4370:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4383:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":647,"name":"bool","nodeType":"ElementaryTypeName","src":"4383:4:4","typeDescriptions":{}}}],"id":649,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4382:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":644,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4359:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4363:6:4","memberName":"decode","nodeType":"MemberAccess","src":"4359:10:4","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4359:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4391:44:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":643,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4351:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4351:85:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":653,"nodeType":"ExpressionStatement","src":"4351:85:4"}]}}]},"documentation":{"id":620,"nodeType":"StructuredDocumentation","src":"3370:372:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":657,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3756:19:4","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"token","nameLocation":"3783:5:4","nodeType":"VariableDeclaration","scope":657,"src":"3776:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":622,"nodeType":"UserDefinedTypeName","pathNode":{"id":621,"name":"IERC20","nameLocations":["3776:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"3776:6:4"},"referencedDeclaration":341,"src":"3776:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":625,"mutability":"mutable","name":"data","nameLocation":"3803:4:4","nodeType":"VariableDeclaration","scope":657,"src":"3790:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":624,"name":"bytes","nodeType":"ElementaryTypeName","src":"3790:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:33:4"},"returnParameters":{"id":627,"nodeType":"ParameterList","parameters":[],"src":"3817:0:4"},"scope":658,"src":"3747:706:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":659,"src":"707:3748:4","usedErrors":[]}],"src":"115:4341:4"},"id":4},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[953]},"id":954,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":660,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"126:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":953,"linearizedBaseContracts":[953],"name":"Address","nameLocation":"202:7:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":675,"nodeType":"Block","src":"1241:254:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":669,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"1465:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:5","memberName":"code","nodeType":"MemberAccess","src":"1465:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:5","memberName":"length","nodeType":"MemberAccess","src":"1465:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":668,"id":674,"nodeType":"Return","src":"1458:30:5"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"216:954:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":676,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:5","nodeType":"FunctionDefinition","parameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"account","nameLocation":"1203:7:5","nodeType":"VariableDeclaration","scope":676,"src":"1195:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:5"},"returnParameters":{"id":668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":676,"src":"1235:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":666,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:5"},"scope":953,"src":"1175:320:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":709,"nodeType":"Block","src":"2483:241:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":687,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$953","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$953","typeString":"library Address"}],"id":686,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:5","typeDescriptions":{}}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:5","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":690,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"2526:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":684,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":694,"nodeType":"ExpressionStatement","src":"2493:73:5"},{"assignments":[696,null],"declarations":[{"constant":false,"id":696,"mutability":"mutable","name":"success","nameLocation":"2583:7:5","nodeType":"VariableDeclaration","scope":709,"src":"2578:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":695,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":703,"initialValue":{"arguments":[{"hexValue":"","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":697,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"2596:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:5","memberName":"call","nodeType":"MemberAccess","src":"2596:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":699,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"2618:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:5"},{"expression":{"arguments":[{"id":705,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"2647:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":704,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":708,"nodeType":"ExpressionStatement","src":"2639:78:5"}]},"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"1501:906:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":710,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:5","nodeType":"FunctionDefinition","parameters":{"id":682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:5","nodeType":"VariableDeclaration","scope":710,"src":"2431:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":681,"mutability":"mutable","name":"amount","nameLocation":"2466:6:5","nodeType":"VariableDeclaration","scope":710,"src":"2458:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":680,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:5"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[],"src":"2483:0:5"},"scope":953,"src":"2412:312:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":726,"nodeType":"Block","src":"3555:84:5","statements":[{"expression":{"arguments":[{"id":721,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3585:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":722,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"3593:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3599:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":720,"name":"functionCall","nodeType":"Identifier","overloadedDeclarations":[727,747],"referencedDeclaration":747,"src":"3572:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":719,"id":725,"nodeType":"Return","src":"3565:67:5"}]},"documentation":{"id":711,"nodeType":"StructuredDocumentation","src":"2730:731:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":727,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:5","nodeType":"FunctionDefinition","parameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":713,"mutability":"mutable","name":"target","nameLocation":"3496:6:5","nodeType":"VariableDeclaration","scope":727,"src":"3488:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":712,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":715,"mutability":"mutable","name":"data","nameLocation":"3517:4:5","nodeType":"VariableDeclaration","scope":727,"src":"3504:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":714,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:5"},"returnParameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":727,"src":"3541:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":717,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:5"},"scope":953,"src":"3466:173:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":746,"nodeType":"Block","src":"4008:76:5","statements":[{"expression":{"arguments":[{"id":740,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"4047:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":741,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"4055:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4061:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":743,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"4064:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":739,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[767,817],"referencedDeclaration":817,"src":"4025:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4025:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":738,"id":745,"nodeType":"Return","src":"4018:59:5"}]},"documentation":{"id":728,"nodeType":"StructuredDocumentation","src":"3645:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":747,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3870:12:5","nodeType":"FunctionDefinition","parameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":730,"mutability":"mutable","name":"target","nameLocation":"3900:6:5","nodeType":"VariableDeclaration","scope":747,"src":"3892:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"3892:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":732,"mutability":"mutable","name":"data","nameLocation":"3929:4:5","nodeType":"VariableDeclaration","scope":747,"src":"3916:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":731,"name":"bytes","nodeType":"ElementaryTypeName","src":"3916:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"errorMessage","nameLocation":"3957:12:5","nodeType":"VariableDeclaration","scope":747,"src":"3943:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":733,"name":"string","nodeType":"ElementaryTypeName","src":"3943:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3882:93:5"},"returnParameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":747,"src":"3994:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":736,"name":"bytes","nodeType":"ElementaryTypeName","src":"3994:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3993:14:5"},"scope":953,"src":"3861:223:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":766,"nodeType":"Block","src":"4589:111:5","statements":[{"expression":{"arguments":[{"id":760,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"4628:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":761,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"4636:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"4642:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4649:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":759,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[767,817],"referencedDeclaration":817,"src":"4606:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4606:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":758,"id":765,"nodeType":"Return","src":"4599:94:5"}]},"documentation":{"id":748,"nodeType":"StructuredDocumentation","src":"4090:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":767,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4455:21:5","nodeType":"FunctionDefinition","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"target","nameLocation":"4494:6:5","nodeType":"VariableDeclaration","scope":767,"src":"4486:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":749,"name":"address","nodeType":"ElementaryTypeName","src":"4486:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":752,"mutability":"mutable","name":"data","nameLocation":"4523:4:5","nodeType":"VariableDeclaration","scope":767,"src":"4510:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":751,"name":"bytes","nodeType":"ElementaryTypeName","src":"4510:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"value","nameLocation":"4545:5:5","nodeType":"VariableDeclaration","scope":767,"src":"4537:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":753,"name":"uint256","nodeType":"ElementaryTypeName","src":"4537:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4476:80:5"},"returnParameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":767,"src":"4575:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":756,"name":"bytes","nodeType":"ElementaryTypeName","src":"4575:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4574:14:5"},"scope":953,"src":"4446:254:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":816,"nodeType":"Block","src":"5127:320:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":784,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5153:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$953","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$953","typeString":"library Address"}],"id":783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5145:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"5145:7:5","typeDescriptions":{}}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5145:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5159:7:5","memberName":"balance","nodeType":"MemberAccess","src":"5145:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"5170:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5145:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5177:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":781,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5137:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5137:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":791,"nodeType":"ExpressionStatement","src":"5137:81:5"},{"expression":{"arguments":[{"arguments":[{"id":794,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5247:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":793,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"5236:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5236:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5256:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":792,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5228:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5228:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":798,"nodeType":"ExpressionStatement","src":"5228:60:5"},{"assignments":[800,802],"declarations":[{"constant":false,"id":800,"mutability":"mutable","name":"success","nameLocation":"5305:7:5","nodeType":"VariableDeclaration","scope":816,"src":"5300:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":799,"name":"bool","nodeType":"ElementaryTypeName","src":"5300:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":802,"mutability":"mutable","name":"returndata","nameLocation":"5327:10:5","nodeType":"VariableDeclaration","scope":816,"src":"5314:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":801,"name":"bytes","nodeType":"ElementaryTypeName","src":"5314:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":809,"initialValue":{"arguments":[{"id":807,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"5367:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":803,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"5341:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5348:4:5","memberName":"call","nodeType":"MemberAccess","src":"5341:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"5360:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5341:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5341:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5299:73:5"},{"expression":{"arguments":[{"id":811,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"5406:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":812,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"5415:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":813,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"5427:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":810,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"5389:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":780,"id":815,"nodeType":"Return","src":"5382:58:5"}]},"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"4706:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":817,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4957:21:5","nodeType":"FunctionDefinition","parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"target","nameLocation":"4996:6:5","nodeType":"VariableDeclaration","scope":817,"src":"4988:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"4988:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"mutability":"mutable","name":"data","nameLocation":"5025:4:5","nodeType":"VariableDeclaration","scope":817,"src":"5012:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":771,"name":"bytes","nodeType":"ElementaryTypeName","src":"5012:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"value","nameLocation":"5047:5:5","nodeType":"VariableDeclaration","scope":817,"src":"5039:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"5039:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"errorMessage","nameLocation":"5076:12:5","nodeType":"VariableDeclaration","scope":817,"src":"5062:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":775,"name":"string","nodeType":"ElementaryTypeName","src":"5062:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4978:116:5"},"returnParameters":{"id":780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":817,"src":"5113:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":778,"name":"bytes","nodeType":"ElementaryTypeName","src":"5113:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5112:14:5"},"scope":953,"src":"4948:499:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":833,"nodeType":"Block","src":"5724:97:5","statements":[{"expression":{"arguments":[{"id":828,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"5760:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":829,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"5768:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5774:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":827,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[834,869],"referencedDeclaration":869,"src":"5741:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5741:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":826,"id":832,"nodeType":"Return","src":"5734:80:5"}]},"documentation":{"id":818,"nodeType":"StructuredDocumentation","src":"5453:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":834,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5633:18:5","nodeType":"FunctionDefinition","parameters":{"id":823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"mutability":"mutable","name":"target","nameLocation":"5660:6:5","nodeType":"VariableDeclaration","scope":834,"src":"5652:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":819,"name":"address","nodeType":"ElementaryTypeName","src":"5652:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":822,"mutability":"mutable","name":"data","nameLocation":"5681:4:5","nodeType":"VariableDeclaration","scope":834,"src":"5668:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":821,"name":"bytes","nodeType":"ElementaryTypeName","src":"5668:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5651:35:5"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":834,"src":"5710:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":824,"name":"bytes","nodeType":"ElementaryTypeName","src":"5710:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5709:14:5"},"scope":953,"src":"5624:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":868,"nodeType":"Block","src":"6163:228:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":848,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"6192:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":847,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6181:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6181:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6201:38:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""},"value":"Address: static call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9","typeString":"literal_string \"Address: static call to non-contract\""}],"id":846,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6173:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6173:67:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":852,"nodeType":"ExpressionStatement","src":"6173:67:5"},{"assignments":[854,856],"declarations":[{"constant":false,"id":854,"mutability":"mutable","name":"success","nameLocation":"6257:7:5","nodeType":"VariableDeclaration","scope":868,"src":"6252:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":853,"name":"bool","nodeType":"ElementaryTypeName","src":"6252:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":856,"mutability":"mutable","name":"returndata","nameLocation":"6279:10:5","nodeType":"VariableDeclaration","scope":868,"src":"6266:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":855,"name":"bytes","nodeType":"ElementaryTypeName","src":"6266:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":861,"initialValue":{"arguments":[{"id":859,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"6311:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":857,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"6293:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6300:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"6293:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6293:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6251:65:5"},{"expression":{"arguments":[{"id":863,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"6350:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":864,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"6359:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":865,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"6371:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":862,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"6333:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6333:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":845,"id":867,"nodeType":"Return","src":"6326:58:5"}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"5827:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":869,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6014:18:5","nodeType":"FunctionDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"target","nameLocation":"6050:6:5","nodeType":"VariableDeclaration","scope":869,"src":"6042:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"6042:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"data","nameLocation":"6079:4:5","nodeType":"VariableDeclaration","scope":869,"src":"6066:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":838,"name":"bytes","nodeType":"ElementaryTypeName","src":"6066:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"errorMessage","nameLocation":"6107:12:5","nodeType":"VariableDeclaration","scope":869,"src":"6093:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":840,"name":"string","nodeType":"ElementaryTypeName","src":"6093:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6032:93:5"},"returnParameters":{"id":845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":844,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":869,"src":"6149:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":843,"name":"bytes","nodeType":"ElementaryTypeName","src":"6149:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6148:14:5"},"scope":953,"src":"6005:386:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":885,"nodeType":"Block","src":"6667:101:5","statements":[{"expression":{"arguments":[{"id":880,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"6705:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":881,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"6713:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6719:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":879,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[886,921],"referencedDeclaration":921,"src":"6684:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6684:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":878,"id":884,"nodeType":"Return","src":"6677:84:5"}]},"documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"6397:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":886,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6579:20:5","nodeType":"FunctionDefinition","parameters":{"id":875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":872,"mutability":"mutable","name":"target","nameLocation":"6608:6:5","nodeType":"VariableDeclaration","scope":886,"src":"6600:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":871,"name":"address","nodeType":"ElementaryTypeName","src":"6600:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"data","nameLocation":"6629:4:5","nodeType":"VariableDeclaration","scope":886,"src":"6616:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":873,"name":"bytes","nodeType":"ElementaryTypeName","src":"6616:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6599:35:5"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":886,"src":"6653:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":876,"name":"bytes","nodeType":"ElementaryTypeName","src":"6653:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6652:14:5"},"scope":953,"src":"6570:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":920,"nodeType":"Block","src":"7109:232:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":900,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"7138:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":899,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"7127:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7127:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7147:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""},"value":"Address: delegate call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520","typeString":"literal_string \"Address: delegate call to non-contract\""}],"id":898,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7119:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7119:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":904,"nodeType":"ExpressionStatement","src":"7119:69:5"},{"assignments":[906,908],"declarations":[{"constant":false,"id":906,"mutability":"mutable","name":"success","nameLocation":"7205:7:5","nodeType":"VariableDeclaration","scope":920,"src":"7200:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":905,"name":"bool","nodeType":"ElementaryTypeName","src":"7200:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":908,"mutability":"mutable","name":"returndata","nameLocation":"7227:10:5","nodeType":"VariableDeclaration","scope":920,"src":"7214:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":907,"name":"bytes","nodeType":"ElementaryTypeName","src":"7214:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":913,"initialValue":{"arguments":[{"id":911,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"7261:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":909,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"7241:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7248:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"7241:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7241:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7199:67:5"},{"expression":{"arguments":[{"id":915,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"7300:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":916,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"7309:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":917,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"7321:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":914,"name":"verifyCallResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":952,"src":"7283:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (bool,bytes memory,string memory) pure returns (bytes memory)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7283:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":897,"id":919,"nodeType":"Return","src":"7276:58:5"}]},"documentation":{"id":887,"nodeType":"StructuredDocumentation","src":"6774:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":921,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6963:20:5","nodeType":"FunctionDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":889,"mutability":"mutable","name":"target","nameLocation":"7001:6:5","nodeType":"VariableDeclaration","scope":921,"src":"6993:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":888,"name":"address","nodeType":"ElementaryTypeName","src":"6993:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":891,"mutability":"mutable","name":"data","nameLocation":"7030:4:5","nodeType":"VariableDeclaration","scope":921,"src":"7017:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":890,"name":"bytes","nodeType":"ElementaryTypeName","src":"7017:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"errorMessage","nameLocation":"7058:12:5","nodeType":"VariableDeclaration","scope":921,"src":"7044:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":892,"name":"string","nodeType":"ElementaryTypeName","src":"7044:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6983:93:5"},"returnParameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":921,"src":"7095:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":895,"name":"bytes","nodeType":"ElementaryTypeName","src":"7095:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7094:14:5"},"scope":953,"src":"6954:387:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":951,"nodeType":"Block","src":"7721:582:5","statements":[{"condition":{"id":933,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"7735:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":949,"nodeType":"Block","src":"7792:505:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":937,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"7876:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7887:6:5","memberName":"length","nodeType":"MemberAccess","src":"7876:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7896:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7876:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":947,"nodeType":"Block","src":"8234:53:5","statements":[{"expression":{"arguments":[{"id":944,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"8259:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":943,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8252:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8252:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":946,"nodeType":"ExpressionStatement","src":"8252:20:5"}]},"id":948,"nodeType":"IfStatement","src":"7872:415:5","trueBody":{"id":942,"nodeType":"Block","src":"7899:329:5","statements":[{"AST":{"nodeType":"YulBlock","src":"8069:145:5","statements":[{"nodeType":"YulVariableDeclaration","src":"8091:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8120:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8114:5:5"},"nodeType":"YulFunctionCall","src":"8114:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8095:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8163:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8167:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8159:3:5"},"nodeType":"YulFunctionCall","src":"8159:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8180:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8152:6:5"},"nodeType":"YulFunctionCall","src":"8152:44:5"},"nodeType":"YulExpressionStatement","src":"8152:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":926,"isOffset":false,"isSlot":false,"src":"8120:10:5","valueSize":1},{"declaration":926,"isOffset":false,"isSlot":false,"src":"8167:10:5","valueSize":1}],"id":941,"nodeType":"InlineAssembly","src":"8060:154:5"}]}}]},"id":950,"nodeType":"IfStatement","src":"7731:566:5","trueBody":{"id":936,"nodeType":"Block","src":"7744:42:5","statements":[{"expression":{"id":934,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"7765:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":932,"id":935,"nodeType":"Return","src":"7758:17:5"}]}}]},"documentation":{"id":922,"nodeType":"StructuredDocumentation","src":"7347:209:5","text":" @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"},"id":952,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7570:16:5","nodeType":"FunctionDefinition","parameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"success","nameLocation":"7601:7:5","nodeType":"VariableDeclaration","scope":952,"src":"7596:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":923,"name":"bool","nodeType":"ElementaryTypeName","src":"7596:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"returndata","nameLocation":"7631:10:5","nodeType":"VariableDeclaration","scope":952,"src":"7618:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":925,"name":"bytes","nodeType":"ElementaryTypeName","src":"7618:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":928,"mutability":"mutable","name":"errorMessage","nameLocation":"7665:12:5","nodeType":"VariableDeclaration","scope":952,"src":"7651:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":927,"name":"string","nodeType":"ElementaryTypeName","src":"7651:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7586:97:5"},"returnParameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":952,"src":"7707:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":930,"name":"bytes","nodeType":"ElementaryTypeName","src":"7707:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7706:14:5"},"scope":953,"src":"7561:742:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":954,"src":"194:8111:5","usedErrors":[]}],"src":"101:8205:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[975]},"id":976,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":955,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"111:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":975,"linearizedBaseContracts":[975],"name":"Context","nameLocation":"626:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":964,"nodeType":"Block","src":"702:34:6","statements":[{"expression":{"expression":{"id":961,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:6","memberName":"sender","nodeType":"MemberAccess","src":"719:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":960,"id":963,"nodeType":"Return","src":"712:17:6"}]},"id":965,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:6","nodeType":"FunctionDefinition","parameters":{"id":957,"nodeType":"ParameterList","parameters":[],"src":"659:2:6"},"returnParameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":959,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":965,"src":"693:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":958,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:6"},"scope":975,"src":"640:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":973,"nodeType":"Block","src":"809:32:6","statements":[{"expression":{"expression":{"id":970,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:6","memberName":"data","nodeType":"MemberAccess","src":"826:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":969,"id":972,"nodeType":"Return","src":"819:15:6"}]},"id":974,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:6","nodeType":"FunctionDefinition","parameters":{"id":966,"nodeType":"ParameterList","parameters":[],"src":"759:2:6"},"returnParameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":974,"src":"793:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":967,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:6"},"scope":975,"src":"742:99:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":976,"src":"608:235:6","usedErrors":[]}],"src":"86:758:6"},"id":6},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[1287]},"id":1288,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":977,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":978,"nodeType":"StructuredDocumentation","src":"285:196:7","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":1287,"linearizedBaseContracts":[1287],"name":"SafeMath","nameLocation":"490:8:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1009,"nodeType":"Block","src":"717:140:7","statements":[{"id":1008,"nodeType":"UncheckedBlock","src":"727:124:7","statements":[{"assignments":[991],"declarations":[{"constant":false,"id":991,"mutability":"mutable","name":"c","nameLocation":"759:1:7","nodeType":"VariableDeclaration","scope":1008,"src":"751:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":995,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":992,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"763:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":993,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"767:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":996,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"786:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"790:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1003,"nodeType":"IfStatement","src":"782:28:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":989,"id":1002,"nodeType":"Return","src":"793:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1005,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"838:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1006,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":989,"id":1007,"nodeType":"Return","src":"824:16:7"}]}]},"documentation":{"id":979,"nodeType":"StructuredDocumentation","src":"505:131:7","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1010,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:7","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"a","nameLocation":"665:1:7","nodeType":"VariableDeclaration","scope":1010,"src":"657:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"b","nameLocation":"676:1:7","nodeType":"VariableDeclaration","scope":1010,"src":"668:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:7"},"returnParameters":{"id":989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1010,"src":"702:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":985,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1010,"src":"708:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":987,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:7"},"scope":1287,"src":"641:216:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1037,"nodeType":"Block","src":"1078:113:7","statements":[{"id":1036,"nodeType":"UncheckedBlock","src":"1088:97:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1022,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"1116:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1023,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"1120:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1029,"nodeType":"IfStatement","src":"1112:28:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1027,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1021,"id":1028,"nodeType":"Return","src":"1123:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1031,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"1168:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1032,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"1172:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1034,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1021,"id":1035,"nodeType":"Return","src":"1154:20:7"}]}]},"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"863:134:7","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1038,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:7","nodeType":"FunctionDefinition","parameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"a","nameLocation":"1026:1:7","nodeType":"VariableDeclaration","scope":1038,"src":"1018:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1012,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1015,"mutability":"mutable","name":"b","nameLocation":"1037:1:7","nodeType":"VariableDeclaration","scope":1038,"src":"1029:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1014,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:7"},"returnParameters":{"id":1021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1038,"src":"1063:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1017,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1020,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1038,"src":"1069:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1019,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:7"},"scope":1287,"src":"1002:189:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1079,"nodeType":"Block","src":"1415:417:7","statements":[{"id":1078,"nodeType":"UncheckedBlock","src":"1425:401:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1050,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"1683:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1057,"nodeType":"IfStatement","src":"1679:28:7","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1055,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1049,"id":1056,"nodeType":"Return","src":"1691:16:7"}},{"assignments":[1059],"declarations":[{"constant":false,"id":1059,"mutability":"mutable","name":"c","nameLocation":"1729:1:7","nodeType":"VariableDeclaration","scope":1078,"src":"1721:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1063,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1060,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"1733:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1061,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"1737:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1064,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"1756:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1065,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"1760:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1067,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"1765:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1073,"nodeType":"IfStatement","src":"1752:33:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1071,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1049,"id":1072,"nodeType":"Return","src":"1768:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1075,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"1813:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1076,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1049,"id":1077,"nodeType":"Return","src":"1799:16:7"}]}]},"documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"1197:137:7","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1080,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:7","nodeType":"FunctionDefinition","parameters":{"id":1044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"a","nameLocation":"1363:1:7","nodeType":"VariableDeclaration","scope":1080,"src":"1355:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1040,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1043,"mutability":"mutable","name":"b","nameLocation":"1374:1:7","nodeType":"VariableDeclaration","scope":1080,"src":"1366:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:7"},"returnParameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1080,"src":"1400:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1045,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1080,"src":"1406:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:7"},"scope":1287,"src":"1339:493:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1107,"nodeType":"Block","src":"2057:114:7","statements":[{"id":1106,"nodeType":"UncheckedBlock","src":"2067:98:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1092,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"2095:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1099,"nodeType":"IfStatement","src":"2091:29:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1097,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1091,"id":1098,"nodeType":"Return","src":"2103:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1101,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"2148:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1102,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"2152:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1104,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1091,"id":1105,"nodeType":"Return","src":"2134:20:7"}]}]},"documentation":{"id":1081,"nodeType":"StructuredDocumentation","src":"1838:138:7","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1108,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:7","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1083,"mutability":"mutable","name":"a","nameLocation":"2005:1:7","nodeType":"VariableDeclaration","scope":1108,"src":"1997:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"b","nameLocation":"2016:1:7","nodeType":"VariableDeclaration","scope":1108,"src":"2008:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:7"},"returnParameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1108,"src":"2042:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1087,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1108,"src":"2048:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:7"},"scope":1287,"src":"1981:190:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1135,"nodeType":"Block","src":"2406:114:7","statements":[{"id":1134,"nodeType":"UncheckedBlock","src":"2416:98:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1120,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2444:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1127,"nodeType":"IfStatement","src":"2440:29:7","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1125,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1119,"id":1126,"nodeType":"Return","src":"2452:17:7"}},{"expression":{"components":[{"hexValue":"74727565","id":1128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1129,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2497:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1130,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"2501:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1132,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1119,"id":1133,"nodeType":"Return","src":"2483:20:7"}]}]},"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"2177:148:7","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:7","nodeType":"FunctionDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"mutability":"mutable","name":"a","nameLocation":"2354:1:7","nodeType":"VariableDeclaration","scope":1136,"src":"2346:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"b","nameLocation":"2365:1:7","nodeType":"VariableDeclaration","scope":1136,"src":"2357:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:7"},"returnParameters":{"id":1119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1136,"src":"2391:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1115,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1136,"src":"2397:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:7"},"scope":1287,"src":"2330:190:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1150,"nodeType":"Block","src":"2822:29:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1146,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"2839:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1147,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"2843:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1145,"id":1149,"nodeType":"Return","src":"2832:12:7"}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"2526:224:7","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":1151,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:7","nodeType":"FunctionDefinition","parameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"a","nameLocation":"2776:1:7","nodeType":"VariableDeclaration","scope":1151,"src":"2768:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1138,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"b","nameLocation":"2787:1:7","nodeType":"VariableDeclaration","scope":1151,"src":"2779:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:7"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1151,"src":"2813:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:7"},"scope":1287,"src":"2755:96:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1165,"nodeType":"Block","src":"3189:29:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1161,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"3206:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1162,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"3210:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1160,"id":1164,"nodeType":"Return","src":"3199:12:7"}]},"documentation":{"id":1152,"nodeType":"StructuredDocumentation","src":"2857:260:7","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1166,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:7","nodeType":"FunctionDefinition","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"a","nameLocation":"3143:1:7","nodeType":"VariableDeclaration","scope":1166,"src":"3135:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"b","nameLocation":"3154:1:7","nodeType":"VariableDeclaration","scope":1166,"src":"3146:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1155,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:7"},"returnParameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1166,"src":"3180:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:7"},"scope":1287,"src":"3122:96:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1180,"nodeType":"Block","src":"3532:29:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1176,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"3549:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1177,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"3553:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1175,"id":1179,"nodeType":"Return","src":"3542:12:7"}]},"documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"3224:236:7","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":1181,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:7","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"a","nameLocation":"3486:1:7","nodeType":"VariableDeclaration","scope":1181,"src":"3478:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1168,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"b","nameLocation":"3497:1:7","nodeType":"VariableDeclaration","scope":1181,"src":"3489:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:7"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1181,"src":"3523:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1173,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:7"},"scope":1287,"src":"3465:96:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1195,"nodeType":"Block","src":"3917:29:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1191,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"3934:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1192,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"3938:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1190,"id":1194,"nodeType":"Return","src":"3927:12:7"}]},"documentation":{"id":1182,"nodeType":"StructuredDocumentation","src":"3567:278:7","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":1196,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:7","nodeType":"FunctionDefinition","parameters":{"id":1187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1184,"mutability":"mutable","name":"a","nameLocation":"3871:1:7","nodeType":"VariableDeclaration","scope":1196,"src":"3863:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"b","nameLocation":"3882:1:7","nodeType":"VariableDeclaration","scope":1196,"src":"3874:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1185,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:7"},"returnParameters":{"id":1190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1196,"src":"3908:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1188,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:7"},"scope":1287,"src":"3850:96:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1210,"nodeType":"Block","src":"4466:29:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1206,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"4483:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1207,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"4487:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1205,"id":1209,"nodeType":"Return","src":"4476:12:7"}]},"documentation":{"id":1197,"nodeType":"StructuredDocumentation","src":"3952:442:7","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1211,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:7","nodeType":"FunctionDefinition","parameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"a","nameLocation":"4420:1:7","nodeType":"VariableDeclaration","scope":1211,"src":"4412:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1198,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1201,"mutability":"mutable","name":"b","nameLocation":"4431:1:7","nodeType":"VariableDeclaration","scope":1211,"src":"4423:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:7"},"returnParameters":{"id":1205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1211,"src":"4457:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1203,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:7"},"scope":1287,"src":"4399:96:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1235,"nodeType":"Block","src":"5084:106:7","statements":[{"id":1234,"nodeType":"UncheckedBlock","src":"5094:90:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1224,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"5126:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"5131:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5126:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1227,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"5134:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1223,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5118:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:29:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1229,"nodeType":"ExpressionStatement","src":"5118:29:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1230,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"5168:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1231,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"5172:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1222,"id":1233,"nodeType":"Return","src":"5161:12:7"}]}]},"documentation":{"id":1212,"nodeType":"StructuredDocumentation","src":"4501:453:7","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1236,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:7","nodeType":"FunctionDefinition","parameters":{"id":1219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"a","nameLocation":"4989:1:7","nodeType":"VariableDeclaration","scope":1236,"src":"4981:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1213,"name":"uint256","nodeType":"ElementaryTypeName","src":"4981:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"b","nameLocation":"5008:1:7","nodeType":"VariableDeclaration","scope":1236,"src":"5000:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1215,"name":"uint256","nodeType":"ElementaryTypeName","src":"5000:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1218,"mutability":"mutable","name":"errorMessage","nameLocation":"5033:12:7","nodeType":"VariableDeclaration","scope":1236,"src":"5019:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1217,"name":"string","nodeType":"ElementaryTypeName","src":"5019:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:80:7"},"returnParameters":{"id":1222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1236,"src":"5075:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"5075:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5074:9:7"},"scope":1287,"src":"4959:231:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1260,"nodeType":"Block","src":"5799:105:7","statements":[{"id":1259,"nodeType":"UncheckedBlock","src":"5809:89:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1249,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"5841:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5845:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5841:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1252,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"5848:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1248,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5833:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5833:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1254,"nodeType":"ExpressionStatement","src":"5833:28:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1255,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"5882:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1256,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"5886:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5882:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1247,"id":1258,"nodeType":"Return","src":"5875:12:7"}]}]},"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"5196:473:7","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1261,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5683:3:7","nodeType":"FunctionDefinition","parameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"a","nameLocation":"5704:1:7","nodeType":"VariableDeclaration","scope":1261,"src":"5696:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1238,"name":"uint256","nodeType":"ElementaryTypeName","src":"5696:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"b","nameLocation":"5723:1:7","nodeType":"VariableDeclaration","scope":1261,"src":"5715:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"5715:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1243,"mutability":"mutable","name":"errorMessage","nameLocation":"5748:12:7","nodeType":"VariableDeclaration","scope":1261,"src":"5734:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1242,"name":"string","nodeType":"ElementaryTypeName","src":"5734:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5686:80:7"},"returnParameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1261,"src":"5790:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1245,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:9:7"},"scope":1287,"src":"5674:230:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1285,"nodeType":"Block","src":"6675:105:7","statements":[{"id":1284,"nodeType":"UncheckedBlock","src":"6685:89:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"6717:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6721:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6717:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1277,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"6724:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1273,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6709:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6709:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1279,"nodeType":"ExpressionStatement","src":"6709:28:7"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1280,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"6758:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1281,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"6762:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6758:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1272,"id":1283,"nodeType":"Return","src":"6751:12:7"}]}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"5910:635:7","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1286,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6559:3:7","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"a","nameLocation":"6580:1:7","nodeType":"VariableDeclaration","scope":1286,"src":"6572:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1263,"name":"uint256","nodeType":"ElementaryTypeName","src":"6572:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1266,"mutability":"mutable","name":"b","nameLocation":"6599:1:7","nodeType":"VariableDeclaration","scope":1286,"src":"6591:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1265,"name":"uint256","nodeType":"ElementaryTypeName","src":"6591:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"errorMessage","nameLocation":"6624:12:7","nodeType":"VariableDeclaration","scope":1286,"src":"6610:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1267,"name":"string","nodeType":"ElementaryTypeName","src":"6610:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6562:80:7"},"returnParameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1286,"src":"6666:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1270,"name":"uint256","nodeType":"ElementaryTypeName","src":"6666:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6665:9:7"},"scope":1287,"src":"6550:230:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1288,"src":"482:6300:7","usedErrors":[]}],"src":"107:6676:7"},"id":7},"@openzeppelin/contracts/utils/math/SignedSafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedSafeMath.sol","exportedSymbols":{"SignedSafeMath":[1351]},"id":1352,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1289,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"98:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedSafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1290,"nodeType":"StructuredDocumentation","src":"123:192:8","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":1351,"linearizedBaseContracts":[1351],"name":"SignedSafeMath","nameLocation":"324:14:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1304,"nodeType":"Block","src":"648:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1300,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"665:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1301,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"669:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"665:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1299,"id":1303,"nodeType":"Return","src":"658:12:8"}]},"documentation":{"id":1291,"nodeType":"StructuredDocumentation","src":"345:234:8","text":" @dev Returns the multiplication of two signed integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"593:3:8","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"a","nameLocation":"604:1:8","nodeType":"VariableDeclaration","scope":1305,"src":"597:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1292,"name":"int256","nodeType":"ElementaryTypeName","src":"597:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"b","nameLocation":"614:1:8","nodeType":"VariableDeclaration","scope":1305,"src":"607:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1294,"name":"int256","nodeType":"ElementaryTypeName","src":"607:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"596:20:8"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"640:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1297,"name":"int256","nodeType":"ElementaryTypeName","src":"640:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"639:8:8"},"scope":1351,"src":"584:93:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1319,"nodeType":"Block","src":"1026:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1315,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"1043:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1316,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"1047:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1043:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1314,"id":1318,"nodeType":"Return","src":"1036:12:8"}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"683:274:8","text":" @dev Returns the integer division of two signed integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":1320,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"971:3:8","nodeType":"FunctionDefinition","parameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"a","nameLocation":"982:1:8","nodeType":"VariableDeclaration","scope":1320,"src":"975:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1307,"name":"int256","nodeType":"ElementaryTypeName","src":"975:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"b","nameLocation":"992:1:8","nodeType":"VariableDeclaration","scope":1320,"src":"985:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1309,"name":"int256","nodeType":"ElementaryTypeName","src":"985:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"974:20:8"},"returnParameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1320,"src":"1018:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1312,"name":"int256","nodeType":"ElementaryTypeName","src":"1018:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1017:8:8"},"scope":1351,"src":"962:93:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1334,"nodeType":"Block","src":"1358:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1330,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"1375:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1331,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"1379:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1375:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1329,"id":1333,"nodeType":"Return","src":"1368:12:8"}]},"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"1061:228:8","text":" @dev Returns the subtraction of two signed integers, reverting on\n overflow.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1335,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"1303:3:8","nodeType":"FunctionDefinition","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"a","nameLocation":"1314:1:8","nodeType":"VariableDeclaration","scope":1335,"src":"1307:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1322,"name":"int256","nodeType":"ElementaryTypeName","src":"1307:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"b","nameLocation":"1324:1:8","nodeType":"VariableDeclaration","scope":1335,"src":"1317:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1324,"name":"int256","nodeType":"ElementaryTypeName","src":"1317:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1306:20:8"},"returnParameters":{"id":1329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1335,"src":"1350:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1327,"name":"int256","nodeType":"ElementaryTypeName","src":"1350:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1349:8:8"},"scope":1351,"src":"1294:93:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1349,"nodeType":"Block","src":"1684:29:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1345,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"1701:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1346,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"1705:1:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"1701:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1344,"id":1348,"nodeType":"Return","src":"1694:12:8"}]},"documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"1393:222:8","text":" @dev Returns the addition of two signed integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":1350,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"1629:3:8","nodeType":"FunctionDefinition","parameters":{"id":1341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1338,"mutability":"mutable","name":"a","nameLocation":"1640:1:8","nodeType":"VariableDeclaration","scope":1350,"src":"1633:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1337,"name":"int256","nodeType":"ElementaryTypeName","src":"1633:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1340,"mutability":"mutable","name":"b","nameLocation":"1650:1:8","nodeType":"VariableDeclaration","scope":1350,"src":"1643:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1339,"name":"int256","nodeType":"ElementaryTypeName","src":"1643:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1632:20:8"},"returnParameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1350,"src":"1676:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1342,"name":"int256","nodeType":"ElementaryTypeName","src":"1676:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1675:8:8"},"scope":1351,"src":"1620:93:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1352,"src":"316:1399:8","usedErrors":[]}],"src":"98:1618:8"},"id":8},"@uma/core/contracts/common/implementation/FixedPoint.sol":{"ast":{"absolutePath":"@uma/core/contracts/common/implementation/FixedPoint.sol","exportedSymbols":{"FixedPoint":[2984],"SafeMath":[1287],"SignedSafeMath":[1351]},"id":2985,"license":"AGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1353,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"42:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":1354,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2985,"sourceUnit":1288,"src":"67:57:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedSafeMath.sol","file":"@openzeppelin/contracts/utils/math/SignedSafeMath.sol","id":1355,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2985,"sourceUnit":1352,"src":"125:63:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FixedPoint","contractDependencies":[],"contractKind":"library","documentation":{"id":1356,"nodeType":"StructuredDocumentation","src":"190:61:9","text":" @title Library for fixed point arithmetic on uints"},"fullyImplemented":true,"id":2984,"linearizedBaseContracts":[2984],"name":"FixedPoint","nameLocation":"260:10:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1359,"libraryName":{"id":1357,"name":"SafeMath","nameLocations":["283:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1287,"src":"283:8:9"},"nodeType":"UsingForDirective","src":"277:27:9","typeName":{"id":1358,"name":"uint256","nodeType":"ElementaryTypeName","src":"296:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":1362,"libraryName":{"id":1360,"name":"SignedSafeMath","nameLocations":["315:14:9"],"nodeType":"IdentifierPath","referencedDeclaration":1351,"src":"315:14:9"},"nodeType":"UsingForDirective","src":"309:32:9","typeName":{"id":1361,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}},{"constant":true,"id":1367,"mutability":"constant","name":"FP_SCALING_FACTOR","nameLocation":"599:17:9","nodeType":"VariableDeclaration","scope":2984,"src":"574:51:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"619:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3138","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"623:2:9","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"619:6:9","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"}},"visibility":"private"},{"canonicalName":"FixedPoint.Unsigned","id":1370,"members":[{"constant":false,"id":1369,"mutability":"mutable","name":"rawValue","nameLocation":"800:8:9","nodeType":"VariableDeclaration","scope":1370,"src":"792:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1368,"name":"uint256","nodeType":"ElementaryTypeName","src":"792:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Unsigned","nameLocation":"773:8:9","nodeType":"StructDefinition","scope":2984,"src":"766:49:9","visibility":"public"},{"body":{"id":1386,"nodeType":"Block","src":"1121:58:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1382,"name":"FP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"1153:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1380,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1373,"src":"1147:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1149:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"1147:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1147:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1379,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"1138:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1138:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1378,"id":1385,"nodeType":"Return","src":"1131:41:9"}]},"documentation":{"id":1371,"nodeType":"StructuredDocumentation","src":"821:218:9","text":" @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\n @param a uint to convert into a FixedPoint.\n @return the converted FixedPoint."},"id":1387,"implemented":true,"kind":"function","modifiers":[],"name":"fromUnscaledUint","nameLocation":"1053:16:9","nodeType":"FunctionDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"a","nameLocation":"1078:1:9","nodeType":"VariableDeclaration","scope":1387,"src":"1070:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1070:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1069:11:9"},"returnParameters":{"id":1378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1387,"src":"1104:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1376,"nodeType":"UserDefinedTypeName","pathNode":{"id":1375,"name":"Unsigned","nameLocations":["1104:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1104:8:9"},"referencedDeclaration":1370,"src":"1104:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"1103:17:9"},"scope":2984,"src":"1044:135:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1406,"nodeType":"Block","src":"1418:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1398,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"1435:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1399,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1437:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"1435:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1401,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"1466:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1400,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"1449:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1449:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1469:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"1449:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1435:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1397,"id":1405,"nodeType":"Return","src":"1428:49:9"}]},"documentation":{"id":1388,"nodeType":"StructuredDocumentation","src":"1185:152:9","text":" @notice Whether `a` is equal to `b`.\n @param a a FixedPoint.\n @param b a uint256.\n @return True if equal, or False."},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"isEqual","nameLocation":"1351:7:9","nodeType":"FunctionDefinition","parameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"a","nameLocation":"1375:1:9","nodeType":"VariableDeclaration","scope":1407,"src":"1359:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1390,"nodeType":"UserDefinedTypeName","pathNode":{"id":1389,"name":"Unsigned","nameLocations":["1359:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1359:8:9"},"referencedDeclaration":1370,"src":"1359:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1393,"mutability":"mutable","name":"b","nameLocation":"1386:1:9","nodeType":"VariableDeclaration","scope":1407,"src":"1378:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"1378:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1358:30:9"},"returnParameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1407,"src":"1412:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1395,"name":"bool","nodeType":"ElementaryTypeName","src":"1412:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1411:6:9"},"scope":2984,"src":"1342:142:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1425,"nodeType":"Block","src":"1734:48:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1419,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"1751:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1753:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"1751:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1421,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"1765:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1422,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1767:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"1765:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1751:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1418,"id":1424,"nodeType":"Return","src":"1744:31:9"}]},"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"1490:155:9","text":" @notice Whether `a` is equal to `b`.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return True if equal, or False."},"id":1426,"implemented":true,"kind":"function","modifiers":[],"name":"isEqual","nameLocation":"1659:7:9","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"a","nameLocation":"1683:1:9","nodeType":"VariableDeclaration","scope":1426,"src":"1667:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1410,"nodeType":"UserDefinedTypeName","pathNode":{"id":1409,"name":"Unsigned","nameLocations":["1667:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1667:8:9"},"referencedDeclaration":1370,"src":"1667:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"b","nameLocation":"1702:1:9","nodeType":"VariableDeclaration","scope":1426,"src":"1686:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1413,"nodeType":"UserDefinedTypeName","pathNode":{"id":1412,"name":"Unsigned","nameLocations":["1686:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1686:8:9"},"referencedDeclaration":1370,"src":"1686:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"1666:38:9"},"returnParameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1426,"src":"1728:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1416,"name":"bool","nodeType":"ElementaryTypeName","src":"1728:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1727:6:9"},"scope":2984,"src":"1650:132:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1444,"nodeType":"Block","src":"2044:47:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1438,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"2061:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2063:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"2061:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1440,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"2074:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2076:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"2074:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1437,"id":1443,"nodeType":"Return","src":"2054:30:9"}]},"documentation":{"id":1427,"nodeType":"StructuredDocumentation","src":"1788:161:9","text":" @notice Whether `a` is greater than `b`.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return True if `a > b`, or False."},"id":1445,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThan","nameLocation":"1963:13:9","nodeType":"FunctionDefinition","parameters":{"id":1434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"a","nameLocation":"1993:1:9","nodeType":"VariableDeclaration","scope":1445,"src":"1977:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1429,"nodeType":"UserDefinedTypeName","pathNode":{"id":1428,"name":"Unsigned","nameLocations":["1977:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1977:8:9"},"referencedDeclaration":1370,"src":"1977:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1433,"mutability":"mutable","name":"b","nameLocation":"2012:1:9","nodeType":"VariableDeclaration","scope":1445,"src":"1996:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1432,"nodeType":"UserDefinedTypeName","pathNode":{"id":1431,"name":"Unsigned","nameLocations":["1996:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1996:8:9"},"referencedDeclaration":1370,"src":"1996:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"1976:38:9"},"returnParameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1445,"src":"2038:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1435,"name":"bool","nodeType":"ElementaryTypeName","src":"2038:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2037:6:9"},"scope":2984,"src":"1954:137:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1464,"nodeType":"Block","src":"2342:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1456,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"2359:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1457,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2361:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"2359:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":1459,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"2389:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1458,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2372:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2372:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2392:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"2372:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2359:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1455,"id":1463,"nodeType":"Return","src":"2352:48:9"}]},"documentation":{"id":1446,"nodeType":"StructuredDocumentation","src":"2097:158:9","text":" @notice Whether `a` is greater than `b`.\n @param a a FixedPoint.\n @param b a uint256.\n @return True if `a > b`, or False."},"id":1465,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThan","nameLocation":"2269:13:9","nodeType":"FunctionDefinition","parameters":{"id":1452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"a","nameLocation":"2299:1:9","nodeType":"VariableDeclaration","scope":1465,"src":"2283:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1448,"nodeType":"UserDefinedTypeName","pathNode":{"id":1447,"name":"Unsigned","nameLocations":["2283:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"2283:8:9"},"referencedDeclaration":1370,"src":"2283:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1451,"mutability":"mutable","name":"b","nameLocation":"2310:1:9","nodeType":"VariableDeclaration","scope":1465,"src":"2302:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1450,"name":"uint256","nodeType":"ElementaryTypeName","src":"2302:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2282:30:9"},"returnParameters":{"id":1455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1465,"src":"2336:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1453,"name":"bool","nodeType":"ElementaryTypeName","src":"2336:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2335:6:9"},"scope":2984,"src":"2260:147:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1484,"nodeType":"Block","src":"2658:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1477,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"2692:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1476,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2675:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2675:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2695:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"2675:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1480,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"2706:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1481,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2708:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"2706:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2675:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1475,"id":1483,"nodeType":"Return","src":"2668:48:9"}]},"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"2413:158:9","text":" @notice Whether `a` is greater than `b`.\n @param a a uint256.\n @param b a FixedPoint.\n @return True if `a > b`, or False."},"id":1485,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThan","nameLocation":"2585:13:9","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"a","nameLocation":"2607:1:9","nodeType":"VariableDeclaration","scope":1485,"src":"2599:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"2599:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"b","nameLocation":"2626:1:9","nodeType":"VariableDeclaration","scope":1485,"src":"2610:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1470,"nodeType":"UserDefinedTypeName","pathNode":{"id":1469,"name":"Unsigned","nameLocations":["2610:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"2610:8:9"},"referencedDeclaration":1370,"src":"2610:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"2598:30:9"},"returnParameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1485,"src":"2652:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1473,"name":"bool","nodeType":"ElementaryTypeName","src":"2652:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2651:6:9"},"scope":2984,"src":"2576:147:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1503,"nodeType":"Block","src":"3005:48:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1497,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"3022:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1498,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3024:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"3022:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1499,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"3036:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3038:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"3036:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3022:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1496,"id":1502,"nodeType":"Return","src":"3015:31:9"}]},"documentation":{"id":1486,"nodeType":"StructuredDocumentation","src":"2729:174:9","text":" @notice Whether `a` is greater than or equal to `b`.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return True if `a >= b`, or False."},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThanOrEqual","nameLocation":"2917:20:9","nodeType":"FunctionDefinition","parameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"a","nameLocation":"2954:1:9","nodeType":"VariableDeclaration","scope":1504,"src":"2938:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1488,"nodeType":"UserDefinedTypeName","pathNode":{"id":1487,"name":"Unsigned","nameLocations":["2938:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"2938:8:9"},"referencedDeclaration":1370,"src":"2938:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"b","nameLocation":"2973:1:9","nodeType":"VariableDeclaration","scope":1504,"src":"2957:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1491,"nodeType":"UserDefinedTypeName","pathNode":{"id":1490,"name":"Unsigned","nameLocations":["2957:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"2957:8:9"},"referencedDeclaration":1370,"src":"2957:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"2937:38:9"},"returnParameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1504,"src":"2999:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1494,"name":"bool","nodeType":"ElementaryTypeName","src":"2999:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2998:6:9"},"scope":2984,"src":"2908:145:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1523,"nodeType":"Block","src":"3324:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1515,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"3341:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1516,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3343:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"3341:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":1518,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"3372:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1517,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"3355:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3355:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1520,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3375:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"3355:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3341:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1514,"id":1522,"nodeType":"Return","src":"3334:49:9"}]},"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"3059:171:9","text":" @notice Whether `a` is greater than or equal to `b`.\n @param a a FixedPoint.\n @param b a uint256.\n @return True if `a >= b`, or False."},"id":1524,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThanOrEqual","nameLocation":"3244:20:9","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"a","nameLocation":"3281:1:9","nodeType":"VariableDeclaration","scope":1524,"src":"3265:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1507,"nodeType":"UserDefinedTypeName","pathNode":{"id":1506,"name":"Unsigned","nameLocations":["3265:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"3265:8:9"},"referencedDeclaration":1370,"src":"3265:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"b","nameLocation":"3292:1:9","nodeType":"VariableDeclaration","scope":1524,"src":"3284:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1509,"name":"uint256","nodeType":"ElementaryTypeName","src":"3284:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3264:30:9"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1524,"src":"3318:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1512,"name":"bool","nodeType":"ElementaryTypeName","src":"3318:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3317:6:9"},"scope":2984,"src":"3235:155:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1543,"nodeType":"Block","src":"3661:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1536,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"3695:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1535,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"3678:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3678:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1538,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3698:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"3678:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1539,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"3710:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1540,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3712:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"3710:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3678:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1534,"id":1542,"nodeType":"Return","src":"3671:49:9"}]},"documentation":{"id":1525,"nodeType":"StructuredDocumentation","src":"3396:171:9","text":" @notice Whether `a` is greater than or equal to `b`.\n @param a a uint256.\n @param b a FixedPoint.\n @return True if `a >= b`, or False."},"id":1544,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThanOrEqual","nameLocation":"3581:20:9","nodeType":"FunctionDefinition","parameters":{"id":1531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1527,"mutability":"mutable","name":"a","nameLocation":"3610:1:9","nodeType":"VariableDeclaration","scope":1544,"src":"3602:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1526,"name":"uint256","nodeType":"ElementaryTypeName","src":"3602:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1530,"mutability":"mutable","name":"b","nameLocation":"3629:1:9","nodeType":"VariableDeclaration","scope":1544,"src":"3613:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1529,"nodeType":"UserDefinedTypeName","pathNode":{"id":1528,"name":"Unsigned","nameLocations":["3613:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"3613:8:9"},"referencedDeclaration":1370,"src":"3613:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"3601:30:9"},"returnParameters":{"id":1534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1544,"src":"3655:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1532,"name":"bool","nodeType":"ElementaryTypeName","src":"3655:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3654:6:9"},"scope":2984,"src":"3572:155:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1562,"nodeType":"Block","src":"3983:47:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1556,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"4000:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4002:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4000:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1558,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"4013:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4015:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4013:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4000:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1555,"id":1561,"nodeType":"Return","src":"3993:30:9"}]},"documentation":{"id":1545,"nodeType":"StructuredDocumentation","src":"3733:158:9","text":" @notice Whether `a` is less than `b`.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return True if `a < b`, or False."},"id":1563,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThan","nameLocation":"3905:10:9","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1548,"mutability":"mutable","name":"a","nameLocation":"3932:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"3916:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1547,"nodeType":"UserDefinedTypeName","pathNode":{"id":1546,"name":"Unsigned","nameLocations":["3916:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"3916:8:9"},"referencedDeclaration":1370,"src":"3916:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1551,"mutability":"mutable","name":"b","nameLocation":"3951:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"3935:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1550,"nodeType":"UserDefinedTypeName","pathNode":{"id":1549,"name":"Unsigned","nameLocations":["3935:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"3935:8:9"},"referencedDeclaration":1370,"src":"3935:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"3915:38:9"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1563,"src":"3977:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1553,"name":"bool","nodeType":"ElementaryTypeName","src":"3977:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3976:6:9"},"scope":2984,"src":"3896:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1582,"nodeType":"Block","src":"4275:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1574,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"4292:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4294:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4292:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":1577,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1569,"src":"4322:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1576,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"4305:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4305:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1579,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4325:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4305:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4292:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1573,"id":1581,"nodeType":"Return","src":"4285:48:9"}]},"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"4036:155:9","text":" @notice Whether `a` is less than `b`.\n @param a a FixedPoint.\n @param b a uint256.\n @return True if `a < b`, or False."},"id":1583,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThan","nameLocation":"4205:10:9","nodeType":"FunctionDefinition","parameters":{"id":1570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"mutability":"mutable","name":"a","nameLocation":"4232:1:9","nodeType":"VariableDeclaration","scope":1583,"src":"4216:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1566,"nodeType":"UserDefinedTypeName","pathNode":{"id":1565,"name":"Unsigned","nameLocations":["4216:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"4216:8:9"},"referencedDeclaration":1370,"src":"4216:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1569,"mutability":"mutable","name":"b","nameLocation":"4243:1:9","nodeType":"VariableDeclaration","scope":1583,"src":"4235:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1568,"name":"uint256","nodeType":"ElementaryTypeName","src":"4235:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4215:30:9"},"returnParameters":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1583,"src":"4269:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1571,"name":"bool","nodeType":"ElementaryTypeName","src":"4269:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4268:6:9"},"scope":2984,"src":"4196:144:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1602,"nodeType":"Block","src":"4585:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1595,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"4619:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1594,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"4602:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4602:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1597,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4622:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4602:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1598,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"4633:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1599,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4635:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4633:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4602:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1593,"id":1601,"nodeType":"Return","src":"4595:48:9"}]},"documentation":{"id":1584,"nodeType":"StructuredDocumentation","src":"4346:155:9","text":" @notice Whether `a` is less than `b`.\n @param a a uint256.\n @param b a FixedPoint.\n @return True if `a < b`, or False."},"id":1603,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThan","nameLocation":"4515:10:9","nodeType":"FunctionDefinition","parameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"a","nameLocation":"4534:1:9","nodeType":"VariableDeclaration","scope":1603,"src":"4526:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1585,"name":"uint256","nodeType":"ElementaryTypeName","src":"4526:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"b","nameLocation":"4553:1:9","nodeType":"VariableDeclaration","scope":1603,"src":"4537:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1588,"nodeType":"UserDefinedTypeName","pathNode":{"id":1587,"name":"Unsigned","nameLocations":["4537:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"4537:8:9"},"referencedDeclaration":1370,"src":"4537:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"4525:30:9"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1603,"src":"4579:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1591,"name":"bool","nodeType":"ElementaryTypeName","src":"4579:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4578:6:9"},"scope":2984,"src":"4506:144:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1621,"nodeType":"Block","src":"4926:48:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1615,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"4943:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4945:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4943:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1617,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"4957:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1618,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4959:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"4957:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4943:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1614,"id":1620,"nodeType":"Return","src":"4936:31:9"}]},"documentation":{"id":1604,"nodeType":"StructuredDocumentation","src":"4656:171:9","text":" @notice Whether `a` is less than or equal to `b`.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return True if `a <= b`, or False."},"id":1622,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThanOrEqual","nameLocation":"4841:17:9","nodeType":"FunctionDefinition","parameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"a","nameLocation":"4875:1:9","nodeType":"VariableDeclaration","scope":1622,"src":"4859:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1606,"nodeType":"UserDefinedTypeName","pathNode":{"id":1605,"name":"Unsigned","nameLocations":["4859:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"4859:8:9"},"referencedDeclaration":1370,"src":"4859:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1610,"mutability":"mutable","name":"b","nameLocation":"4894:1:9","nodeType":"VariableDeclaration","scope":1622,"src":"4878:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1609,"nodeType":"UserDefinedTypeName","pathNode":{"id":1608,"name":"Unsigned","nameLocations":["4878:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"4878:8:9"},"referencedDeclaration":1370,"src":"4878:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"4858:38:9"},"returnParameters":{"id":1614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1622,"src":"4920:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1612,"name":"bool","nodeType":"ElementaryTypeName","src":"4920:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4919:6:9"},"scope":2984,"src":"4832:142:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1641,"nodeType":"Block","src":"5239:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1633,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"5256:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1634,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5258:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"5256:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1636,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"5287:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1635,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"5270:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5270:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1638,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5290:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"5270:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5256:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1632,"id":1640,"nodeType":"Return","src":"5249:49:9"}]},"documentation":{"id":1623,"nodeType":"StructuredDocumentation","src":"4980:168:9","text":" @notice Whether `a` is less than or equal to `b`.\n @param a a FixedPoint.\n @param b a uint256.\n @return True if `a <= b`, or False."},"id":1642,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThanOrEqual","nameLocation":"5162:17:9","nodeType":"FunctionDefinition","parameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1626,"mutability":"mutable","name":"a","nameLocation":"5196:1:9","nodeType":"VariableDeclaration","scope":1642,"src":"5180:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1625,"nodeType":"UserDefinedTypeName","pathNode":{"id":1624,"name":"Unsigned","nameLocations":["5180:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"5180:8:9"},"referencedDeclaration":1370,"src":"5180:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1628,"mutability":"mutable","name":"b","nameLocation":"5207:1:9","nodeType":"VariableDeclaration","scope":1642,"src":"5199:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1627,"name":"uint256","nodeType":"ElementaryTypeName","src":"5199:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5179:30:9"},"returnParameters":{"id":1632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1642,"src":"5233:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1630,"name":"bool","nodeType":"ElementaryTypeName","src":"5233:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5232:6:9"},"scope":2984,"src":"5153:152:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1661,"nodeType":"Block","src":"5570:66:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1654,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"5604:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1653,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"5587:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5587:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5607:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"5587:28:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1657,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1648,"src":"5619:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1658,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5621:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"5619:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5587:42:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1652,"id":1660,"nodeType":"Return","src":"5580:49:9"}]},"documentation":{"id":1643,"nodeType":"StructuredDocumentation","src":"5311:168:9","text":" @notice Whether `a` is less than or equal to `b`.\n @param a a uint256.\n @param b a FixedPoint.\n @return True if `a <= b`, or False."},"id":1662,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThanOrEqual","nameLocation":"5493:17:9","nodeType":"FunctionDefinition","parameters":{"id":1649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1645,"mutability":"mutable","name":"a","nameLocation":"5519:1:9","nodeType":"VariableDeclaration","scope":1662,"src":"5511:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1644,"name":"uint256","nodeType":"ElementaryTypeName","src":"5511:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1648,"mutability":"mutable","name":"b","nameLocation":"5538:1:9","nodeType":"VariableDeclaration","scope":1662,"src":"5522:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1647,"nodeType":"UserDefinedTypeName","pathNode":{"id":1646,"name":"Unsigned","nameLocations":["5522:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"5522:8:9"},"referencedDeclaration":1370,"src":"5522:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"5510:30:9"},"returnParameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1662,"src":"5564:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1650,"name":"bool","nodeType":"ElementaryTypeName","src":"5564:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5563:6:9"},"scope":2984,"src":"5484:152:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1684,"nodeType":"Block","src":"5895:55:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1675,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"5912:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1676,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5914:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"5912:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1677,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"5925:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1678,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5927:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"5925:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5912:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1681,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"5942:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5912:31:9","trueExpression":{"id":1680,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"5938:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1674,"id":1683,"nodeType":"Return","src":"5905:38:9"}]},"documentation":{"id":1663,"nodeType":"StructuredDocumentation","src":"5642:157:9","text":" @notice The minimum of `a` and `b`.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return the minimum of `a` and `b`."},"id":1685,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"5813:3:9","nodeType":"FunctionDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"a","nameLocation":"5833:1:9","nodeType":"VariableDeclaration","scope":1685,"src":"5817:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1665,"nodeType":"UserDefinedTypeName","pathNode":{"id":1664,"name":"Unsigned","nameLocations":["5817:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"5817:8:9"},"referencedDeclaration":1370,"src":"5817:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1669,"mutability":"mutable","name":"b","nameLocation":"5852:1:9","nodeType":"VariableDeclaration","scope":1685,"src":"5836:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1668,"nodeType":"UserDefinedTypeName","pathNode":{"id":1667,"name":"Unsigned","nameLocations":["5836:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"5836:8:9"},"referencedDeclaration":1370,"src":"5836:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"5816:38:9"},"returnParameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1673,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1685,"src":"5878:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1672,"nodeType":"UserDefinedTypeName","pathNode":{"id":1671,"name":"Unsigned","nameLocations":["5878:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"5878:8:9"},"referencedDeclaration":1370,"src":"5878:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"5877:17:9"},"scope":2984,"src":"5804:146:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1707,"nodeType":"Block","src":"6209:55:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1698,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"6226:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1699,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6228:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"6226:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1700,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"6239:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6241:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"6239:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6226:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1704,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"6256:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6226:31:9","trueExpression":{"id":1703,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"6252:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1697,"id":1706,"nodeType":"Return","src":"6219:38:9"}]},"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"5956:157:9","text":" @notice The maximum of `a` and `b`.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return the maximum of `a` and `b`."},"id":1708,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"6127:3:9","nodeType":"FunctionDefinition","parameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"a","nameLocation":"6147:1:9","nodeType":"VariableDeclaration","scope":1708,"src":"6131:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1688,"nodeType":"UserDefinedTypeName","pathNode":{"id":1687,"name":"Unsigned","nameLocations":["6131:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6131:8:9"},"referencedDeclaration":1370,"src":"6131:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"b","nameLocation":"6166:1:9","nodeType":"VariableDeclaration","scope":1708,"src":"6150:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1691,"nodeType":"UserDefinedTypeName","pathNode":{"id":1690,"name":"Unsigned","nameLocations":["6150:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6150:8:9"},"referencedDeclaration":1370,"src":"6150:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"6130:38:9"},"returnParameters":{"id":1697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1708,"src":"6192:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1695,"nodeType":"UserDefinedTypeName","pathNode":{"id":1694,"name":"Unsigned","nameLocations":["6192:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6192:8:9"},"referencedDeclaration":1370,"src":"6192:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"6191:17:9"},"scope":2984,"src":"6118:146:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1730,"nodeType":"Block","src":"6536:60:9","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":1725,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1715,"src":"6577:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1726,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6579:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"6577:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1722,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"6562:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6564:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"6562:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6573:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"6562:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6562:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1721,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"6553:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6553:36:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1720,"id":1729,"nodeType":"Return","src":"6546:43:9"}]},"documentation":{"id":1709,"nodeType":"StructuredDocumentation","src":"6270:170:9","text":" @notice Adds two `Unsigned`s, reverting on overflow.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return the sum of `a` and `b`."},"id":1731,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"6454:3:9","nodeType":"FunctionDefinition","parameters":{"id":1716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1712,"mutability":"mutable","name":"a","nameLocation":"6474:1:9","nodeType":"VariableDeclaration","scope":1731,"src":"6458:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1711,"nodeType":"UserDefinedTypeName","pathNode":{"id":1710,"name":"Unsigned","nameLocations":["6458:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6458:8:9"},"referencedDeclaration":1370,"src":"6458:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1715,"mutability":"mutable","name":"b","nameLocation":"6493:1:9","nodeType":"VariableDeclaration","scope":1731,"src":"6477:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1714,"nodeType":"UserDefinedTypeName","pathNode":{"id":1713,"name":"Unsigned","nameLocations":["6477:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6477:8:9"},"referencedDeclaration":1370,"src":"6477:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"6457:38:9"},"returnParameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1731,"src":"6519:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1718,"nodeType":"UserDefinedTypeName","pathNode":{"id":1717,"name":"Unsigned","nameLocations":["6519:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6519:8:9"},"referencedDeclaration":1370,"src":"6519:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"6518:17:9"},"scope":2984,"src":"6445:151:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1750,"nodeType":"Block","src":"6875:51:9","statements":[{"expression":{"arguments":[{"id":1744,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"6896:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},{"arguments":[{"id":1746,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"6916:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1745,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"6899:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6899:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"},{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}],"id":1743,"name":"add","nodeType":"Identifier","overloadedDeclarations":[1731,1751,2546,2566],"referencedDeclaration":1731,"src":"6892:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Unsigned_$1370_memory_ptr_$_t_struct$_Unsigned_$1370_memory_ptr_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (struct FixedPoint.Unsigned memory,struct FixedPoint.Unsigned memory) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1742,"id":1749,"nodeType":"Return","src":"6885:34:9"}]},"documentation":{"id":1732,"nodeType":"StructuredDocumentation","src":"6602:185:9","text":" @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\n @param a a FixedPoint.\n @param b a uint256.\n @return the sum of `a` and `b`."},"id":1751,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"6801:3:9","nodeType":"FunctionDefinition","parameters":{"id":1738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1735,"mutability":"mutable","name":"a","nameLocation":"6821:1:9","nodeType":"VariableDeclaration","scope":1751,"src":"6805:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1734,"nodeType":"UserDefinedTypeName","pathNode":{"id":1733,"name":"Unsigned","nameLocations":["6805:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6805:8:9"},"referencedDeclaration":1370,"src":"6805:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1737,"mutability":"mutable","name":"b","nameLocation":"6832:1:9","nodeType":"VariableDeclaration","scope":1751,"src":"6824:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1736,"name":"uint256","nodeType":"ElementaryTypeName","src":"6824:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6804:30:9"},"returnParameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1751,"src":"6858:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1740,"nodeType":"UserDefinedTypeName","pathNode":{"id":1739,"name":"Unsigned","nameLocations":["6858:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"6858:8:9"},"referencedDeclaration":1370,"src":"6858:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"6857:17:9"},"scope":2984,"src":"6792:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1773,"nodeType":"Block","src":"7210:60:9","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":1768,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"7251:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7253:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"7251:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1765,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1755,"src":"7236:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1766,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7238:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"7236:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7247:3:9","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1166,"src":"7236:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7236:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1764,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"7227:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7227:36:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1763,"id":1772,"nodeType":"Return","src":"7220:43:9"}]},"documentation":{"id":1752,"nodeType":"StructuredDocumentation","src":"6932:182:9","text":" @notice Subtracts two `Unsigned`s, reverting on overflow.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return the difference of `a` and `b`."},"id":1774,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"7128:3:9","nodeType":"FunctionDefinition","parameters":{"id":1759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"a","nameLocation":"7148:1:9","nodeType":"VariableDeclaration","scope":1774,"src":"7132:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1754,"nodeType":"UserDefinedTypeName","pathNode":{"id":1753,"name":"Unsigned","nameLocations":["7132:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"7132:8:9"},"referencedDeclaration":1370,"src":"7132:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1758,"mutability":"mutable","name":"b","nameLocation":"7167:1:9","nodeType":"VariableDeclaration","scope":1774,"src":"7151:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1757,"nodeType":"UserDefinedTypeName","pathNode":{"id":1756,"name":"Unsigned","nameLocations":["7151:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"7151:8:9"},"referencedDeclaration":1370,"src":"7151:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"7131:38:9"},"returnParameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1774,"src":"7193:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1761,"nodeType":"UserDefinedTypeName","pathNode":{"id":1760,"name":"Unsigned","nameLocations":["7193:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"7193:8:9"},"referencedDeclaration":1370,"src":"7193:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"7192:17:9"},"scope":2984,"src":"7119:151:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1793,"nodeType":"Block","src":"7566:51:9","statements":[{"expression":{"arguments":[{"id":1787,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"7587:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},{"arguments":[{"id":1789,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"7607:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1788,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"7590:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"},{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}],"id":1786,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[1774,1794,1814,2589,2609,2629],"referencedDeclaration":1774,"src":"7583:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Unsigned_$1370_memory_ptr_$_t_struct$_Unsigned_$1370_memory_ptr_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (struct FixedPoint.Unsigned memory,struct FixedPoint.Unsigned memory) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7583:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1785,"id":1792,"nodeType":"Return","src":"7576:34:9"}]},"documentation":{"id":1775,"nodeType":"StructuredDocumentation","src":"7276:202:9","text":" @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\n @param a a FixedPoint.\n @param b a uint256.\n @return the difference of `a` and `b`."},"id":1794,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"7492:3:9","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1778,"mutability":"mutable","name":"a","nameLocation":"7512:1:9","nodeType":"VariableDeclaration","scope":1794,"src":"7496:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1777,"nodeType":"UserDefinedTypeName","pathNode":{"id":1776,"name":"Unsigned","nameLocations":["7496:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"7496:8:9"},"referencedDeclaration":1370,"src":"7496:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"b","nameLocation":"7523:1:9","nodeType":"VariableDeclaration","scope":1794,"src":"7515:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"7515:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7495:30:9"},"returnParameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1794,"src":"7549:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1783,"nodeType":"UserDefinedTypeName","pathNode":{"id":1782,"name":"Unsigned","nameLocations":["7549:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"7549:8:9"},"referencedDeclaration":1370,"src":"7549:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"7548:17:9"},"scope":2984,"src":"7483:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1813,"nodeType":"Block","src":"7913:51:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1808,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"7951:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1807,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"7934:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7934:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},{"id":1810,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"7955:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"},{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}],"id":1806,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[1774,1794,1814,2589,2609,2629],"referencedDeclaration":1774,"src":"7930:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Unsigned_$1370_memory_ptr_$_t_struct$_Unsigned_$1370_memory_ptr_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (struct FixedPoint.Unsigned memory,struct FixedPoint.Unsigned memory) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1805,"id":1812,"nodeType":"Return","src":"7923:34:9"}]},"documentation":{"id":1795,"nodeType":"StructuredDocumentation","src":"7623:202:9","text":" @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\n @param a a uint256.\n @param b a FixedPoint.\n @return the difference of `a` and `b`."},"id":1814,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"7839:3:9","nodeType":"FunctionDefinition","parameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1797,"mutability":"mutable","name":"a","nameLocation":"7851:1:9","nodeType":"VariableDeclaration","scope":1814,"src":"7843:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1796,"name":"uint256","nodeType":"ElementaryTypeName","src":"7843:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"b","nameLocation":"7870:1:9","nodeType":"VariableDeclaration","scope":1814,"src":"7854:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1799,"nodeType":"UserDefinedTypeName","pathNode":{"id":1798,"name":"Unsigned","nameLocations":["7854:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"7854:8:9"},"referencedDeclaration":1370,"src":"7854:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"7842:30:9"},"returnParameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1814,"src":"7896:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1803,"nodeType":"UserDefinedTypeName","pathNode":{"id":1802,"name":"Unsigned","nameLocations":["7896:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"7896:8:9"},"referencedDeclaration":1370,"src":"7896:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"7895:17:9"},"scope":2984,"src":"7830:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1838,"nodeType":"Block","src":"8289:559:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":1831,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1821,"src":"8809:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1832,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8811:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"8809:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1828,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"8794:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8796:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"8794:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8805:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"8794:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8794:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1834,"name":"FP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"8823:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8794:46:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1827,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"8785:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8785:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1826,"id":1837,"nodeType":"Return","src":"8778:63:9"}]},"documentation":{"id":1815,"nodeType":"StructuredDocumentation","src":"7970:223:9","text":" @notice Multiplies two `Unsigned`s, reverting on overflow.\n @dev This will \"floor\" the product.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return the product of `a` and `b`."},"id":1839,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"8207:3:9","nodeType":"FunctionDefinition","parameters":{"id":1822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"a","nameLocation":"8227:1:9","nodeType":"VariableDeclaration","scope":1839,"src":"8211:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1817,"nodeType":"UserDefinedTypeName","pathNode":{"id":1816,"name":"Unsigned","nameLocations":["8211:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"8211:8:9"},"referencedDeclaration":1370,"src":"8211:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1821,"mutability":"mutable","name":"b","nameLocation":"8246:1:9","nodeType":"VariableDeclaration","scope":1839,"src":"8230:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1820,"nodeType":"UserDefinedTypeName","pathNode":{"id":1819,"name":"Unsigned","nameLocations":["8230:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"8230:8:9"},"referencedDeclaration":1370,"src":"8230:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"8210:38:9"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1839,"src":"8272:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1824,"nodeType":"UserDefinedTypeName","pathNode":{"id":1823,"name":"Unsigned","nameLocations":["8272:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"8272:8:9"},"referencedDeclaration":1370,"src":"8272:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"8271:17:9"},"scope":2984,"src":"8198:650:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1859,"nodeType":"Block","src":"9184:51:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1855,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"9225:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1852,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"9210:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1853,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9212:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"9210:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9221:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"9210:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9210:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1851,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"9201:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9201:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1850,"id":1858,"nodeType":"Return","src":"9194:34:9"}]},"documentation":{"id":1840,"nodeType":"StructuredDocumentation","src":"8854:242:9","text":" @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\n @dev This will \"floor\" the product.\n @param a a FixedPoint.\n @param b a uint256.\n @return the product of `a` and `b`."},"id":1860,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"9110:3:9","nodeType":"FunctionDefinition","parameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"a","nameLocation":"9130:1:9","nodeType":"VariableDeclaration","scope":1860,"src":"9114:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1842,"nodeType":"UserDefinedTypeName","pathNode":{"id":1841,"name":"Unsigned","nameLocations":["9114:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"9114:8:9"},"referencedDeclaration":1370,"src":"9114:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1845,"mutability":"mutable","name":"b","nameLocation":"9141:1:9","nodeType":"VariableDeclaration","scope":1860,"src":"9133:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1844,"name":"uint256","nodeType":"ElementaryTypeName","src":"9133:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9113:30:9"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1860,"src":"9167:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1848,"nodeType":"UserDefinedTypeName","pathNode":{"id":1847,"name":"Unsigned","nameLocations":["9167:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"9167:8:9"},"referencedDeclaration":1370,"src":"9167:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"9166:17:9"},"scope":2984,"src":"9101:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1912,"nodeType":"Block","src":"9546:304:9","statements":[{"assignments":[1874],"declarations":[{"constant":false,"id":1874,"mutability":"mutable","name":"mulRaw","nameLocation":"9564:6:9","nodeType":"VariableDeclaration","scope":1912,"src":"9556:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1873,"name":"uint256","nodeType":"ElementaryTypeName","src":"9556:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1881,"initialValue":{"arguments":[{"expression":{"id":1878,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"9588:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1879,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9590:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"9588:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"9573:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1876,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9575:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"9573:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9584:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"9573:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9573:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9556:43:9"},{"assignments":[1883],"declarations":[{"constant":false,"id":1883,"mutability":"mutable","name":"mulFloor","nameLocation":"9617:8:9","nodeType":"VariableDeclaration","scope":1912,"src":"9609:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1882,"name":"uint256","nodeType":"ElementaryTypeName","src":"9609:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1887,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1884,"name":"mulRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"9628:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1885,"name":"FP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"9637:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9628:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9609:45:9"},{"assignments":[1889],"declarations":[{"constant":false,"id":1889,"mutability":"mutable","name":"mod","nameLocation":"9672:3:9","nodeType":"VariableDeclaration","scope":1912,"src":"9664:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"9664:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1894,"initialValue":{"arguments":[{"id":1892,"name":"FP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"9689:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1890,"name":"mulRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"9678:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9685:3:9","memberName":"mod","nodeType":"MemberAccess","referencedDeclaration":1211,"src":"9678:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9678:29:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9664:43:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1895,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"9721:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9728:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9721:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1910,"nodeType":"Block","src":"9794:50:9","statements":[{"expression":{"arguments":[{"id":1907,"name":"mulFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"9824:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1906,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"9815:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9815:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1872,"id":1909,"nodeType":"Return","src":"9808:25:9"}]},"id":1911,"nodeType":"IfStatement","src":"9717:127:9","trueBody":{"id":1905,"nodeType":"Block","src":"9731:57:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"31","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9774:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":1899,"name":"mulFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"9761:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9770:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"9761:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9761:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1898,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"9752:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9752:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1872,"id":1904,"nodeType":"Return","src":"9745:32:9"}]}}]},"documentation":{"id":1861,"nodeType":"StructuredDocumentation","src":"9241:205:9","text":" @notice Multiplies two `Unsigned`s and \"ceil's\" the product, reverting on overflow.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return the product of `a` and `b`."},"id":1913,"implemented":true,"kind":"function","modifiers":[],"name":"mulCeil","nameLocation":"9460:7:9","nodeType":"FunctionDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"a","nameLocation":"9484:1:9","nodeType":"VariableDeclaration","scope":1913,"src":"9468:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1863,"nodeType":"UserDefinedTypeName","pathNode":{"id":1862,"name":"Unsigned","nameLocations":["9468:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"9468:8:9"},"referencedDeclaration":1370,"src":"9468:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"b","nameLocation":"9503:1:9","nodeType":"VariableDeclaration","scope":1913,"src":"9487:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1866,"nodeType":"UserDefinedTypeName","pathNode":{"id":1865,"name":"Unsigned","nameLocations":["9487:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"9487:8:9"},"referencedDeclaration":1370,"src":"9487:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"9467:38:9"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1913,"src":"9529:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1870,"nodeType":"UserDefinedTypeName","pathNode":{"id":1869,"name":"Unsigned","nameLocations":["9529:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"9529:8:9"},"referencedDeclaration":1370,"src":"9529:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"9528:17:9"},"scope":2984,"src":"9451:399:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1933,"nodeType":"Block","src":"10175:145:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1929,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"10310:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1926,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"10295:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10297:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"10295:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10306:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"10295:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10295:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1925,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"10286:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10286:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1924,"id":1932,"nodeType":"Return","src":"10279:34:9"}]},"documentation":{"id":1914,"nodeType":"StructuredDocumentation","src":"9856:227:9","text":" @notice Multiplies an `Unsigned` and an unscaled uint256 and \"ceil's\" the product, reverting on overflow.\n @param a a FixedPoint.\n @param b a FixedPoint.\n @return the product of `a` and `b`."},"id":1934,"implemented":true,"kind":"function","modifiers":[],"name":"mulCeil","nameLocation":"10097:7:9","nodeType":"FunctionDefinition","parameters":{"id":1920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"a","nameLocation":"10121:1:9","nodeType":"VariableDeclaration","scope":1934,"src":"10105:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1916,"nodeType":"UserDefinedTypeName","pathNode":{"id":1915,"name":"Unsigned","nameLocations":["10105:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"10105:8:9"},"referencedDeclaration":1370,"src":"10105:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1919,"mutability":"mutable","name":"b","nameLocation":"10132:1:9","nodeType":"VariableDeclaration","scope":1934,"src":"10124:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1918,"name":"uint256","nodeType":"ElementaryTypeName","src":"10124:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10104:30:9"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1934,"src":"10158:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1922,"nodeType":"UserDefinedTypeName","pathNode":{"id":1921,"name":"Unsigned","nameLocations":["10158:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"10158:8:9"},"referencedDeclaration":1370,"src":"10158:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"10157:17:9"},"scope":2984,"src":"10088:232:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1959,"nodeType":"Block","src":"10706:543:9","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":1954,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"11230:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11232:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"11230:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1951,"name":"FP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"11207:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1948,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"11192:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11194:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"11192:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11203:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"11192:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11192:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11226:3:9","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"11192:37:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11192:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1947,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"11183:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11183:59:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1946,"id":1958,"nodeType":"Return","src":"11176:66:9"}]},"documentation":{"id":1935,"nodeType":"StructuredDocumentation","src":"10326:284:9","text":" @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\n @dev This will \"floor\" the quotient.\n @param a a FixedPoint numerator.\n @param b a FixedPoint denominator.\n @return the quotient of `a` divided by `b`."},"id":1960,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"10624:3:9","nodeType":"FunctionDefinition","parameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1938,"mutability":"mutable","name":"a","nameLocation":"10644:1:9","nodeType":"VariableDeclaration","scope":1960,"src":"10628:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1937,"nodeType":"UserDefinedTypeName","pathNode":{"id":1936,"name":"Unsigned","nameLocations":["10628:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"10628:8:9"},"referencedDeclaration":1370,"src":"10628:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1941,"mutability":"mutable","name":"b","nameLocation":"10663:1:9","nodeType":"VariableDeclaration","scope":1960,"src":"10647:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1940,"nodeType":"UserDefinedTypeName","pathNode":{"id":1939,"name":"Unsigned","nameLocations":["10647:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"10647:8:9"},"referencedDeclaration":1370,"src":"10647:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"10627:38:9"},"returnParameters":{"id":1946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1960,"src":"10689:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1944,"nodeType":"UserDefinedTypeName","pathNode":{"id":1943,"name":"Unsigned","nameLocations":["10689:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"10689:8:9"},"referencedDeclaration":1370,"src":"10689:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"10688:17:9"},"scope":2984,"src":"10615:634:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1980,"nodeType":"Block","src":"11630:51:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1976,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"11671:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":1973,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"11656:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":1974,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11658:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"11656:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11667:3:9","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"11656:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11656:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1972,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"11647:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1971,"id":1979,"nodeType":"Return","src":"11640:34:9"}]},"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"11255:287:9","text":" @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\n @dev This will \"floor\" the quotient.\n @param a a FixedPoint numerator.\n @param b a uint256 denominator.\n @return the quotient of `a` divided by `b`."},"id":1981,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"11556:3:9","nodeType":"FunctionDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1964,"mutability":"mutable","name":"a","nameLocation":"11576:1:9","nodeType":"VariableDeclaration","scope":1981,"src":"11560:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1963,"nodeType":"UserDefinedTypeName","pathNode":{"id":1962,"name":"Unsigned","nameLocations":["11560:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"11560:8:9"},"referencedDeclaration":1370,"src":"11560:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"b","nameLocation":"11587:1:9","nodeType":"VariableDeclaration","scope":1981,"src":"11579:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1965,"name":"uint256","nodeType":"ElementaryTypeName","src":"11579:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11559:30:9"},"returnParameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1981,"src":"11613:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1969,"nodeType":"UserDefinedTypeName","pathNode":{"id":1968,"name":"Unsigned","nameLocations":["11613:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"11613:8:9"},"referencedDeclaration":1370,"src":"11613:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"11612:17:9"},"scope":2984,"src":"11547:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2000,"nodeType":"Block","src":"12062:51:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1995,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"12100:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1994,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"12083:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12083:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},{"id":1997,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"12104:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"},{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}],"id":1993,"name":"div","nodeType":"Identifier","overloadedDeclarations":[1960,1981,2001,2800,2821,2841],"referencedDeclaration":1960,"src":"12079:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Unsigned_$1370_memory_ptr_$_t_struct$_Unsigned_$1370_memory_ptr_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (struct FixedPoint.Unsigned memory,struct FixedPoint.Unsigned memory) pure returns (struct FixedPoint.Unsigned memory)"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12079:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":1992,"id":1999,"nodeType":"Return","src":"12072:34:9"}]},"documentation":{"id":1982,"nodeType":"StructuredDocumentation","src":"11687:287:9","text":" @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\n @dev This will \"floor\" the quotient.\n @param a a uint256 numerator.\n @param b a FixedPoint denominator.\n @return the quotient of `a` divided by `b`."},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"11988:3:9","nodeType":"FunctionDefinition","parameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"a","nameLocation":"12000:1:9","nodeType":"VariableDeclaration","scope":2001,"src":"11992:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1983,"name":"uint256","nodeType":"ElementaryTypeName","src":"11992:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1987,"mutability":"mutable","name":"b","nameLocation":"12019:1:9","nodeType":"VariableDeclaration","scope":2001,"src":"12003:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1986,"nodeType":"UserDefinedTypeName","pathNode":{"id":1985,"name":"Unsigned","nameLocations":["12003:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"12003:8:9"},"referencedDeclaration":1370,"src":"12003:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"11991:30:9"},"returnParameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2001,"src":"12045:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":1990,"nodeType":"UserDefinedTypeName","pathNode":{"id":1989,"name":"Unsigned","nameLocations":["12045:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"12045:8:9"},"referencedDeclaration":1370,"src":"12045:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"12044:17:9"},"scope":2984,"src":"11979:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2055,"nodeType":"Block","src":"12485:303:9","statements":[{"assignments":[2015],"declarations":[{"constant":false,"id":2015,"mutability":"mutable","name":"aScaled","nameLocation":"12503:7:9","nodeType":"VariableDeclaration","scope":2055,"src":"12495:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2014,"name":"uint256","nodeType":"ElementaryTypeName","src":"12495:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2021,"initialValue":{"arguments":[{"id":2019,"name":"FP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"12528:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":2016,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"12513:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":2017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12515:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"12513:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12524:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"12513:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12513:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12495:51:9"},{"assignments":[2023],"declarations":[{"constant":false,"id":2023,"mutability":"mutable","name":"divFloor","nameLocation":"12564:8:9","nodeType":"VariableDeclaration","scope":2055,"src":"12556:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"12556:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2029,"initialValue":{"arguments":[{"expression":{"id":2026,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"12587:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":2027,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12589:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"12587:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2024,"name":"aScaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"12575:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12583:3:9","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1196,"src":"12575:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12575:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12556:42:9"},{"assignments":[2031],"declarations":[{"constant":false,"id":2031,"mutability":"mutable","name":"mod","nameLocation":"12616:3:9","nodeType":"VariableDeclaration","scope":2055,"src":"12608:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"12608:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2037,"initialValue":{"arguments":[{"expression":{"id":2034,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"12634:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":2035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12636:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"12634:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2032,"name":"aScaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"12622:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12630:3:9","memberName":"mod","nodeType":"MemberAccess","referencedDeclaration":1211,"src":"12622:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12622:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12608:37:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2038,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"12659:3:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12666:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12659:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2053,"nodeType":"Block","src":"12732:50:9","statements":[{"expression":{"arguments":[{"id":2050,"name":"divFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"12762:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2049,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"12753:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12753:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":2013,"id":2052,"nodeType":"Return","src":"12746:25:9"}]},"id":2054,"nodeType":"IfStatement","src":"12655:127:9","trueBody":{"id":2048,"nodeType":"Block","src":"12669:57:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"31","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12712:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":2042,"name":"divFloor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"12699:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12708:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"12699:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2041,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"12690:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12690:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":2013,"id":2047,"nodeType":"Return","src":"12683:32:9"}]}}]},"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"12119:266:9","text":" @notice Divides one `Unsigned` by an `Unsigned` and \"ceil's\" the quotient, reverting on overflow or division by 0.\n @param a a FixedPoint numerator.\n @param b a FixedPoint denominator.\n @return the quotient of `a` divided by `b`."},"id":2056,"implemented":true,"kind":"function","modifiers":[],"name":"divCeil","nameLocation":"12399:7:9","nodeType":"FunctionDefinition","parameters":{"id":2009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2005,"mutability":"mutable","name":"a","nameLocation":"12423:1:9","nodeType":"VariableDeclaration","scope":2056,"src":"12407:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2004,"nodeType":"UserDefinedTypeName","pathNode":{"id":2003,"name":"Unsigned","nameLocations":["12407:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"12407:8:9"},"referencedDeclaration":1370,"src":"12407:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":2008,"mutability":"mutable","name":"b","nameLocation":"12442:1:9","nodeType":"VariableDeclaration","scope":2056,"src":"12426:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2007,"nodeType":"UserDefinedTypeName","pathNode":{"id":2006,"name":"Unsigned","nameLocations":["12426:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"12426:8:9"},"referencedDeclaration":1370,"src":"12426:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"12406:38:9"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2056,"src":"12468:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2011,"nodeType":"UserDefinedTypeName","pathNode":{"id":2010,"name":"Unsigned","nameLocations":["12468:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"12468:8:9"},"referencedDeclaration":1370,"src":"12468:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"12467:17:9"},"scope":2984,"src":"12390:398:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2075,"nodeType":"Block","src":"13155:363:9","statements":[{"expression":{"arguments":[{"id":2069,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"13488:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},{"arguments":[{"id":2071,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"13508:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2070,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"13491:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"},{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}],"id":2068,"name":"divCeil","nodeType":"Identifier","overloadedDeclarations":[2056,2076],"referencedDeclaration":2056,"src":"13480:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Unsigned_$1370_memory_ptr_$_t_struct$_Unsigned_$1370_memory_ptr_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (struct FixedPoint.Unsigned memory,struct FixedPoint.Unsigned memory) pure returns (struct FixedPoint.Unsigned memory)"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13480:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":2067,"id":2074,"nodeType":"Return","src":"13473:38:9"}]},"documentation":{"id":2057,"nodeType":"StructuredDocumentation","src":"12794:269:9","text":" @notice Divides one `Unsigned` by an unscaled uint256 and \"ceil's\" the quotient, reverting on overflow or division by 0.\n @param a a FixedPoint numerator.\n @param b a uint256 denominator.\n @return the quotient of `a` divided by `b`."},"id":2076,"implemented":true,"kind":"function","modifiers":[],"name":"divCeil","nameLocation":"13077:7:9","nodeType":"FunctionDefinition","parameters":{"id":2063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"a","nameLocation":"13101:1:9","nodeType":"VariableDeclaration","scope":2076,"src":"13085:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2059,"nodeType":"UserDefinedTypeName","pathNode":{"id":2058,"name":"Unsigned","nameLocations":["13085:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"13085:8:9"},"referencedDeclaration":1370,"src":"13085:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":2062,"mutability":"mutable","name":"b","nameLocation":"13112:1:9","nodeType":"VariableDeclaration","scope":2076,"src":"13104:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"13104:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13084:30:9"},"returnParameters":{"id":2067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2076,"src":"13138:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2065,"nodeType":"UserDefinedTypeName","pathNode":{"id":2064,"name":"Unsigned","nameLocations":["13138:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"13138:8:9"},"referencedDeclaration":1370,"src":"13138:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"13137:17:9"},"scope":2984,"src":"13068:450:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2117,"nodeType":"Block","src":"13922:143:9","statements":[{"expression":{"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2088,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"13932:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":2090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13958:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2089,"name":"fromUnscaledUint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"13941:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (uint256) pure returns (struct FixedPoint.Unsigned memory)"}},"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13941:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"src":"13932:28:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":2093,"nodeType":"ExpressionStatement","src":"13932:28:9"},{"body":{"id":2115,"nodeType":"Block","src":"14011:48:9","statements":[{"expression":{"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2108,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"14025:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2110,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"14038:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},{"id":2111,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"14046:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"},{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}],"id":2109,"name":"mul","nodeType":"Identifier","overloadedDeclarations":[1839,1860,2654,2675],"referencedDeclaration":1839,"src":"14034:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Unsigned_$1370_memory_ptr_$_t_struct$_Unsigned_$1370_memory_ptr_$returns$_t_struct$_Unsigned_$1370_memory_ptr_$","typeString":"function (struct FixedPoint.Unsigned memory,struct FixedPoint.Unsigned memory) pure returns (struct FixedPoint.Unsigned memory)"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14034:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"src":"14025:23:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":2114,"nodeType":"ExpressionStatement","src":"14025:23:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2098,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"13990:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2099,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"13994:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13990:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2116,"initializationExpression":{"assignments":[2095],"declarations":[{"constant":false,"id":2095,"mutability":"mutable","name":"i","nameLocation":"13983:1:9","nodeType":"VariableDeclaration","scope":2116,"src":"13975:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2094,"name":"uint256","nodeType":"ElementaryTypeName","src":"13975:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2097,"initialValue":{"hexValue":"30","id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13987:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13975:13:9"},"loopExpression":{"expression":{"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2101,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"13997:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14007:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":2102,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"14001:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14003:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"14001:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14001:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13997:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2107,"nodeType":"ExpressionStatement","src":"13997:12:9"},"nodeType":"ForStatement","src":"13970:89:9"}]},"documentation":{"id":2077,"nodeType":"StructuredDocumentation","src":"13524:303:9","text":" @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\n @dev This will \"floor\" the result.\n @param a a FixedPoint numerator.\n @param b a uint256 denominator.\n @return output is `a` to the power of `b`."},"id":2118,"implemented":true,"kind":"function","modifiers":[],"name":"pow","nameLocation":"13841:3:9","nodeType":"FunctionDefinition","parameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2080,"mutability":"mutable","name":"a","nameLocation":"13861:1:9","nodeType":"VariableDeclaration","scope":2118,"src":"13845:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2079,"nodeType":"UserDefinedTypeName","pathNode":{"id":2078,"name":"Unsigned","nameLocations":["13845:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"13845:8:9"},"referencedDeclaration":1370,"src":"13845:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":2082,"mutability":"mutable","name":"b","nameLocation":"13872:1:9","nodeType":"VariableDeclaration","scope":2118,"src":"13864:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"13864:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13844:30:9"},"returnParameters":{"id":2087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"output","nameLocation":"13914:6:9","nodeType":"VariableDeclaration","scope":2118,"src":"13898:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2085,"nodeType":"UserDefinedTypeName","pathNode":{"id":2084,"name":"Unsigned","nameLocations":["13898:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"13898:8:9"},"referencedDeclaration":1370,"src":"13898:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"13897:24:9"},"scope":2984,"src":"13832:233:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"constant":true,"id":2123,"mutability":"constant","name":"SFP_SCALING_FACTOR","nameLocation":"14457:18:9","nodeType":"VariableDeclaration","scope":2984,"src":"14433:51:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2119,"name":"int256","nodeType":"ElementaryTypeName","src":"14433:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"id":2122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14478:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3138","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14482:2:9","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"src":"14478:6:9","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"}},"visibility":"private"},{"canonicalName":"FixedPoint.Signed","id":2126,"members":[{"constant":false,"id":2125,"mutability":"mutable","name":"rawValue","nameLocation":"14522:8:9","nodeType":"VariableDeclaration","scope":2126,"src":"14515:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2124,"name":"int256","nodeType":"ElementaryTypeName","src":"14515:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Signed","nameLocation":"14498:6:9","nodeType":"StructDefinition","scope":2984,"src":"14491:46:9","visibility":"public"},{"body":{"id":2151,"nodeType":"Block","src":"14620:114:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2136,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2129,"src":"14638:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14640:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"14638:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14652:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14638:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e656761746976652076616c75652070726f7669646564","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14655:25:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_67d4d663a223777b2db72220a0c432830eddb0393ba77b536f13c5166cce6d79","typeString":"literal_string \"Negative value provided\""},"value":"Negative value provided"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67d4d663a223777b2db72220a0c432830eddb0393ba77b536f13c5166cce6d79","typeString":"literal_string \"Negative value provided\""}],"id":2135,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14630:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14630:51:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2142,"nodeType":"ExpressionStatement","src":"14630:51:9"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":2146,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2129,"src":"14715:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14717:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"14715:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14707:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2144,"name":"uint256","nodeType":"ElementaryTypeName","src":"14707:7:9","typeDescriptions":{}}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14707:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2143,"name":"Unsigned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"14698:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Unsigned_$1370_storage_ptr_$","typeString":"type(struct FixedPoint.Unsigned storage pointer)"}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14698:29:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"functionReturnParameters":2134,"id":2150,"nodeType":"Return","src":"14691:36:9"}]},"id":2152,"implemented":true,"kind":"function","modifiers":[],"name":"fromSigned","nameLocation":"14552:10:9","nodeType":"FunctionDefinition","parameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2129,"mutability":"mutable","name":"a","nameLocation":"14577:1:9","nodeType":"VariableDeclaration","scope":2152,"src":"14563:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2128,"nodeType":"UserDefinedTypeName","pathNode":{"id":2127,"name":"Signed","nameLocations":["14563:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"14563:6:9"},"referencedDeclaration":2126,"src":"14563:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"14562:17:9"},"returnParameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2133,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2152,"src":"14603:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2132,"nodeType":"UserDefinedTypeName","pathNode":{"id":2131,"name":"Unsigned","nameLocations":["14603:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"14603:8:9"},"referencedDeclaration":1370,"src":"14603:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"14602:17:9"},"scope":2984,"src":"14543:191:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2184,"nodeType":"Block","src":"14819:130:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2162,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"14837:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":2163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14839:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"14837:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":2168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14864:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2167,"name":"int256","nodeType":"ElementaryTypeName","src":"14864:6:9","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":2166,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14859:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14859:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":2170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14872:3:9","memberName":"max","nodeType":"MemberAccess","src":"14859:16:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14851:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2164,"name":"uint256","nodeType":"ElementaryTypeName","src":"14851:7:9","typeDescriptions":{}}},"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14851:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14837:39:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e7369676e656420746f6f206c61726765","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14878:20:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_691496971f117be8e4dbef07509d13e2786a6857df6bd4e7d50c0d0707e224ae","typeString":"literal_string \"Unsigned too large\""},"value":"Unsigned too large"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_691496971f117be8e4dbef07509d13e2786a6857df6bd4e7d50c0d0707e224ae","typeString":"literal_string \"Unsigned too large\""}],"id":2161,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14829:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14829:70:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2175,"nodeType":"ExpressionStatement","src":"14829:70:9"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":2179,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"14930:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned memory"}},"id":2180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14932:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":1369,"src":"14930:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14923:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2177,"name":"int256","nodeType":"ElementaryTypeName","src":"14923:6:9","typeDescriptions":{}}},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14923:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2176,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"14916:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14916:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2160,"id":2183,"nodeType":"Return","src":"14909:33:9"}]},"id":2185,"implemented":true,"kind":"function","modifiers":[],"name":"fromUnsigned","nameLocation":"14749:12:9","nodeType":"FunctionDefinition","parameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"a","nameLocation":"14778:1:9","nodeType":"VariableDeclaration","scope":2185,"src":"14762:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":2154,"nodeType":"UserDefinedTypeName","pathNode":{"id":2153,"name":"Unsigned","nameLocations":["14762:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"14762:8:9"},"referencedDeclaration":1370,"src":"14762:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"14761:19:9"},"returnParameters":{"id":2160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2185,"src":"14804:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2158,"nodeType":"UserDefinedTypeName","pathNode":{"id":2157,"name":"Signed","nameLocations":["14804:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"14804:6:9"},"referencedDeclaration":2126,"src":"14804:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"14803:15:9"},"scope":2984,"src":"14740:209:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2201,"nodeType":"Block","src":"15260:57:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2197,"name":"SFP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"15290:18:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2195,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"15284:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15286:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"15284:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15284:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2194,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"15277:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15277:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2193,"id":2200,"nodeType":"Return","src":"15270:40:9"}]},"documentation":{"id":2186,"nodeType":"StructuredDocumentation","src":"14955:227:9","text":" @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\n @param a int to convert into a FixedPoint.Signed.\n @return the converted FixedPoint.Signed."},"id":2202,"implemented":true,"kind":"function","modifiers":[],"name":"fromUnscaledInt","nameLocation":"15196:15:9","nodeType":"FunctionDefinition","parameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2188,"mutability":"mutable","name":"a","nameLocation":"15219:1:9","nodeType":"VariableDeclaration","scope":2202,"src":"15212:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2187,"name":"int256","nodeType":"ElementaryTypeName","src":"15212:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"15211:10:9"},"returnParameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2202,"src":"15245:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2191,"nodeType":"UserDefinedTypeName","pathNode":{"id":2190,"name":"Signed","nameLocations":["15245:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"15245:6:9"},"referencedDeclaration":2126,"src":"15245:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"15244:15:9"},"scope":2984,"src":"15187:130:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2221,"nodeType":"Block","src":"15559:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2213,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"15576:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15578:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"15576:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2216,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2208,"src":"15606:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2215,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"15590:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15590:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15609:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"15590:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15576:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2212,"id":2220,"nodeType":"Return","src":"15569:48:9"}]},"documentation":{"id":2203,"nodeType":"StructuredDocumentation","src":"15323:158:9","text":" @notice Whether `a` is equal to `b`.\n @param a a FixedPoint.Signed.\n @param b a int256.\n @return True if equal, or False."},"id":2222,"implemented":true,"kind":"function","modifiers":[],"name":"isEqual","nameLocation":"15495:7:9","nodeType":"FunctionDefinition","parameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"a","nameLocation":"15517:1:9","nodeType":"VariableDeclaration","scope":2222,"src":"15503:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2205,"nodeType":"UserDefinedTypeName","pathNode":{"id":2204,"name":"Signed","nameLocations":["15503:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"15503:6:9"},"referencedDeclaration":2126,"src":"15503:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2208,"mutability":"mutable","name":"b","nameLocation":"15527:1:9","nodeType":"VariableDeclaration","scope":2222,"src":"15520:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2207,"name":"int256","nodeType":"ElementaryTypeName","src":"15520:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"15502:27:9"},"returnParameters":{"id":2212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2222,"src":"15553:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2210,"name":"bool","nodeType":"ElementaryTypeName","src":"15553:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15552:6:9"},"scope":2984,"src":"15486:138:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2240,"nodeType":"Block","src":"15884:48:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2234,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"15901:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15903:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"15901:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2236,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"15915:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15917:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"15915:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"15901:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2233,"id":2239,"nodeType":"Return","src":"15894:31:9"}]},"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"15630:169:9","text":" @notice Whether `a` is equal to `b`.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return True if equal, or False."},"id":2241,"implemented":true,"kind":"function","modifiers":[],"name":"isEqual","nameLocation":"15813:7:9","nodeType":"FunctionDefinition","parameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2226,"mutability":"mutable","name":"a","nameLocation":"15835:1:9","nodeType":"VariableDeclaration","scope":2241,"src":"15821:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2225,"nodeType":"UserDefinedTypeName","pathNode":{"id":2224,"name":"Signed","nameLocations":["15821:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"15821:6:9"},"referencedDeclaration":2126,"src":"15821:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2229,"mutability":"mutable","name":"b","nameLocation":"15852:1:9","nodeType":"VariableDeclaration","scope":2241,"src":"15838:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2228,"nodeType":"UserDefinedTypeName","pathNode":{"id":2227,"name":"Signed","nameLocations":["15838:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"15838:6:9"},"referencedDeclaration":2126,"src":"15838:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"15820:34:9"},"returnParameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2241,"src":"15878:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2231,"name":"bool","nodeType":"ElementaryTypeName","src":"15878:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15877:6:9"},"scope":2984,"src":"15804:128:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2259,"nodeType":"Block","src":"16204:47:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2253,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"16221:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16223:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"16221:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2255,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"16234:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2256,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16236:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"16234:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16221:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2252,"id":2258,"nodeType":"Return","src":"16214:30:9"}]},"documentation":{"id":2242,"nodeType":"StructuredDocumentation","src":"15938:175:9","text":" @notice Whether `a` is greater than `b`.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return True if `a > b`, or False."},"id":2260,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThan","nameLocation":"16127:13:9","nodeType":"FunctionDefinition","parameters":{"id":2249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2245,"mutability":"mutable","name":"a","nameLocation":"16155:1:9","nodeType":"VariableDeclaration","scope":2260,"src":"16141:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2244,"nodeType":"UserDefinedTypeName","pathNode":{"id":2243,"name":"Signed","nameLocations":["16141:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"16141:6:9"},"referencedDeclaration":2126,"src":"16141:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2248,"mutability":"mutable","name":"b","nameLocation":"16172:1:9","nodeType":"VariableDeclaration","scope":2260,"src":"16158:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2247,"nodeType":"UserDefinedTypeName","pathNode":{"id":2246,"name":"Signed","nameLocations":["16158:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"16158:6:9"},"referencedDeclaration":2126,"src":"16158:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"16140:34:9"},"returnParameters":{"id":2252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2260,"src":"16198:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2250,"name":"bool","nodeType":"ElementaryTypeName","src":"16198:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16197:6:9"},"scope":2984,"src":"16118:133:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2279,"nodeType":"Block","src":"16506:64:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2271,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"16523:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16525:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"16523:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"arguments":[{"id":2274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"16552:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2273,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"16536:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16536:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2276,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16555:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"16536:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16523:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2270,"id":2278,"nodeType":"Return","src":"16516:47:9"}]},"documentation":{"id":2261,"nodeType":"StructuredDocumentation","src":"16257:165:9","text":" @notice Whether `a` is greater than `b`.\n @param a a FixedPoint.Signed.\n @param b an int256.\n @return True if `a > b`, or False."},"id":2280,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThan","nameLocation":"16436:13:9","nodeType":"FunctionDefinition","parameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2264,"mutability":"mutable","name":"a","nameLocation":"16464:1:9","nodeType":"VariableDeclaration","scope":2280,"src":"16450:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2263,"nodeType":"UserDefinedTypeName","pathNode":{"id":2262,"name":"Signed","nameLocations":["16450:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"16450:6:9"},"referencedDeclaration":2126,"src":"16450:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2266,"mutability":"mutable","name":"b","nameLocation":"16474:1:9","nodeType":"VariableDeclaration","scope":2280,"src":"16467:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2265,"name":"int256","nodeType":"ElementaryTypeName","src":"16467:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"16449:27:9"},"returnParameters":{"id":2270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2280,"src":"16500:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2268,"name":"bool","nodeType":"ElementaryTypeName","src":"16500:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16499:6:9"},"scope":2984,"src":"16427:143:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2299,"nodeType":"Block","src":"16825:64:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2292,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"16858:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2291,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"16842:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16842:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16861:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"16842:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2295,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"16872:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16874:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"16872:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"16842:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2290,"id":2298,"nodeType":"Return","src":"16835:47:9"}]},"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"16576:165:9","text":" @notice Whether `a` is greater than `b`.\n @param a an int256.\n @param b a FixedPoint.Signed.\n @return True if `a > b`, or False."},"id":2300,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThan","nameLocation":"16755:13:9","nodeType":"FunctionDefinition","parameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2283,"mutability":"mutable","name":"a","nameLocation":"16776:1:9","nodeType":"VariableDeclaration","scope":2300,"src":"16769:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2282,"name":"int256","nodeType":"ElementaryTypeName","src":"16769:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2286,"mutability":"mutable","name":"b","nameLocation":"16793:1:9","nodeType":"VariableDeclaration","scope":2300,"src":"16779:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2285,"nodeType":"UserDefinedTypeName","pathNode":{"id":2284,"name":"Signed","nameLocations":["16779:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"16779:6:9"},"referencedDeclaration":2126,"src":"16779:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"16768:27:9"},"returnParameters":{"id":2290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2300,"src":"16819:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2288,"name":"bool","nodeType":"ElementaryTypeName","src":"16819:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16818:6:9"},"scope":2984,"src":"16746:143:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2318,"nodeType":"Block","src":"17181:48:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2312,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"17198:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17200:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"17198:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":2314,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"17212:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17214:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"17212:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17198:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2311,"id":2317,"nodeType":"Return","src":"17191:31:9"}]},"documentation":{"id":2301,"nodeType":"StructuredDocumentation","src":"16895:188:9","text":" @notice Whether `a` is greater than or equal to `b`.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return True if `a >= b`, or False."},"id":2319,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThanOrEqual","nameLocation":"17097:20:9","nodeType":"FunctionDefinition","parameters":{"id":2308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"a","nameLocation":"17132:1:9","nodeType":"VariableDeclaration","scope":2319,"src":"17118:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2303,"nodeType":"UserDefinedTypeName","pathNode":{"id":2302,"name":"Signed","nameLocations":["17118:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"17118:6:9"},"referencedDeclaration":2126,"src":"17118:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2307,"mutability":"mutable","name":"b","nameLocation":"17149:1:9","nodeType":"VariableDeclaration","scope":2319,"src":"17135:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2306,"nodeType":"UserDefinedTypeName","pathNode":{"id":2305,"name":"Signed","nameLocations":["17135:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"17135:6:9"},"referencedDeclaration":2126,"src":"17135:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"17117:34:9"},"returnParameters":{"id":2311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2310,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2319,"src":"17175:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2309,"name":"bool","nodeType":"ElementaryTypeName","src":"17175:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17174:6:9"},"scope":2984,"src":"17088:141:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2338,"nodeType":"Block","src":"17504:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2330,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"17521:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17523:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"17521:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"arguments":[{"id":2333,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"17551:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2332,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"17535:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17535:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17554:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"17535:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17521:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2329,"id":2337,"nodeType":"Return","src":"17514:48:9"}]},"documentation":{"id":2320,"nodeType":"StructuredDocumentation","src":"17235:178:9","text":" @notice Whether `a` is greater than or equal to `b`.\n @param a a FixedPoint.Signed.\n @param b an int256.\n @return True if `a >= b`, or False."},"id":2339,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThanOrEqual","nameLocation":"17427:20:9","nodeType":"FunctionDefinition","parameters":{"id":2326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"a","nameLocation":"17462:1:9","nodeType":"VariableDeclaration","scope":2339,"src":"17448:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2322,"nodeType":"UserDefinedTypeName","pathNode":{"id":2321,"name":"Signed","nameLocations":["17448:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"17448:6:9"},"referencedDeclaration":2126,"src":"17448:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2325,"mutability":"mutable","name":"b","nameLocation":"17472:1:9","nodeType":"VariableDeclaration","scope":2339,"src":"17465:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2324,"name":"int256","nodeType":"ElementaryTypeName","src":"17465:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17447:27:9"},"returnParameters":{"id":2329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2339,"src":"17498:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2327,"name":"bool","nodeType":"ElementaryTypeName","src":"17498:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17497:6:9"},"scope":2984,"src":"17418:151:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2358,"nodeType":"Block","src":"17844:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2351,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"17877:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2350,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"17861:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17861:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17880:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"17861:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":2354,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"17892:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2355,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17894:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"17892:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17861:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2349,"id":2357,"nodeType":"Return","src":"17854:48:9"}]},"documentation":{"id":2340,"nodeType":"StructuredDocumentation","src":"17575:178:9","text":" @notice Whether `a` is greater than or equal to `b`.\n @param a an int256.\n @param b a FixedPoint.Signed.\n @return True if `a >= b`, or False."},"id":2359,"implemented":true,"kind":"function","modifiers":[],"name":"isGreaterThanOrEqual","nameLocation":"17767:20:9","nodeType":"FunctionDefinition","parameters":{"id":2346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"a","nameLocation":"17795:1:9","nodeType":"VariableDeclaration","scope":2359,"src":"17788:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2341,"name":"int256","nodeType":"ElementaryTypeName","src":"17788:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2345,"mutability":"mutable","name":"b","nameLocation":"17812:1:9","nodeType":"VariableDeclaration","scope":2359,"src":"17798:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2344,"nodeType":"UserDefinedTypeName","pathNode":{"id":2343,"name":"Signed","nameLocations":["17798:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"17798:6:9"},"referencedDeclaration":2126,"src":"17798:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"17787:27:9"},"returnParameters":{"id":2349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2348,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"17838:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2347,"name":"bool","nodeType":"ElementaryTypeName","src":"17838:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17837:6:9"},"scope":2984,"src":"17758:151:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2377,"nodeType":"Block","src":"18175:47:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2371,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"18192:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2372,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18194:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"18192:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2373,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"18205:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18207:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"18205:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18192:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2370,"id":2376,"nodeType":"Return","src":"18185:30:9"}]},"documentation":{"id":2360,"nodeType":"StructuredDocumentation","src":"17915:172:9","text":" @notice Whether `a` is less than `b`.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return True if `a < b`, or False."},"id":2378,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThan","nameLocation":"18101:10:9","nodeType":"FunctionDefinition","parameters":{"id":2367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2363,"mutability":"mutable","name":"a","nameLocation":"18126:1:9","nodeType":"VariableDeclaration","scope":2378,"src":"18112:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2362,"nodeType":"UserDefinedTypeName","pathNode":{"id":2361,"name":"Signed","nameLocations":["18112:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"18112:6:9"},"referencedDeclaration":2126,"src":"18112:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"b","nameLocation":"18143:1:9","nodeType":"VariableDeclaration","scope":2378,"src":"18129:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2365,"nodeType":"UserDefinedTypeName","pathNode":{"id":2364,"name":"Signed","nameLocations":["18129:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"18129:6:9"},"referencedDeclaration":2126,"src":"18129:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"18111:34:9"},"returnParameters":{"id":2370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2378,"src":"18169:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2368,"name":"bool","nodeType":"ElementaryTypeName","src":"18169:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18168:6:9"},"scope":2984,"src":"18092:130:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2397,"nodeType":"Block","src":"18471:64:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2389,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"18488:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2390,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18490:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"18488:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":2392,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"18517:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2391,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"18501:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18501:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18520:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"18501:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18488:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2388,"id":2396,"nodeType":"Return","src":"18481:47:9"}]},"documentation":{"id":2379,"nodeType":"StructuredDocumentation","src":"18228:162:9","text":" @notice Whether `a` is less than `b`.\n @param a a FixedPoint.Signed.\n @param b an int256.\n @return True if `a < b`, or False."},"id":2398,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThan","nameLocation":"18404:10:9","nodeType":"FunctionDefinition","parameters":{"id":2385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"a","nameLocation":"18429:1:9","nodeType":"VariableDeclaration","scope":2398,"src":"18415:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2381,"nodeType":"UserDefinedTypeName","pathNode":{"id":2380,"name":"Signed","nameLocations":["18415:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"18415:6:9"},"referencedDeclaration":2126,"src":"18415:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2384,"mutability":"mutable","name":"b","nameLocation":"18439:1:9","nodeType":"VariableDeclaration","scope":2398,"src":"18432:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2383,"name":"int256","nodeType":"ElementaryTypeName","src":"18432:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18414:27:9"},"returnParameters":{"id":2388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2398,"src":"18465:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2386,"name":"bool","nodeType":"ElementaryTypeName","src":"18465:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18464:6:9"},"scope":2984,"src":"18395:140:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2417,"nodeType":"Block","src":"18784:64:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2410,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2401,"src":"18817:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2409,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"18801:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18801:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2412,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18820:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"18801:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2413,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"18831:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18833:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"18831:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18801:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2408,"id":2416,"nodeType":"Return","src":"18794:47:9"}]},"documentation":{"id":2399,"nodeType":"StructuredDocumentation","src":"18541:162:9","text":" @notice Whether `a` is less than `b`.\n @param a an int256.\n @param b a FixedPoint.Signed.\n @return True if `a < b`, or False."},"id":2418,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThan","nameLocation":"18717:10:9","nodeType":"FunctionDefinition","parameters":{"id":2405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"a","nameLocation":"18735:1:9","nodeType":"VariableDeclaration","scope":2418,"src":"18728:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2400,"name":"int256","nodeType":"ElementaryTypeName","src":"18728:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2404,"mutability":"mutable","name":"b","nameLocation":"18752:1:9","nodeType":"VariableDeclaration","scope":2418,"src":"18738:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2403,"nodeType":"UserDefinedTypeName","pathNode":{"id":2402,"name":"Signed","nameLocations":["18738:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"18738:6:9"},"referencedDeclaration":2126,"src":"18738:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"18727:27:9"},"returnParameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2418,"src":"18778:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2406,"name":"bool","nodeType":"ElementaryTypeName","src":"18778:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18777:6:9"},"scope":2984,"src":"18708:140:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2436,"nodeType":"Block","src":"19134:48:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2430,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2422,"src":"19151:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19153:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"19151:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2432,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"19165:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2433,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19167:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"19165:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19151:24:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2429,"id":2435,"nodeType":"Return","src":"19144:31:9"}]},"documentation":{"id":2419,"nodeType":"StructuredDocumentation","src":"18854:185:9","text":" @notice Whether `a` is less than or equal to `b`.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return True if `a <= b`, or False."},"id":2437,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThanOrEqual","nameLocation":"19053:17:9","nodeType":"FunctionDefinition","parameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2422,"mutability":"mutable","name":"a","nameLocation":"19085:1:9","nodeType":"VariableDeclaration","scope":2437,"src":"19071:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2421,"nodeType":"UserDefinedTypeName","pathNode":{"id":2420,"name":"Signed","nameLocations":["19071:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"19071:6:9"},"referencedDeclaration":2126,"src":"19071:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2425,"mutability":"mutable","name":"b","nameLocation":"19102:1:9","nodeType":"VariableDeclaration","scope":2437,"src":"19088:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2424,"nodeType":"UserDefinedTypeName","pathNode":{"id":2423,"name":"Signed","nameLocations":["19088:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"19088:6:9"},"referencedDeclaration":2126,"src":"19088:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"19070:34:9"},"returnParameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2437,"src":"19128:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2427,"name":"bool","nodeType":"ElementaryTypeName","src":"19128:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19127:6:9"},"scope":2984,"src":"19044:138:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2456,"nodeType":"Block","src":"19451:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2448,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"19468:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19470:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"19468:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":2451,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"19498:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2450,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"19482:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19482:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19501:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"19482:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19468:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2447,"id":2455,"nodeType":"Return","src":"19461:48:9"}]},"documentation":{"id":2438,"nodeType":"StructuredDocumentation","src":"19188:175:9","text":" @notice Whether `a` is less than or equal to `b`.\n @param a a FixedPoint.Signed.\n @param b an int256.\n @return True if `a <= b`, or False."},"id":2457,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThanOrEqual","nameLocation":"19377:17:9","nodeType":"FunctionDefinition","parameters":{"id":2444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"a","nameLocation":"19409:1:9","nodeType":"VariableDeclaration","scope":2457,"src":"19395:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2440,"nodeType":"UserDefinedTypeName","pathNode":{"id":2439,"name":"Signed","nameLocations":["19395:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"19395:6:9"},"referencedDeclaration":2126,"src":"19395:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2443,"mutability":"mutable","name":"b","nameLocation":"19419:1:9","nodeType":"VariableDeclaration","scope":2457,"src":"19412:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2442,"name":"int256","nodeType":"ElementaryTypeName","src":"19412:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19394:27:9"},"returnParameters":{"id":2447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"19445:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2445,"name":"bool","nodeType":"ElementaryTypeName","src":"19445:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19444:6:9"},"scope":2984,"src":"19368:148:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2476,"nodeType":"Block","src":"19785:65:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2469,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"19818:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2468,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"19802:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19802:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2471,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19821:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"19802:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2472,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"19833:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19835:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"19833:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19802:41:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2467,"id":2475,"nodeType":"Return","src":"19795:48:9"}]},"documentation":{"id":2458,"nodeType":"StructuredDocumentation","src":"19522:175:9","text":" @notice Whether `a` is less than or equal to `b`.\n @param a an int256.\n @param b a FixedPoint.Signed.\n @return True if `a <= b`, or False."},"id":2477,"implemented":true,"kind":"function","modifiers":[],"name":"isLessThanOrEqual","nameLocation":"19711:17:9","nodeType":"FunctionDefinition","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"mutability":"mutable","name":"a","nameLocation":"19736:1:9","nodeType":"VariableDeclaration","scope":2477,"src":"19729:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2459,"name":"int256","nodeType":"ElementaryTypeName","src":"19729:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"b","nameLocation":"19753:1:9","nodeType":"VariableDeclaration","scope":2477,"src":"19739:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2462,"nodeType":"UserDefinedTypeName","pathNode":{"id":2461,"name":"Signed","nameLocations":["19739:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"19739:6:9"},"referencedDeclaration":2126,"src":"19739:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"19728:27:9"},"returnParameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2477,"src":"19779:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2465,"name":"bool","nodeType":"ElementaryTypeName","src":"19779:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"19778:6:9"},"scope":2984,"src":"19702:148:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2499,"nodeType":"Block","src":"20117:55:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2490,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"20134:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20136:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"20134:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2492,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"20147:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2493,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20149:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"20147:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20134:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2496,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"20164:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20134:31:9","trueExpression":{"id":2495,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"20160:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2489,"id":2498,"nodeType":"Return","src":"20127:38:9"}]},"documentation":{"id":2478,"nodeType":"StructuredDocumentation","src":"19856:171:9","text":" @notice The minimum of `a` and `b`.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return the minimum of `a` and `b`."},"id":2500,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"20041:3:9","nodeType":"FunctionDefinition","parameters":{"id":2485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"a","nameLocation":"20059:1:9","nodeType":"VariableDeclaration","scope":2500,"src":"20045:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2480,"nodeType":"UserDefinedTypeName","pathNode":{"id":2479,"name":"Signed","nameLocations":["20045:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20045:6:9"},"referencedDeclaration":2126,"src":"20045:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2484,"mutability":"mutable","name":"b","nameLocation":"20076:1:9","nodeType":"VariableDeclaration","scope":2500,"src":"20062:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2483,"nodeType":"UserDefinedTypeName","pathNode":{"id":2482,"name":"Signed","nameLocations":["20062:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20062:6:9"},"referencedDeclaration":2126,"src":"20062:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"20044:34:9"},"returnParameters":{"id":2489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2500,"src":"20102:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2487,"nodeType":"UserDefinedTypeName","pathNode":{"id":2486,"name":"Signed","nameLocations":["20102:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20102:6:9"},"referencedDeclaration":2126,"src":"20102:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"20101:15:9"},"scope":2984,"src":"20032:140:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2522,"nodeType":"Block","src":"20439:55:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2513,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"20456:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20458:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"20456:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2515,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2507,"src":"20469:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2516,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20471:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"20469:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20456:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2519,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2507,"src":"20486:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"20456:31:9","trueExpression":{"id":2518,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"20482:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2512,"id":2521,"nodeType":"Return","src":"20449:38:9"}]},"documentation":{"id":2501,"nodeType":"StructuredDocumentation","src":"20178:171:9","text":" @notice The maximum of `a` and `b`.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return the maximum of `a` and `b`."},"id":2523,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"20363:3:9","nodeType":"FunctionDefinition","parameters":{"id":2508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2504,"mutability":"mutable","name":"a","nameLocation":"20381:1:9","nodeType":"VariableDeclaration","scope":2523,"src":"20367:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2503,"nodeType":"UserDefinedTypeName","pathNode":{"id":2502,"name":"Signed","nameLocations":["20367:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20367:6:9"},"referencedDeclaration":2126,"src":"20367:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2507,"mutability":"mutable","name":"b","nameLocation":"20398:1:9","nodeType":"VariableDeclaration","scope":2523,"src":"20384:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2506,"nodeType":"UserDefinedTypeName","pathNode":{"id":2505,"name":"Signed","nameLocations":["20384:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20384:6:9"},"referencedDeclaration":2126,"src":"20384:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"20366:34:9"},"returnParameters":{"id":2512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2523,"src":"20424:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2510,"nodeType":"UserDefinedTypeName","pathNode":{"id":2509,"name":"Signed","nameLocations":["20424:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20424:6:9"},"referencedDeclaration":2126,"src":"20424:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"20423:15:9"},"scope":2984,"src":"20354:140:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2545,"nodeType":"Block","src":"20772:58:9","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":2540,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"20811:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2541,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20813:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"20811:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2537,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"20796:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2538,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20798:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"20796:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20807:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1350,"src":"20796:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20796:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2536,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"20789:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20789:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2535,"id":2544,"nodeType":"Return","src":"20782:41:9"}]},"documentation":{"id":2524,"nodeType":"StructuredDocumentation","src":"20500:182:9","text":" @notice Adds two `Signed`s, reverting on overflow.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return the sum of `a` and `b`."},"id":2546,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"20696:3:9","nodeType":"FunctionDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"mutability":"mutable","name":"a","nameLocation":"20714:1:9","nodeType":"VariableDeclaration","scope":2546,"src":"20700:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2526,"nodeType":"UserDefinedTypeName","pathNode":{"id":2525,"name":"Signed","nameLocations":["20700:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20700:6:9"},"referencedDeclaration":2126,"src":"20700:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2530,"mutability":"mutable","name":"b","nameLocation":"20731:1:9","nodeType":"VariableDeclaration","scope":2546,"src":"20717:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2529,"nodeType":"UserDefinedTypeName","pathNode":{"id":2528,"name":"Signed","nameLocations":["20717:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20717:6:9"},"referencedDeclaration":2126,"src":"20717:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"20699:34:9"},"returnParameters":{"id":2535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2534,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2546,"src":"20757:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2533,"nodeType":"UserDefinedTypeName","pathNode":{"id":2532,"name":"Signed","nameLocations":["20757:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"20757:6:9"},"referencedDeclaration":2126,"src":"20757:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"20756:15:9"},"scope":2984,"src":"20687:143:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2565,"nodeType":"Block","src":"21108:50:9","statements":[{"expression":{"arguments":[{"id":2559,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"21129:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"arguments":[{"id":2561,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"21148:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2560,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"21132:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21132:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}],"id":2558,"name":"add","nodeType":"Identifier","overloadedDeclarations":[1731,1751,2546,2566],"referencedDeclaration":2546,"src":"21125:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_struct$_Signed_$2126_memory_ptr_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (struct FixedPoint.Signed memory,struct FixedPoint.Signed memory) pure returns (struct FixedPoint.Signed memory)"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21125:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2557,"id":2564,"nodeType":"Return","src":"21118:33:9"}]},"documentation":{"id":2547,"nodeType":"StructuredDocumentation","src":"20836:189:9","text":" @notice Adds an `Signed` to an unscaled int, reverting on overflow.\n @param a a FixedPoint.Signed.\n @param b an int256.\n @return the sum of `a` and `b`."},"id":2566,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"21039:3:9","nodeType":"FunctionDefinition","parameters":{"id":2553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2550,"mutability":"mutable","name":"a","nameLocation":"21057:1:9","nodeType":"VariableDeclaration","scope":2566,"src":"21043:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2549,"nodeType":"UserDefinedTypeName","pathNode":{"id":2548,"name":"Signed","nameLocations":["21043:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"21043:6:9"},"referencedDeclaration":2126,"src":"21043:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2552,"mutability":"mutable","name":"b","nameLocation":"21067:1:9","nodeType":"VariableDeclaration","scope":2566,"src":"21060:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2551,"name":"int256","nodeType":"ElementaryTypeName","src":"21060:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21042:27:9"},"returnParameters":{"id":2557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2566,"src":"21093:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2555,"nodeType":"UserDefinedTypeName","pathNode":{"id":2554,"name":"Signed","nameLocations":["21093:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"21093:6:9"},"referencedDeclaration":2126,"src":"21093:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"21092:15:9"},"scope":2984,"src":"21030:128:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2588,"nodeType":"Block","src":"21448:58:9","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":2583,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"21487:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21489:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"21487:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2580,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"21472:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2581,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21474:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"21472:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21483:3:9","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1335,"src":"21472:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21472:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2579,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"21465:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21465:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2578,"id":2587,"nodeType":"Return","src":"21458:41:9"}]},"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"21164:194:9","text":" @notice Subtracts two `Signed`s, reverting on overflow.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return the difference of `a` and `b`."},"id":2589,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"21372:3:9","nodeType":"FunctionDefinition","parameters":{"id":2574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2570,"mutability":"mutable","name":"a","nameLocation":"21390:1:9","nodeType":"VariableDeclaration","scope":2589,"src":"21376:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2569,"nodeType":"UserDefinedTypeName","pathNode":{"id":2568,"name":"Signed","nameLocations":["21376:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"21376:6:9"},"referencedDeclaration":2126,"src":"21376:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2573,"mutability":"mutable","name":"b","nameLocation":"21407:1:9","nodeType":"VariableDeclaration","scope":2589,"src":"21393:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2572,"nodeType":"UserDefinedTypeName","pathNode":{"id":2571,"name":"Signed","nameLocations":["21393:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"21393:6:9"},"referencedDeclaration":2126,"src":"21393:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"21375:34:9"},"returnParameters":{"id":2578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2589,"src":"21433:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2576,"nodeType":"UserDefinedTypeName","pathNode":{"id":2575,"name":"Signed","nameLocations":["21433:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"21433:6:9"},"referencedDeclaration":2126,"src":"21433:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"21432:15:9"},"scope":2984,"src":"21363:143:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2608,"nodeType":"Block","src":"21801:50:9","statements":[{"expression":{"arguments":[{"id":2602,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"21822:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"arguments":[{"id":2604,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"21841:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2603,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"21825:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21825:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}],"id":2601,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[1774,1794,1814,2589,2609,2629],"referencedDeclaration":2589,"src":"21818:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_struct$_Signed_$2126_memory_ptr_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (struct FixedPoint.Signed memory,struct FixedPoint.Signed memory) pure returns (struct FixedPoint.Signed memory)"}},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21818:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2600,"id":2607,"nodeType":"Return","src":"21811:33:9"}]},"documentation":{"id":2590,"nodeType":"StructuredDocumentation","src":"21512:206:9","text":" @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\n @param a a FixedPoint.Signed.\n @param b an int256.\n @return the difference of `a` and `b`."},"id":2609,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"21732:3:9","nodeType":"FunctionDefinition","parameters":{"id":2596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"a","nameLocation":"21750:1:9","nodeType":"VariableDeclaration","scope":2609,"src":"21736:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2592,"nodeType":"UserDefinedTypeName","pathNode":{"id":2591,"name":"Signed","nameLocations":["21736:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"21736:6:9"},"referencedDeclaration":2126,"src":"21736:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"b","nameLocation":"21760:1:9","nodeType":"VariableDeclaration","scope":2609,"src":"21753:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2594,"name":"int256","nodeType":"ElementaryTypeName","src":"21753:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21735:27:9"},"returnParameters":{"id":2600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2609,"src":"21786:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2598,"nodeType":"UserDefinedTypeName","pathNode":{"id":2597,"name":"Signed","nameLocations":["21786:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"21786:6:9"},"referencedDeclaration":2126,"src":"21786:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"21785:15:9"},"scope":2984,"src":"21723:128:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2628,"nodeType":"Block","src":"22146:50:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2623,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2612,"src":"22183:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2622,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"22167:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22167:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"id":2625,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"22187:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}],"id":2621,"name":"sub","nodeType":"Identifier","overloadedDeclarations":[1774,1794,1814,2589,2609,2629],"referencedDeclaration":2589,"src":"22163:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_struct$_Signed_$2126_memory_ptr_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (struct FixedPoint.Signed memory,struct FixedPoint.Signed memory) pure returns (struct FixedPoint.Signed memory)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22163:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2620,"id":2627,"nodeType":"Return","src":"22156:33:9"}]},"documentation":{"id":2610,"nodeType":"StructuredDocumentation","src":"21857:206:9","text":" @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\n @param a an int256.\n @param b a FixedPoint.Signed.\n @return the difference of `a` and `b`."},"id":2629,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"22077:3:9","nodeType":"FunctionDefinition","parameters":{"id":2616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2612,"mutability":"mutable","name":"a","nameLocation":"22088:1:9","nodeType":"VariableDeclaration","scope":2629,"src":"22081:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2611,"name":"int256","nodeType":"ElementaryTypeName","src":"22081:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2615,"mutability":"mutable","name":"b","nameLocation":"22105:1:9","nodeType":"VariableDeclaration","scope":2629,"src":"22091:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2614,"nodeType":"UserDefinedTypeName","pathNode":{"id":2613,"name":"Signed","nameLocations":["22091:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"22091:6:9"},"referencedDeclaration":2126,"src":"22091:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"22080:27:9"},"returnParameters":{"id":2620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2629,"src":"22131:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2618,"nodeType":"UserDefinedTypeName","pathNode":{"id":2617,"name":"Signed","nameLocations":["22131:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"22131:6:9"},"referencedDeclaration":2126,"src":"22131:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"22130:15:9"},"scope":2984,"src":"22068:128:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2653,"nodeType":"Block","src":"22527:559:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":2646,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"23046:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2647,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23048:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"23046:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2643,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"23031:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23033:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"23031:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23042:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"23031:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23031:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2649,"name":"SFP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"23060:18:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23031:47:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2642,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"23024:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23024:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2641,"id":2652,"nodeType":"Return","src":"23017:62:9"}]},"documentation":{"id":2630,"nodeType":"StructuredDocumentation","src":"22202:235:9","text":" @notice Multiplies two `Signed`s, reverting on overflow.\n @dev This will \"floor\" the product.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return the product of `a` and `b`."},"id":2654,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"22451:3:9","nodeType":"FunctionDefinition","parameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2633,"mutability":"mutable","name":"a","nameLocation":"22469:1:9","nodeType":"VariableDeclaration","scope":2654,"src":"22455:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2632,"nodeType":"UserDefinedTypeName","pathNode":{"id":2631,"name":"Signed","nameLocations":["22455:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"22455:6:9"},"referencedDeclaration":2126,"src":"22455:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2636,"mutability":"mutable","name":"b","nameLocation":"22486:1:9","nodeType":"VariableDeclaration","scope":2654,"src":"22472:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2635,"nodeType":"UserDefinedTypeName","pathNode":{"id":2634,"name":"Signed","nameLocations":["22472:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"22472:6:9"},"referencedDeclaration":2126,"src":"22472:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"22454:34:9"},"returnParameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2654,"src":"22512:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2639,"nodeType":"UserDefinedTypeName","pathNode":{"id":2638,"name":"Signed","nameLocations":["22512:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"22512:6:9"},"referencedDeclaration":2126,"src":"22512:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"22511:15:9"},"scope":2984,"src":"22442:644:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2674,"nodeType":"Block","src":"23421:49:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2670,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"23460:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2667,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2658,"src":"23445:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23447:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"23445:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23456:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"23445:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23445:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2666,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"23438:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23438:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2665,"id":2673,"nodeType":"Return","src":"23431:32:9"}]},"documentation":{"id":2655,"nodeType":"StructuredDocumentation","src":"23092:246:9","text":" @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\n @dev This will \"floor\" the product.\n @param a a FixedPoint.Signed.\n @param b an int256.\n @return the product of `a` and `b`."},"id":2675,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"23352:3:9","nodeType":"FunctionDefinition","parameters":{"id":2661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2658,"mutability":"mutable","name":"a","nameLocation":"23370:1:9","nodeType":"VariableDeclaration","scope":2675,"src":"23356:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2657,"nodeType":"UserDefinedTypeName","pathNode":{"id":2656,"name":"Signed","nameLocations":["23356:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"23356:6:9"},"referencedDeclaration":2126,"src":"23356:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2660,"mutability":"mutable","name":"b","nameLocation":"23380:1:9","nodeType":"VariableDeclaration","scope":2675,"src":"23373:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2659,"name":"int256","nodeType":"ElementaryTypeName","src":"23373:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23355:27:9"},"returnParameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2675,"src":"23406:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2663,"nodeType":"UserDefinedTypeName","pathNode":{"id":2662,"name":"Signed","nameLocations":["23406:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"23406:6:9"},"referencedDeclaration":2126,"src":"23406:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"23405:15:9"},"scope":2984,"src":"23343:127:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2752,"nodeType":"Block","src":"23795:537:9","statements":[{"assignments":[2689],"declarations":[{"constant":false,"id":2689,"mutability":"mutable","name":"mulRaw","nameLocation":"23812:6:9","nodeType":"VariableDeclaration","scope":2752,"src":"23805:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2688,"name":"int256","nodeType":"ElementaryTypeName","src":"23805:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2696,"initialValue":{"arguments":[{"expression":{"id":2693,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"23836:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2694,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23838:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"23836:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2690,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"23821:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2691,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23823:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"23821:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23832:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"23821:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23821:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"23805:42:9"},{"assignments":[2698],"declarations":[{"constant":false,"id":2698,"mutability":"mutable","name":"mulTowardsZero","nameLocation":"23864:14:9","nodeType":"VariableDeclaration","scope":2752,"src":"23857:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2697,"name":"int256","nodeType":"ElementaryTypeName","src":"23857:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2702,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2699,"name":"mulRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"23881:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2700,"name":"SFP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"23890:18:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23881:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"23857:51:9"},{"assignments":[2704],"declarations":[{"constant":false,"id":2704,"mutability":"mutable","name":"mod","nameLocation":"23990:3:9","nodeType":"VariableDeclaration","scope":2752,"src":"23983:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2703,"name":"int256","nodeType":"ElementaryTypeName","src":"23983:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2708,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2705,"name":"mulRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"23996:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2706,"name":"SFP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"24005:18:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23996:27:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"23983:40:9"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2709,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"24037:3:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24044:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24037:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2750,"nodeType":"Block","src":"24272:54:9","statements":[{"expression":{"arguments":[{"id":2747,"name":"mulTowardsZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"24300:14:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2746,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"24293:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24293:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2687,"id":2749,"nodeType":"Return","src":"24286:29:9"}]},"id":2751,"nodeType":"IfStatement","src":"24033:293:9","trueBody":{"id":2745,"nodeType":"Block","src":"24047:219:9","statements":[{"assignments":[2713],"declarations":[{"constant":false,"id":2713,"mutability":"mutable","name":"isResultPositive","nameLocation":"24066:16:9","nodeType":"VariableDeclaration","scope":2745,"src":"24061:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2712,"name":"bool","nodeType":"ElementaryTypeName","src":"24061:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2723,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2715,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"24096:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"hexValue":"30","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24099:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2714,"name":"isLessThan","nodeType":"Identifier","overloadedDeclarations":[1563,1583,1603,2378,2398,2418],"referencedDeclaration":2398,"src":"24085:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_int256_$returns$_t_bool_$","typeString":"function (struct FixedPoint.Signed memory,int256) pure returns (bool)"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24085:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2719,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"24116:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"hexValue":"30","id":2720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24119:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2718,"name":"isLessThan","nodeType":"Identifier","overloadedDeclarations":[1563,1583,1603,2378,2398,2418],"referencedDeclaration":2398,"src":"24105:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_int256_$returns$_t_bool_$","typeString":"function (struct FixedPoint.Signed memory,int256) pure returns (bool)"}},"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24105:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24085:36:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"24061:60:9"},{"assignments":[2725],"declarations":[{"constant":false,"id":2725,"mutability":"mutable","name":"valueToAdd","nameLocation":"24142:10:9","nodeType":"VariableDeclaration","scope":2745,"src":"24135:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2724,"name":"int256","nodeType":"ElementaryTypeName","src":"24135:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2737,"initialValue":{"condition":{"id":2726,"name":"isResultPositive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"24155:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"24193:2:9","subExpression":{"hexValue":"31","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24194:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":2732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24186:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2731,"name":"int256","nodeType":"ElementaryTypeName","src":"24186:6:9","typeDescriptions":{}}},"id":2735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24186:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"24155:41:9","trueExpression":{"arguments":[{"hexValue":"31","id":2729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24181:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24174:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2727,"name":"int256","nodeType":"ElementaryTypeName","src":"24174:6:9","typeDescriptions":{}}},"id":2730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24174:9:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"24135:61:9"},{"expression":{"arguments":[{"arguments":[{"id":2741,"name":"valueToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"24243:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2739,"name":"mulTowardsZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"24224:14:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24239:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1350,"src":"24224:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24224:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2738,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"24217:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24217:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2687,"id":2744,"nodeType":"Return","src":"24210:45:9"}]}}]},"documentation":{"id":2676,"nodeType":"StructuredDocumentation","src":"23476:217:9","text":" @notice Multiplies two `Signed`s and \"ceil's\" the product, reverting on overflow.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return the product of `a` and `b`."},"id":2753,"implemented":true,"kind":"function","modifiers":[],"name":"mulAwayFromZero","nameLocation":"23707:15:9","nodeType":"FunctionDefinition","parameters":{"id":2683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2679,"mutability":"mutable","name":"a","nameLocation":"23737:1:9","nodeType":"VariableDeclaration","scope":2753,"src":"23723:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2678,"nodeType":"UserDefinedTypeName","pathNode":{"id":2677,"name":"Signed","nameLocations":["23723:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"23723:6:9"},"referencedDeclaration":2126,"src":"23723:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2682,"mutability":"mutable","name":"b","nameLocation":"23754:1:9","nodeType":"VariableDeclaration","scope":2753,"src":"23740:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2681,"nodeType":"UserDefinedTypeName","pathNode":{"id":2680,"name":"Signed","nameLocations":["23740:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"23740:6:9"},"referencedDeclaration":2126,"src":"23740:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"23722:34:9"},"returnParameters":{"id":2687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2686,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2753,"src":"23780:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2685,"nodeType":"UserDefinedTypeName","pathNode":{"id":2684,"name":"Signed","nameLocations":["23780:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"23780:6:9"},"referencedDeclaration":2126,"src":"23780:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"23779:15:9"},"scope":2984,"src":"23698:634:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2773,"nodeType":"Block","src":"24671:142:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2769,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"24803:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2766,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"24788:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2767,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24790:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"24788:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24799:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"24788:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24788:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2765,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"24781:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24781:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2764,"id":2772,"nodeType":"Return","src":"24774:32:9"}]},"documentation":{"id":2754,"nodeType":"StructuredDocumentation","src":"24338:238:9","text":" @notice Multiplies an `Signed` and an unscaled int256 and \"ceil's\" the product, reverting on overflow.\n @param a a FixedPoint.Signed.\n @param b a FixedPoint.Signed.\n @return the product of `a` and `b`."},"id":2774,"implemented":true,"kind":"function","modifiers":[],"name":"mulAwayFromZero","nameLocation":"24590:15:9","nodeType":"FunctionDefinition","parameters":{"id":2760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2757,"mutability":"mutable","name":"a","nameLocation":"24620:1:9","nodeType":"VariableDeclaration","scope":2774,"src":"24606:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2756,"nodeType":"UserDefinedTypeName","pathNode":{"id":2755,"name":"Signed","nameLocations":["24606:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"24606:6:9"},"referencedDeclaration":2126,"src":"24606:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2759,"mutability":"mutable","name":"b","nameLocation":"24630:1:9","nodeType":"VariableDeclaration","scope":2774,"src":"24623:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2758,"name":"int256","nodeType":"ElementaryTypeName","src":"24623:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24605:27:9"},"returnParameters":{"id":2764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2774,"src":"24656:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2762,"nodeType":"UserDefinedTypeName","pathNode":{"id":2761,"name":"Signed","nameLocations":["24656:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"24656:6:9"},"referencedDeclaration":2126,"src":"24656:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"24655:15:9"},"scope":2984,"src":"24581:232:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2799,"nodeType":"Block","src":"25189:542:9","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":2794,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"25712:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2795,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25714:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"25712:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"arguments":[{"id":2791,"name":"SFP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"25688:18:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2788,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2778,"src":"25673:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2789,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25675:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"25673:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25684:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"25673:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25673:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25708:3:9","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"25673:38:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25673:50:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2787,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"25666:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25666:58:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2786,"id":2798,"nodeType":"Return","src":"25659:65:9"}]},"documentation":{"id":2775,"nodeType":"StructuredDocumentation","src":"24819:280:9","text":" @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\n @dev This will \"floor\" the quotient.\n @param a a FixedPoint numerator.\n @param b a FixedPoint denominator.\n @return the quotient of `a` divided by `b`."},"id":2800,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"25113:3:9","nodeType":"FunctionDefinition","parameters":{"id":2782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2778,"mutability":"mutable","name":"a","nameLocation":"25131:1:9","nodeType":"VariableDeclaration","scope":2800,"src":"25117:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2777,"nodeType":"UserDefinedTypeName","pathNode":{"id":2776,"name":"Signed","nameLocations":["25117:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"25117:6:9"},"referencedDeclaration":2126,"src":"25117:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2781,"mutability":"mutable","name":"b","nameLocation":"25148:1:9","nodeType":"VariableDeclaration","scope":2800,"src":"25134:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2780,"nodeType":"UserDefinedTypeName","pathNode":{"id":2779,"name":"Signed","nameLocations":["25134:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"25134:6:9"},"referencedDeclaration":2126,"src":"25134:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"25116:34:9"},"returnParameters":{"id":2786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2800,"src":"25174:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2784,"nodeType":"UserDefinedTypeName","pathNode":{"id":2783,"name":"Signed","nameLocations":["25174:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"25174:6:9"},"referencedDeclaration":2126,"src":"25174:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"25173:15:9"},"scope":2984,"src":"25104:627:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2820,"nodeType":"Block","src":"26104:49:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2816,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"26143:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2813,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"26128:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2814,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26130:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"26128:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26139:3:9","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"26128:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26128:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2812,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"26121:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26121:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2811,"id":2819,"nodeType":"Return","src":"26114:32:9"}]},"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"25737:284:9","text":" @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\n @dev This will \"floor\" the quotient.\n @param a a FixedPoint numerator.\n @param b an int256 denominator.\n @return the quotient of `a` divided by `b`."},"id":2821,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"26035:3:9","nodeType":"FunctionDefinition","parameters":{"id":2807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2804,"mutability":"mutable","name":"a","nameLocation":"26053:1:9","nodeType":"VariableDeclaration","scope":2821,"src":"26039:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2803,"nodeType":"UserDefinedTypeName","pathNode":{"id":2802,"name":"Signed","nameLocations":["26039:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"26039:6:9"},"referencedDeclaration":2126,"src":"26039:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2806,"mutability":"mutable","name":"b","nameLocation":"26063:1:9","nodeType":"VariableDeclaration","scope":2821,"src":"26056:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2805,"name":"int256","nodeType":"ElementaryTypeName","src":"26056:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26038:27:9"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2821,"src":"26089:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2809,"nodeType":"UserDefinedTypeName","pathNode":{"id":2808,"name":"Signed","nameLocations":["26089:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"26089:6:9"},"referencedDeclaration":2126,"src":"26089:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"26088:15:9"},"scope":2984,"src":"26026:127:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2840,"nodeType":"Block","src":"26526:50:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":2835,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"26563:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2834,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"26547:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26547:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"id":2837,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"26567:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}],"id":2833,"name":"div","nodeType":"Identifier","overloadedDeclarations":[1960,1981,2001,2800,2821,2841],"referencedDeclaration":2800,"src":"26543:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_struct$_Signed_$2126_memory_ptr_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (struct FixedPoint.Signed memory,struct FixedPoint.Signed memory) pure returns (struct FixedPoint.Signed memory)"}},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26543:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2832,"id":2839,"nodeType":"Return","src":"26536:33:9"}]},"documentation":{"id":2822,"nodeType":"StructuredDocumentation","src":"26159:284:9","text":" @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\n @dev This will \"floor\" the quotient.\n @param a an int256 numerator.\n @param b a FixedPoint denominator.\n @return the quotient of `a` divided by `b`."},"id":2841,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"26457:3:9","nodeType":"FunctionDefinition","parameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2824,"mutability":"mutable","name":"a","nameLocation":"26468:1:9","nodeType":"VariableDeclaration","scope":2841,"src":"26461:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2823,"name":"int256","nodeType":"ElementaryTypeName","src":"26461:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2827,"mutability":"mutable","name":"b","nameLocation":"26485:1:9","nodeType":"VariableDeclaration","scope":2841,"src":"26471:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2826,"nodeType":"UserDefinedTypeName","pathNode":{"id":2825,"name":"Signed","nameLocations":["26471:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"26471:6:9"},"referencedDeclaration":2126,"src":"26471:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"26460:27:9"},"returnParameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2841,"src":"26511:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2830,"nodeType":"UserDefinedTypeName","pathNode":{"id":2829,"name":"Signed","nameLocations":["26511:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"26511:6:9"},"referencedDeclaration":2126,"src":"26511:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"26510:15:9"},"scope":2984,"src":"26448:128:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2920,"nodeType":"Block","src":"26946:535:9","statements":[{"assignments":[2855],"declarations":[{"constant":false,"id":2855,"mutability":"mutable","name":"aScaled","nameLocation":"26963:7:9","nodeType":"VariableDeclaration","scope":2920,"src":"26956:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2854,"name":"int256","nodeType":"ElementaryTypeName","src":"26956:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2861,"initialValue":{"arguments":[{"id":2859,"name":"SFP_SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"26988:18:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"expression":{"id":2856,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"26973:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2857,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26975:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"26973:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26984:3:9","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"26973:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26973:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"26956:51:9"},{"assignments":[2863],"declarations":[{"constant":false,"id":2863,"mutability":"mutable","name":"divTowardsZero","nameLocation":"27024:14:9","nodeType":"VariableDeclaration","scope":2920,"src":"27017:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2862,"name":"int256","nodeType":"ElementaryTypeName","src":"27017:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2869,"initialValue":{"arguments":[{"expression":{"id":2866,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"27053:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2867,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27055:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"27053:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2864,"name":"aScaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"27041:7:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27049:3:9","memberName":"div","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"27041:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27041:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"27017:47:9"},{"assignments":[2871],"declarations":[{"constant":false,"id":2871,"mutability":"mutable","name":"mod","nameLocation":"27146:3:9","nodeType":"VariableDeclaration","scope":2920,"src":"27139:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2870,"name":"int256","nodeType":"ElementaryTypeName","src":"27139:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2876,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2872,"name":"aScaled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"27152:7:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":2873,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"27162:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2874,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27164:8:9","memberName":"rawValue","nodeType":"MemberAccess","referencedDeclaration":2125,"src":"27162:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27152:20:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"27139:33:9"},{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2877,"name":"mod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"27186:3:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27193:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"27186:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2918,"nodeType":"Block","src":"27421:54:9","statements":[{"expression":{"arguments":[{"id":2915,"name":"divTowardsZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"27449:14:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2914,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"27442:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27442:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2853,"id":2917,"nodeType":"Return","src":"27435:29:9"}]},"id":2919,"nodeType":"IfStatement","src":"27182:293:9","trueBody":{"id":2913,"nodeType":"Block","src":"27196:219:9","statements":[{"assignments":[2881],"declarations":[{"constant":false,"id":2881,"mutability":"mutable","name":"isResultPositive","nameLocation":"27215:16:9","nodeType":"VariableDeclaration","scope":2913,"src":"27210:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2880,"name":"bool","nodeType":"ElementaryTypeName","src":"27210:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2891,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2883,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2845,"src":"27245:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"hexValue":"30","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27248:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2882,"name":"isLessThan","nodeType":"Identifier","overloadedDeclarations":[1563,1583,1603,2378,2398,2418],"referencedDeclaration":2398,"src":"27234:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_int256_$returns$_t_bool_$","typeString":"function (struct FixedPoint.Signed memory,int256) pure returns (bool)"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27234:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":2887,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"27265:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"hexValue":"30","id":2888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27268:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2886,"name":"isLessThan","nodeType":"Identifier","overloadedDeclarations":[1563,1583,1603,2378,2398,2418],"referencedDeclaration":2398,"src":"27254:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_int256_$returns$_t_bool_$","typeString":"function (struct FixedPoint.Signed memory,int256) pure returns (bool)"}},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27254:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"27234:36:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"27210:60:9"},{"assignments":[2893],"declarations":[{"constant":false,"id":2893,"mutability":"mutable","name":"valueToAdd","nameLocation":"27291:10:9","nodeType":"VariableDeclaration","scope":2913,"src":"27284:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2892,"name":"int256","nodeType":"ElementaryTypeName","src":"27284:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2905,"initialValue":{"condition":{"id":2894,"name":"isResultPositive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"27304:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"27342:2:9","subExpression":{"hexValue":"31","id":2901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27343:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":2900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27335:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2899,"name":"int256","nodeType":"ElementaryTypeName","src":"27335:6:9","typeDescriptions":{}}},"id":2903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27335:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"27304:41:9","trueExpression":{"arguments":[{"hexValue":"31","id":2897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27330:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27323:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2895,"name":"int256","nodeType":"ElementaryTypeName","src":"27323:6:9","typeDescriptions":{}}},"id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27323:9:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"27284:61:9"},{"expression":{"arguments":[{"arguments":[{"id":2909,"name":"valueToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"27392:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2907,"name":"divTowardsZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2863,"src":"27373:14:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27388:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1350,"src":"27373:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$_t_int256_$returns$_t_int256_$bound_to$_t_int256_$","typeString":"function (int256,int256) pure returns (int256)"}},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27373:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2906,"name":"Signed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"27366:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Signed_$2126_storage_ptr_$","typeString":"type(struct FixedPoint.Signed storage pointer)"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27366:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2853,"id":2912,"nodeType":"Return","src":"27359:45:9"}]}}]},"documentation":{"id":2842,"nodeType":"StructuredDocumentation","src":"26582:262:9","text":" @notice Divides one `Signed` by an `Signed` and \"ceil's\" the quotient, reverting on overflow or division by 0.\n @param a a FixedPoint numerator.\n @param b a FixedPoint denominator.\n @return the quotient of `a` divided by `b`."},"id":2921,"implemented":true,"kind":"function","modifiers":[],"name":"divAwayFromZero","nameLocation":"26858:15:9","nodeType":"FunctionDefinition","parameters":{"id":2849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2845,"mutability":"mutable","name":"a","nameLocation":"26888:1:9","nodeType":"VariableDeclaration","scope":2921,"src":"26874:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2844,"nodeType":"UserDefinedTypeName","pathNode":{"id":2843,"name":"Signed","nameLocations":["26874:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"26874:6:9"},"referencedDeclaration":2126,"src":"26874:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2848,"mutability":"mutable","name":"b","nameLocation":"26905:1:9","nodeType":"VariableDeclaration","scope":2921,"src":"26891:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2847,"nodeType":"UserDefinedTypeName","pathNode":{"id":2846,"name":"Signed","nameLocations":["26891:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"26891:6:9"},"referencedDeclaration":2126,"src":"26891:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"26873:34:9"},"returnParameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2921,"src":"26931:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2851,"nodeType":"UserDefinedTypeName","pathNode":{"id":2850,"name":"Signed","nameLocations":["26931:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"26931:6:9"},"referencedDeclaration":2126,"src":"26931:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"26930:15:9"},"scope":2984,"src":"26849:632:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2940,"nodeType":"Block","src":"27848:366:9","statements":[{"expression":{"arguments":[{"id":2934,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"28185:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"arguments":[{"id":2936,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"28204:1:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2935,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"28188:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28188:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}],"id":2933,"name":"divAwayFromZero","nodeType":"Identifier","overloadedDeclarations":[2921,2941],"referencedDeclaration":2921,"src":"28169:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_struct$_Signed_$2126_memory_ptr_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (struct FixedPoint.Signed memory,struct FixedPoint.Signed memory) pure returns (struct FixedPoint.Signed memory)"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28169:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"functionReturnParameters":2932,"id":2939,"nodeType":"Return","src":"28162:45:9"}]},"documentation":{"id":2922,"nodeType":"StructuredDocumentation","src":"27487:266:9","text":" @notice Divides one `Signed` by an unscaled int256 and \"ceil's\" the quotient, reverting on overflow or division by 0.\n @param a a FixedPoint numerator.\n @param b an int256 denominator.\n @return the quotient of `a` divided by `b`."},"id":2941,"implemented":true,"kind":"function","modifiers":[],"name":"divAwayFromZero","nameLocation":"27767:15:9","nodeType":"FunctionDefinition","parameters":{"id":2928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2925,"mutability":"mutable","name":"a","nameLocation":"27797:1:9","nodeType":"VariableDeclaration","scope":2941,"src":"27783:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2924,"nodeType":"UserDefinedTypeName","pathNode":{"id":2923,"name":"Signed","nameLocations":["27783:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"27783:6:9"},"referencedDeclaration":2126,"src":"27783:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2927,"mutability":"mutable","name":"b","nameLocation":"27807:1:9","nodeType":"VariableDeclaration","scope":2941,"src":"27800:8:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2926,"name":"int256","nodeType":"ElementaryTypeName","src":"27800:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27782:27:9"},"returnParameters":{"id":2932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2931,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2941,"src":"27833:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2930,"nodeType":"UserDefinedTypeName","pathNode":{"id":2929,"name":"Signed","nameLocations":["27833:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"27833:6:9"},"referencedDeclaration":2126,"src":"27833:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"27832:15:9"},"scope":2984,"src":"27758:456:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2982,"nodeType":"Block","src":"28634:142:9","statements":[{"expression":{"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2953,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"28644:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":2955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28669:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2954,"name":"fromUnscaledInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"28653:15:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (int256) pure returns (struct FixedPoint.Signed memory)"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28653:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"src":"28644:27:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2958,"nodeType":"ExpressionStatement","src":"28644:27:9"},{"body":{"id":2980,"nodeType":"Block","src":"28722:48:9","statements":[{"expression":{"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2973,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"28736:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2975,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"28749:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},{"id":2976,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"28757:1:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"},{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}],"id":2974,"name":"mul","nodeType":"Identifier","overloadedDeclarations":[1839,1860,2654,2675],"referencedDeclaration":2654,"src":"28745:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Signed_$2126_memory_ptr_$_t_struct$_Signed_$2126_memory_ptr_$returns$_t_struct$_Signed_$2126_memory_ptr_$","typeString":"function (struct FixedPoint.Signed memory,struct FixedPoint.Signed memory) pure returns (struct FixedPoint.Signed memory)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28745:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"src":"28736:23:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed memory"}},"id":2979,"nodeType":"ExpressionStatement","src":"28736:23:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2963,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"28701:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2964,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2947,"src":"28705:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28701:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2981,"initializationExpression":{"assignments":[2960],"declarations":[{"constant":false,"id":2960,"mutability":"mutable","name":"i","nameLocation":"28694:1:9","nodeType":"VariableDeclaration","scope":2981,"src":"28686:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"28686:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2962,"initialValue":{"hexValue":"30","id":2961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28698:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"28686:13:9"},"loopExpression":{"expression":{"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2966,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"28708:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":2969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28718:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":2967,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"28712:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28714:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1151,"src":"28712:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28712:8:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28708:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2972,"nodeType":"ExpressionStatement","src":"28708:12:9"},"nodeType":"ForStatement","src":"28681:89:9"}]},"documentation":{"id":2942,"nodeType":"StructuredDocumentation","src":"28220:323:9","text":" @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\n @dev This will \"floor\" the result.\n @param a a FixedPoint.Signed.\n @param b a uint256 (negative exponents are not allowed).\n @return output is `a` to the power of `b`."},"id":2983,"implemented":true,"kind":"function","modifiers":[],"name":"pow","nameLocation":"28557:3:9","nodeType":"FunctionDefinition","parameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2945,"mutability":"mutable","name":"a","nameLocation":"28575:1:9","nodeType":"VariableDeclaration","scope":2983,"src":"28561:15:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2944,"nodeType":"UserDefinedTypeName","pathNode":{"id":2943,"name":"Signed","nameLocations":["28561:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"28561:6:9"},"referencedDeclaration":2126,"src":"28561:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"},{"constant":false,"id":2947,"mutability":"mutable","name":"b","nameLocation":"28586:1:9","nodeType":"VariableDeclaration","scope":2983,"src":"28578:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2946,"name":"uint256","nodeType":"ElementaryTypeName","src":"28578:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28560:28:9"},"returnParameters":{"id":2952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2951,"mutability":"mutable","name":"output","nameLocation":"28626:6:9","nodeType":"VariableDeclaration","scope":2983,"src":"28612:20:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_memory_ptr","typeString":"struct FixedPoint.Signed"},"typeName":{"id":2950,"nodeType":"UserDefinedTypeName","pathNode":{"id":2949,"name":"Signed","nameLocations":["28612:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":2126,"src":"28612:6:9"},"referencedDeclaration":2126,"src":"28612:6:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signed_$2126_storage_ptr","typeString":"struct FixedPoint.Signed"}},"visibility":"internal"}],"src":"28611:22:9"},"scope":2984,"src":"28548:228:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2985,"src":"252:28526:9","usedErrors":[]}],"src":"42:28737:9"},"id":9},"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol":{"ast":{"absolutePath":"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol","exportedSymbols":{"AddressWhitelistInterface":[3010]},"id":3011,"license":"AGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":2986,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"42:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressWhitelistInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3010,"linearizedBaseContracts":[3010],"name":"AddressWhitelistInterface","nameLocation":"77:25:10","nodeType":"ContractDefinition","nodes":[{"functionSelector":"e43252d7","id":2991,"implemented":false,"kind":"function","modifiers":[],"name":"addToWhitelist","nameLocation":"118:14:10","nodeType":"FunctionDefinition","parameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2988,"mutability":"mutable","name":"newElement","nameLocation":"141:10:10","nodeType":"VariableDeclaration","scope":2991,"src":"133:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2987,"name":"address","nodeType":"ElementaryTypeName","src":"133:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"132:20:10"},"returnParameters":{"id":2990,"nodeType":"ParameterList","parameters":[],"src":"161:0:10"},"scope":3010,"src":"109:53:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8ab1d681","id":2996,"implemented":false,"kind":"function","modifiers":[],"name":"removeFromWhitelist","nameLocation":"177:19:10","nodeType":"FunctionDefinition","parameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"newElement","nameLocation":"205:10:10","nodeType":"VariableDeclaration","scope":2996,"src":"197:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2992,"name":"address","nodeType":"ElementaryTypeName","src":"197:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"196:20:10"},"returnParameters":{"id":2995,"nodeType":"ParameterList","parameters":[],"src":"225:0:10"},"scope":3010,"src":"168:58:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"3a3ab672","id":3003,"implemented":false,"kind":"function","modifiers":[],"name":"isOnWhitelist","nameLocation":"241:13:10","nodeType":"FunctionDefinition","parameters":{"id":2999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2998,"mutability":"mutable","name":"newElement","nameLocation":"263:10:10","nodeType":"VariableDeclaration","scope":3003,"src":"255:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2997,"name":"address","nodeType":"ElementaryTypeName","src":"255:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"254:20:10"},"returnParameters":{"id":3002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3003,"src":"298:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3000,"name":"bool","nodeType":"ElementaryTypeName","src":"298:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"297:6:10"},"scope":3010,"src":"232:72:10","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d01f63f5","id":3009,"implemented":false,"kind":"function","modifiers":[],"name":"getWhitelist","nameLocation":"319:12:10","nodeType":"FunctionDefinition","parameters":{"id":3004,"nodeType":"ParameterList","parameters":[],"src":"331:2:10"},"returnParameters":{"id":3008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3007,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3009,"src":"357:16:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3005,"name":"address","nodeType":"ElementaryTypeName","src":"357:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3006,"nodeType":"ArrayTypeName","src":"357:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"356:18:10"},"scope":3010,"src":"310:65:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3011,"src":"67:310:10","usedErrors":[]}],"src":"42:336:10"},"id":10},"@uma/core/contracts/oracle/interfaces/FinderInterface.sol":{"ast":{"absolutePath":"@uma/core/contracts/oracle/interfaces/FinderInterface.sol","exportedSymbols":{"FinderInterface":[3030]},"id":3031,"license":"AGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3012,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"42:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"FinderInterface","contractDependencies":[],"contractKind":"interface","documentation":{"id":3013,"nodeType":"StructuredDocumentation","src":"67:144:11","text":" @title Provides addresses of the live contracts implementing certain interfaces.\n @dev Examples are the Oracle or Store interfaces."},"fullyImplemented":false,"id":3030,"linearizedBaseContracts":[3030],"name":"FinderInterface","nameLocation":"222:15:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3014,"nodeType":"StructuredDocumentation","src":"244:300:11","text":" @notice Updates the address of the contract that implements `interfaceName`.\n @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\n @param implementationAddress address of the deployed contract that implements the interface."},"functionSelector":"31f9665e","id":3021,"implemented":false,"kind":"function","modifiers":[],"name":"changeImplementationAddress","nameLocation":"558:27:11","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3016,"mutability":"mutable","name":"interfaceName","nameLocation":"594:13:11","nodeType":"VariableDeclaration","scope":3021,"src":"586:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"586:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3018,"mutability":"mutable","name":"implementationAddress","nameLocation":"617:21:11","nodeType":"VariableDeclaration","scope":3021,"src":"609:29:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3017,"name":"address","nodeType":"ElementaryTypeName","src":"609:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"585:54:11"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[],"src":"648:0:11"},"scope":3030,"src":"549:100:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3022,"nodeType":"StructuredDocumentation","src":"655:250:11","text":" @notice Gets the address of the contract that implements the given `interfaceName`.\n @param interfaceName queried interface.\n @return implementationAddress address of the deployed contract that implements the interface."},"functionSelector":"aafd5e40","id":3029,"implemented":false,"kind":"function","modifiers":[],"name":"getImplementationAddress","nameLocation":"919:24:11","nodeType":"FunctionDefinition","parameters":{"id":3025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3024,"mutability":"mutable","name":"interfaceName","nameLocation":"952:13:11","nodeType":"VariableDeclaration","scope":3029,"src":"944:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3023,"name":"bytes32","nodeType":"ElementaryTypeName","src":"944:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"943:23:11"},"returnParameters":{"id":3028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3027,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3029,"src":"990:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"990:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"989:9:11"},"scope":3030,"src":"910:89:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3031,"src":"212:789:11","usedErrors":[]}],"src":"42:960:11"},"id":11},"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol":{"ast":{"absolutePath":"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol","exportedSymbols":{"FinderInterface":[3030],"IERC20":[341],"OptimisticOracleV2Interface":[3396]},"id":3397,"license":"AGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3032,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"42:23:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3033,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3397,"sourceUnit":342,"src":"67:56:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uma/core/contracts/oracle/interfaces/FinderInterface.sol","file":"./FinderInterface.sol","id":3034,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3397,"sourceUnit":3031,"src":"124:31:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"OptimisticOracleV2Interface","contractDependencies":[],"contractKind":"contract","documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"157:175:12","text":" @title Financial contract facing Oracle interface.\n @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface."},"fullyImplemented":false,"id":3396,"linearizedBaseContracts":[3396],"name":"OptimisticOracleV2Interface","nameLocation":"351:27:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"f1679315ff325c257a944e0ca1bfe7b26616039e9511f9610d4ba3eca851027b","id":3051,"name":"RequestPrice","nameLocation":"391:12:12","nodeType":"EventDefinition","parameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3037,"indexed":true,"mutability":"mutable","name":"requester","nameLocation":"429:9:12","nodeType":"VariableDeclaration","scope":3051,"src":"413:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3036,"name":"address","nodeType":"ElementaryTypeName","src":"413:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3039,"indexed":false,"mutability":"mutable","name":"identifier","nameLocation":"456:10:12","nodeType":"VariableDeclaration","scope":3051,"src":"448:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3038,"name":"bytes32","nodeType":"ElementaryTypeName","src":"448:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3041,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"484:9:12","nodeType":"VariableDeclaration","scope":3051,"src":"476:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"476:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3043,"indexed":false,"mutability":"mutable","name":"ancillaryData","nameLocation":"509:13:12","nodeType":"VariableDeclaration","scope":3051,"src":"503:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3042,"name":"bytes","nodeType":"ElementaryTypeName","src":"503:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3045,"indexed":false,"mutability":"mutable","name":"currency","nameLocation":"540:8:12","nodeType":"VariableDeclaration","scope":3051,"src":"532:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3044,"name":"address","nodeType":"ElementaryTypeName","src":"532:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3047,"indexed":false,"mutability":"mutable","name":"reward","nameLocation":"566:6:12","nodeType":"VariableDeclaration","scope":3051,"src":"558:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3046,"name":"uint256","nodeType":"ElementaryTypeName","src":"558:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3049,"indexed":false,"mutability":"mutable","name":"finalFee","nameLocation":"590:8:12","nodeType":"VariableDeclaration","scope":3051,"src":"582:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"582:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"403:201:12"},"src":"385:220:12"},{"anonymous":false,"eventSelector":"6e51dd00371aabffa82cd401592f76ed51e98a9ea4b58751c70463a2c78b5ca1","id":3069,"name":"ProposePrice","nameLocation":"616:12:12","nodeType":"EventDefinition","parameters":{"id":3068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3053,"indexed":true,"mutability":"mutable","name":"requester","nameLocation":"654:9:12","nodeType":"VariableDeclaration","scope":3069,"src":"638:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3052,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3055,"indexed":true,"mutability":"mutable","name":"proposer","nameLocation":"689:8:12","nodeType":"VariableDeclaration","scope":3069,"src":"673:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3054,"name":"address","nodeType":"ElementaryTypeName","src":"673:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3057,"indexed":false,"mutability":"mutable","name":"identifier","nameLocation":"715:10:12","nodeType":"VariableDeclaration","scope":3069,"src":"707:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3056,"name":"bytes32","nodeType":"ElementaryTypeName","src":"707:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3059,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"743:9:12","nodeType":"VariableDeclaration","scope":3069,"src":"735:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3058,"name":"uint256","nodeType":"ElementaryTypeName","src":"735:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3061,"indexed":false,"mutability":"mutable","name":"ancillaryData","nameLocation":"768:13:12","nodeType":"VariableDeclaration","scope":3069,"src":"762:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3060,"name":"bytes","nodeType":"ElementaryTypeName","src":"762:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3063,"indexed":false,"mutability":"mutable","name":"proposedPrice","nameLocation":"798:13:12","nodeType":"VariableDeclaration","scope":3069,"src":"791:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3062,"name":"int256","nodeType":"ElementaryTypeName","src":"791:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3065,"indexed":false,"mutability":"mutable","name":"expirationTimestamp","nameLocation":"829:19:12","nodeType":"VariableDeclaration","scope":3069,"src":"821:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3064,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3067,"indexed":false,"mutability":"mutable","name":"currency","nameLocation":"866:8:12","nodeType":"VariableDeclaration","scope":3069,"src":"858:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3066,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"628:252:12"},"src":"610:271:12"},{"anonymous":false,"eventSelector":"5165909c3d1c01c5d1e121ac6f6d01dda1ba24bc9e1f975b5a375339c15be7f3","id":3085,"name":"DisputePrice","nameLocation":"892:12:12","nodeType":"EventDefinition","parameters":{"id":3084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3071,"indexed":true,"mutability":"mutable","name":"requester","nameLocation":"930:9:12","nodeType":"VariableDeclaration","scope":3085,"src":"914:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3070,"name":"address","nodeType":"ElementaryTypeName","src":"914:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3073,"indexed":true,"mutability":"mutable","name":"proposer","nameLocation":"965:8:12","nodeType":"VariableDeclaration","scope":3085,"src":"949:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3072,"name":"address","nodeType":"ElementaryTypeName","src":"949:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3075,"indexed":true,"mutability":"mutable","name":"disputer","nameLocation":"999:8:12","nodeType":"VariableDeclaration","scope":3085,"src":"983:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3074,"name":"address","nodeType":"ElementaryTypeName","src":"983:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3077,"indexed":false,"mutability":"mutable","name":"identifier","nameLocation":"1025:10:12","nodeType":"VariableDeclaration","scope":3085,"src":"1017:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3076,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1017:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3079,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1053:9:12","nodeType":"VariableDeclaration","scope":3085,"src":"1045:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1045:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3081,"indexed":false,"mutability":"mutable","name":"ancillaryData","nameLocation":"1078:13:12","nodeType":"VariableDeclaration","scope":3085,"src":"1072:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3080,"name":"bytes","nodeType":"ElementaryTypeName","src":"1072:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3083,"indexed":false,"mutability":"mutable","name":"proposedPrice","nameLocation":"1108:13:12","nodeType":"VariableDeclaration","scope":3085,"src":"1101:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3082,"name":"int256","nodeType":"ElementaryTypeName","src":"1101:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"904:223:12"},"src":"886:242:12"},{"anonymous":false,"eventSelector":"3f384afb4bd9f0aef0298c80399950011420eb33b0e1a750b20966270247b9a0","id":3103,"name":"Settle","nameLocation":"1139:6:12","nodeType":"EventDefinition","parameters":{"id":3102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3087,"indexed":true,"mutability":"mutable","name":"requester","nameLocation":"1171:9:12","nodeType":"VariableDeclaration","scope":3103,"src":"1155:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3086,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3089,"indexed":true,"mutability":"mutable","name":"proposer","nameLocation":"1206:8:12","nodeType":"VariableDeclaration","scope":3103,"src":"1190:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3088,"name":"address","nodeType":"ElementaryTypeName","src":"1190:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3091,"indexed":true,"mutability":"mutable","name":"disputer","nameLocation":"1240:8:12","nodeType":"VariableDeclaration","scope":3103,"src":"1224:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3090,"name":"address","nodeType":"ElementaryTypeName","src":"1224:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3093,"indexed":false,"mutability":"mutable","name":"identifier","nameLocation":"1266:10:12","nodeType":"VariableDeclaration","scope":3103,"src":"1258:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3092,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1258:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3095,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"1294:9:12","nodeType":"VariableDeclaration","scope":3103,"src":"1286:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3094,"name":"uint256","nodeType":"ElementaryTypeName","src":"1286:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3097,"indexed":false,"mutability":"mutable","name":"ancillaryData","nameLocation":"1319:13:12","nodeType":"VariableDeclaration","scope":3103,"src":"1313:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3096,"name":"bytes","nodeType":"ElementaryTypeName","src":"1313:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3099,"indexed":false,"mutability":"mutable","name":"price","nameLocation":"1349:5:12","nodeType":"VariableDeclaration","scope":3103,"src":"1342:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3098,"name":"int256","nodeType":"ElementaryTypeName","src":"1342:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3101,"indexed":false,"mutability":"mutable","name":"payout","nameLocation":"1372:6:12","nodeType":"VariableDeclaration","scope":3103,"src":"1364:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1364:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1145:239:12"},"src":"1133:252:12"},{"canonicalName":"OptimisticOracleV2Interface.State","id":3111,"members":[{"id":3104,"name":"Invalid","nameLocation":"1468:7:12","nodeType":"EnumValue","src":"1468:7:12"},{"id":3105,"name":"Requested","nameLocation":"1505:9:12","nodeType":"EnumValue","src":"1505:9:12"},{"id":3106,"name":"Proposed","nameLocation":"1562:8:12","nodeType":"EnumValue","src":"1562:8:12"},{"id":3107,"name":"Expired","nameLocation":"1626:7:12","nodeType":"EnumValue","src":"1626:7:12"},{"id":3108,"name":"Disputed","nameLocation":"1685:8:12","nodeType":"EnumValue","src":"1685:8:12"},{"id":3109,"name":"Resolved","nameLocation":"1747:8:12","nodeType":"EnumValue","src":"1747:8:12"},{"id":3110,"name":"Settled","nameLocation":"1805:7:12","nodeType":"EnumValue","src":"1805:7:12"}],"name":"State","nameLocation":"1452:5:12","nodeType":"EnumDefinition","src":"1447:456:12"},{"canonicalName":"OptimisticOracleV2Interface.RequestSettings","id":3126,"members":[{"constant":false,"id":3113,"mutability":"mutable","name":"eventBased","nameLocation":"1947:10:12","nodeType":"VariableDeclaration","scope":3126,"src":"1942:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3112,"name":"bool","nodeType":"ElementaryTypeName","src":"1942:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3115,"mutability":"mutable","name":"refundOnDispute","nameLocation":"2021:15:12","nodeType":"VariableDeclaration","scope":3126,"src":"2016:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3114,"name":"bool","nodeType":"ElementaryTypeName","src":"2016:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3117,"mutability":"mutable","name":"callbackOnPriceProposed","nameLocation":"2120:23:12","nodeType":"VariableDeclaration","scope":3126,"src":"2115:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3116,"name":"bool","nodeType":"ElementaryTypeName","src":"2115:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3119,"mutability":"mutable","name":"callbackOnPriceDisputed","nameLocation":"2215:23:12","nodeType":"VariableDeclaration","scope":3126,"src":"2210:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3118,"name":"bool","nodeType":"ElementaryTypeName","src":"2210:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3121,"mutability":"mutable","name":"callbackOnPriceSettled","nameLocation":"2310:22:12","nodeType":"VariableDeclaration","scope":3126,"src":"2305:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3120,"name":"bool","nodeType":"ElementaryTypeName","src":"2305:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3123,"mutability":"mutable","name":"bond","nameLocation":"2406:4:12","nodeType":"VariableDeclaration","scope":3126,"src":"2398:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2398:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3125,"mutability":"mutable","name":"customLiveness","nameLocation":"2501:14:12","nodeType":"VariableDeclaration","scope":3126,"src":"2493:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2493:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RequestSettings","nameLocation":"1916:15:12","nodeType":"StructDefinition","scope":3396,"src":"1909:660:12","visibility":"public"},{"canonicalName":"OptimisticOracleV2Interface.Request","id":3149,"members":[{"constant":false,"id":3128,"mutability":"mutable","name":"proposer","nameLocation":"2652:8:12","nodeType":"VariableDeclaration","scope":3149,"src":"2644:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3127,"name":"address","nodeType":"ElementaryTypeName","src":"2644:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3130,"mutability":"mutable","name":"disputer","nameLocation":"2706:8:12","nodeType":"VariableDeclaration","scope":3149,"src":"2698:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3129,"name":"address","nodeType":"ElementaryTypeName","src":"2698:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3133,"mutability":"mutable","name":"currency","nameLocation":"2759:8:12","nodeType":"VariableDeclaration","scope":3149,"src":"2752:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":3132,"nodeType":"UserDefinedTypeName","pathNode":{"id":3131,"name":"IERC20","nameLocations":["2752:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"2752:6:12"},"referencedDeclaration":341,"src":"2752:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3135,"mutability":"mutable","name":"settled","nameLocation":"2827:7:12","nodeType":"VariableDeclaration","scope":3149,"src":"2822:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3134,"name":"bool","nodeType":"ElementaryTypeName","src":"2822:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"requestSettings","nameLocation":"2895:15:12","nodeType":"VariableDeclaration","scope":3149,"src":"2879:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RequestSettings_$3126_storage_ptr","typeString":"struct OptimisticOracleV2Interface.RequestSettings"},"typeName":{"id":3137,"nodeType":"UserDefinedTypeName","pathNode":{"id":3136,"name":"RequestSettings","nameLocations":["2879:15:12"],"nodeType":"IdentifierPath","referencedDeclaration":3126,"src":"2879:15:12"},"referencedDeclaration":3126,"src":"2879:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_RequestSettings_$3126_storage_ptr","typeString":"struct OptimisticOracleV2Interface.RequestSettings"}},"visibility":"internal"},{"constant":false,"id":3140,"mutability":"mutable","name":"proposedPrice","nameLocation":"2973:13:12","nodeType":"VariableDeclaration","scope":3149,"src":"2966:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3139,"name":"int256","nodeType":"ElementaryTypeName","src":"2966:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3142,"mutability":"mutable","name":"resolvedPrice","nameLocation":"3041:13:12","nodeType":"VariableDeclaration","scope":3149,"src":"3034:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3141,"name":"int256","nodeType":"ElementaryTypeName","src":"3034:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3144,"mutability":"mutable","name":"expirationTime","nameLocation":"3119:14:12","nodeType":"VariableDeclaration","scope":3149,"src":"3111:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3143,"name":"uint256","nodeType":"ElementaryTypeName","src":"3111:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3146,"mutability":"mutable","name":"reward","nameLocation":"3212:6:12","nodeType":"VariableDeclaration","scope":3149,"src":"3204:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3145,"name":"uint256","nodeType":"ElementaryTypeName","src":"3204:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3148,"mutability":"mutable","name":"finalFee","nameLocation":"3300:8:12","nodeType":"VariableDeclaration","scope":3149,"src":"3292:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3147,"name":"uint256","nodeType":"ElementaryTypeName","src":"3292:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Request","nameLocation":"2626:7:12","nodeType":"StructDefinition","scope":3396,"src":"2619:754:12","visibility":"public"},{"constant":true,"functionSelector":"c371dda7","id":3152,"mutability":"constant","name":"ancillaryBytesLimit","nameLocation":"3708:19:12","nodeType":"VariableDeclaration","scope":3396,"src":"3684:50:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3150,"name":"uint256","nodeType":"ElementaryTypeName","src":"3684:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"38313932","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3730:4:12","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"value":"8192"},"visibility":"public"},{"functionSelector":"fe4e1983","id":3157,"implemented":false,"kind":"function","modifiers":[],"name":"defaultLiveness","nameLocation":"3750:15:12","nodeType":"FunctionDefinition","parameters":{"id":3153,"nodeType":"ParameterList","parameters":[],"src":"3765:2:12"},"returnParameters":{"id":3156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3157,"src":"3799:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3154,"name":"uint256","nodeType":"ElementaryTypeName","src":"3799:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3798:9:12"},"scope":3396,"src":"3741:67:12","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"b9a3c84c","id":3163,"implemented":false,"kind":"function","modifiers":[],"name":"finder","nameLocation":"3823:6:12","nodeType":"FunctionDefinition","parameters":{"id":3158,"nodeType":"ParameterList","parameters":[],"src":"3829:2:12"},"returnParameters":{"id":3162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3163,"src":"3863:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_FinderInterface_$3030","typeString":"contract FinderInterface"},"typeName":{"id":3160,"nodeType":"UserDefinedTypeName","pathNode":{"id":3159,"name":"FinderInterface","nameLocations":["3863:15:12"],"nodeType":"IdentifierPath","referencedDeclaration":3030,"src":"3863:15:12"},"referencedDeclaration":3030,"src":"3863:15:12","typeDescriptions":{"typeIdentifier":"t_contract$_FinderInterface_$3030","typeString":"contract FinderInterface"}},"visibility":"internal"}],"src":"3862:17:12"},"scope":3396,"src":"3814:66:12","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"29cb924d","id":3168,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentTime","nameLocation":"3895:14:12","nodeType":"FunctionDefinition","parameters":{"id":3164,"nodeType":"ParameterList","parameters":[],"src":"3909:2:12"},"returnParameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3168,"src":"3943:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3165,"name":"uint256","nodeType":"ElementaryTypeName","src":"3943:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3942:9:12"},"scope":3396,"src":"3886:66:12","stateMutability":"view","virtual":true,"visibility":"external"},{"constant":false,"functionSelector":"9d866985","id":3173,"mutability":"mutable","name":"requests","nameLocation":"4085:8:12","nodeType":"VariableDeclaration","scope":3396,"src":"4050:43:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Request_$3149_storage_$","typeString":"mapping(bytes32 => struct OptimisticOracleV2Interface.Request)"},"typeName":{"id":3172,"keyType":{"id":3169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4058:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"4050:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Request_$3149_storage_$","typeString":"mapping(bytes32 => struct OptimisticOracleV2Interface.Request)"},"valueType":{"id":3171,"nodeType":"UserDefinedTypeName","pathNode":{"id":3170,"name":"Request","nameLocations":["4069:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3149,"src":"4069:7:12"},"referencedDeclaration":3149,"src":"4069:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$3149_storage_ptr","typeString":"struct OptimisticOracleV2Interface.Request"}}},"visibility":"public"},{"documentation":{"id":3174,"nodeType":"StructuredDocumentation","src":"4100:854:12","text":" @notice Requests a new price.\n @param identifier price identifier being requested.\n @param timestamp timestamp of the price being requested.\n @param ancillaryData ancillary data representing additional args being passed with the price request.\n @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\n @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\n               which could make sense if the contract requests and proposes the value in the same call or\n               provides its own reward system.\n @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\n This can be changed with a subsequent call to setBond()."},"functionSelector":"11df92f1","id":3190,"implemented":false,"kind":"function","modifiers":[],"name":"requestPrice","nameLocation":"4968:12:12","nodeType":"FunctionDefinition","parameters":{"id":3186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3176,"mutability":"mutable","name":"identifier","nameLocation":"4998:10:12","nodeType":"VariableDeclaration","scope":3190,"src":"4990:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4990:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3178,"mutability":"mutable","name":"timestamp","nameLocation":"5026:9:12","nodeType":"VariableDeclaration","scope":3190,"src":"5018:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3177,"name":"uint256","nodeType":"ElementaryTypeName","src":"5018:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3180,"mutability":"mutable","name":"ancillaryData","nameLocation":"5058:13:12","nodeType":"VariableDeclaration","scope":3190,"src":"5045:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3179,"name":"bytes","nodeType":"ElementaryTypeName","src":"5045:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3183,"mutability":"mutable","name":"currency","nameLocation":"5088:8:12","nodeType":"VariableDeclaration","scope":3190,"src":"5081:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":3182,"nodeType":"UserDefinedTypeName","pathNode":{"id":3181,"name":"IERC20","nameLocations":["5081:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"5081:6:12"},"referencedDeclaration":341,"src":"5081:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3185,"mutability":"mutable","name":"reward","nameLocation":"5114:6:12","nodeType":"VariableDeclaration","scope":3190,"src":"5106:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3184,"name":"uint256","nodeType":"ElementaryTypeName","src":"5106:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4980:146:12"},"returnParameters":{"id":3189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"totalBond","nameLocation":"5161:9:12","nodeType":"VariableDeclaration","scope":3190,"src":"5153:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3187,"name":"uint256","nodeType":"ElementaryTypeName","src":"5153:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5152:19:12"},"scope":3396,"src":"4959:213:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3191,"nodeType":"StructuredDocumentation","src":"5178:516:12","text":" @notice Set the proposal bond associated with a price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @param bond custom bond amount to set.\n @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\n changed again with a subsequent call to setBond()."},"functionSelector":"ad5a755a","id":3204,"implemented":false,"kind":"function","modifiers":[],"name":"setBond","nameLocation":"5708:7:12","nodeType":"FunctionDefinition","parameters":{"id":3200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"identifier","nameLocation":"5733:10:12","nodeType":"VariableDeclaration","scope":3204,"src":"5725:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5725:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3195,"mutability":"mutable","name":"timestamp","nameLocation":"5761:9:12","nodeType":"VariableDeclaration","scope":3204,"src":"5753:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3194,"name":"uint256","nodeType":"ElementaryTypeName","src":"5753:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3197,"mutability":"mutable","name":"ancillaryData","nameLocation":"5793:13:12","nodeType":"VariableDeclaration","scope":3204,"src":"5780:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3196,"name":"bytes","nodeType":"ElementaryTypeName","src":"5780:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3199,"mutability":"mutable","name":"bond","nameLocation":"5824:4:12","nodeType":"VariableDeclaration","scope":3204,"src":"5816:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3198,"name":"uint256","nodeType":"ElementaryTypeName","src":"5816:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5715:119:12"},"returnParameters":{"id":3203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3202,"mutability":"mutable","name":"totalBond","nameLocation":"5869:9:12","nodeType":"VariableDeclaration","scope":3204,"src":"5861:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3201,"name":"uint256","nodeType":"ElementaryTypeName","src":"5861:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5860:19:12"},"scope":3396,"src":"5699:181:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3205,"nodeType":"StructuredDocumentation","src":"5886:545:12","text":" @notice Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller\n in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\n bond, so there is still profit to be made even if the reward is refunded.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested."},"functionSelector":"91f58dcb","id":3214,"implemented":false,"kind":"function","modifiers":[],"name":"setRefundOnDispute","nameLocation":"6445:18:12","nodeType":"FunctionDefinition","parameters":{"id":3212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3207,"mutability":"mutable","name":"identifier","nameLocation":"6481:10:12","nodeType":"VariableDeclaration","scope":3214,"src":"6473:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"timestamp","nameLocation":"6509:9:12","nodeType":"VariableDeclaration","scope":3214,"src":"6501:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3208,"name":"uint256","nodeType":"ElementaryTypeName","src":"6501:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3211,"mutability":"mutable","name":"ancillaryData","nameLocation":"6541:13:12","nodeType":"VariableDeclaration","scope":3214,"src":"6528:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3210,"name":"bytes","nodeType":"ElementaryTypeName","src":"6528:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6463:97:12"},"returnParameters":{"id":3213,"nodeType":"ParameterList","parameters":[],"src":"6577:0:12"},"scope":3396,"src":"6436:142:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3215,"nodeType":"StructuredDocumentation","src":"6584:426:12","text":" @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\n being auto-resolved.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @param customLiveness new custom liveness."},"functionSelector":"473c45fe","id":3226,"implemented":false,"kind":"function","modifiers":[],"name":"setCustomLiveness","nameLocation":"7024:17:12","nodeType":"FunctionDefinition","parameters":{"id":3224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3217,"mutability":"mutable","name":"identifier","nameLocation":"7059:10:12","nodeType":"VariableDeclaration","scope":3226,"src":"7051:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3216,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7051:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3219,"mutability":"mutable","name":"timestamp","nameLocation":"7087:9:12","nodeType":"VariableDeclaration","scope":3226,"src":"7079:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3218,"name":"uint256","nodeType":"ElementaryTypeName","src":"7079:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3221,"mutability":"mutable","name":"ancillaryData","nameLocation":"7119:13:12","nodeType":"VariableDeclaration","scope":3226,"src":"7106:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3220,"name":"bytes","nodeType":"ElementaryTypeName","src":"7106:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3223,"mutability":"mutable","name":"customLiveness","nameLocation":"7150:14:12","nodeType":"VariableDeclaration","scope":3226,"src":"7142:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3222,"name":"uint256","nodeType":"ElementaryTypeName","src":"7142:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7041:129:12"},"returnParameters":{"id":3225,"nodeType":"ParameterList","parameters":[],"src":"7187:0:12"},"scope":3396,"src":"7015:173:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3227,"nodeType":"StructuredDocumentation","src":"7194:862:12","text":" @notice Sets the request to be an \"event-based\" request.\n @dev Calling this method has a few impacts on the request:\n 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\n    with the request.\n 2. The proposer cannot propose the \"too early\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\n    prematurely proposes a response loses their bond.\n 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\n    the requesting contract.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested."},"functionSelector":"120698af","id":3236,"implemented":false,"kind":"function","modifiers":[],"name":"setEventBased","nameLocation":"8070:13:12","nodeType":"FunctionDefinition","parameters":{"id":3234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3229,"mutability":"mutable","name":"identifier","nameLocation":"8101:10:12","nodeType":"VariableDeclaration","scope":3236,"src":"8093:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8093:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3231,"mutability":"mutable","name":"timestamp","nameLocation":"8129:9:12","nodeType":"VariableDeclaration","scope":3236,"src":"8121:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3230,"name":"uint256","nodeType":"ElementaryTypeName","src":"8121:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3233,"mutability":"mutable","name":"ancillaryData","nameLocation":"8161:13:12","nodeType":"VariableDeclaration","scope":3236,"src":"8148:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3232,"name":"bytes","nodeType":"ElementaryTypeName","src":"8148:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8083:97:12"},"returnParameters":{"id":3235,"nodeType":"ParameterList","parameters":[],"src":"8197:0:12"},"scope":3396,"src":"8061:137:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3237,"nodeType":"StructuredDocumentation","src":"8204:555:12","text":" @notice Sets which callbacks should be enabled for the request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\n @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\n @param callbackOnPriceSettled whether to enable the callback onPriceSettled."},"functionSelector":"f327b075","id":3252,"implemented":false,"kind":"function","modifiers":[],"name":"setCallbacks","nameLocation":"8773:12:12","nodeType":"FunctionDefinition","parameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3239,"mutability":"mutable","name":"identifier","nameLocation":"8803:10:12","nodeType":"VariableDeclaration","scope":3252,"src":"8795:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8795:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3241,"mutability":"mutable","name":"timestamp","nameLocation":"8831:9:12","nodeType":"VariableDeclaration","scope":3252,"src":"8823:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3240,"name":"uint256","nodeType":"ElementaryTypeName","src":"8823:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3243,"mutability":"mutable","name":"ancillaryData","nameLocation":"8863:13:12","nodeType":"VariableDeclaration","scope":3252,"src":"8850:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3242,"name":"bytes","nodeType":"ElementaryTypeName","src":"8850:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3245,"mutability":"mutable","name":"callbackOnPriceProposed","nameLocation":"8891:23:12","nodeType":"VariableDeclaration","scope":3252,"src":"8886:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3244,"name":"bool","nodeType":"ElementaryTypeName","src":"8886:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3247,"mutability":"mutable","name":"callbackOnPriceDisputed","nameLocation":"8929:23:12","nodeType":"VariableDeclaration","scope":3252,"src":"8924:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3246,"name":"bool","nodeType":"ElementaryTypeName","src":"8924:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3249,"mutability":"mutable","name":"callbackOnPriceSettled","nameLocation":"8967:22:12","nodeType":"VariableDeclaration","scope":3252,"src":"8962:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3248,"name":"bool","nodeType":"ElementaryTypeName","src":"8962:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8785:210:12"},"returnParameters":{"id":3251,"nodeType":"ParameterList","parameters":[],"src":"9012:0:12"},"scope":3396,"src":"8764:249:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3253,"nodeType":"StructuredDocumentation","src":"9019:764:12","text":" @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\n from this proposal. However, any bonds are pulled from the caller.\n @param proposer address to set as the proposer.\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @param proposedPrice price being proposed.\n @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n the proposer once settled if the proposal is correct."},"functionSelector":"7c82288f","id":3270,"implemented":false,"kind":"function","modifiers":[],"name":"proposePriceFor","nameLocation":"9797:15:12","nodeType":"FunctionDefinition","parameters":{"id":3266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3255,"mutability":"mutable","name":"proposer","nameLocation":"9830:8:12","nodeType":"VariableDeclaration","scope":3270,"src":"9822:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3254,"name":"address","nodeType":"ElementaryTypeName","src":"9822:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3257,"mutability":"mutable","name":"requester","nameLocation":"9856:9:12","nodeType":"VariableDeclaration","scope":3270,"src":"9848:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3256,"name":"address","nodeType":"ElementaryTypeName","src":"9848:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3259,"mutability":"mutable","name":"identifier","nameLocation":"9883:10:12","nodeType":"VariableDeclaration","scope":3270,"src":"9875:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9875:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3261,"mutability":"mutable","name":"timestamp","nameLocation":"9911:9:12","nodeType":"VariableDeclaration","scope":3270,"src":"9903:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3260,"name":"uint256","nodeType":"ElementaryTypeName","src":"9903:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3263,"mutability":"mutable","name":"ancillaryData","nameLocation":"9943:13:12","nodeType":"VariableDeclaration","scope":3270,"src":"9930:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3262,"name":"bytes","nodeType":"ElementaryTypeName","src":"9930:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3265,"mutability":"mutable","name":"proposedPrice","nameLocation":"9973:13:12","nodeType":"VariableDeclaration","scope":3270,"src":"9966:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3264,"name":"int256","nodeType":"ElementaryTypeName","src":"9966:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9812:180:12"},"returnParameters":{"id":3269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3268,"mutability":"mutable","name":"totalBond","nameLocation":"10025:9:12","nodeType":"VariableDeclaration","scope":3270,"src":"10017:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"10017:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10016:19:12"},"scope":3396,"src":"9788:248:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"documentation":{"id":3271,"nodeType":"StructuredDocumentation","src":"10042:586:12","text":" @notice Proposes a price value for an existing price request.\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @param proposedPrice price being proposed.\n @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\n the proposer once settled if the proposal is correct."},"functionSelector":"b8b4f908","id":3286,"implemented":false,"kind":"function","modifiers":[],"name":"proposePrice","nameLocation":"10642:12:12","nodeType":"FunctionDefinition","parameters":{"id":3282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3273,"mutability":"mutable","name":"requester","nameLocation":"10672:9:12","nodeType":"VariableDeclaration","scope":3286,"src":"10664:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3272,"name":"address","nodeType":"ElementaryTypeName","src":"10664:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3275,"mutability":"mutable","name":"identifier","nameLocation":"10699:10:12","nodeType":"VariableDeclaration","scope":3286,"src":"10691:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10691:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3277,"mutability":"mutable","name":"timestamp","nameLocation":"10727:9:12","nodeType":"VariableDeclaration","scope":3286,"src":"10719:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3276,"name":"uint256","nodeType":"ElementaryTypeName","src":"10719:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3279,"mutability":"mutable","name":"ancillaryData","nameLocation":"10759:13:12","nodeType":"VariableDeclaration","scope":3286,"src":"10746:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3278,"name":"bytes","nodeType":"ElementaryTypeName","src":"10746:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3281,"mutability":"mutable","name":"proposedPrice","nameLocation":"10789:13:12","nodeType":"VariableDeclaration","scope":3286,"src":"10782:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3280,"name":"int256","nodeType":"ElementaryTypeName","src":"10782:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"10654:154:12"},"returnParameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"totalBond","nameLocation":"10843:9:12","nodeType":"VariableDeclaration","scope":3286,"src":"10835:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3283,"name":"uint256","nodeType":"ElementaryTypeName","src":"10835:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10834:19:12"},"scope":3396,"src":"10633:221:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3287,"nodeType":"StructuredDocumentation","src":"10860:766:12","text":" @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\n receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\n @param disputer address to set as the disputer.\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\n the disputer once settled if the dispute was value (the proposal was incorrect)."},"functionSelector":"76c7823f","id":3302,"implemented":false,"kind":"function","modifiers":[],"name":"disputePriceFor","nameLocation":"11640:15:12","nodeType":"FunctionDefinition","parameters":{"id":3298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"disputer","nameLocation":"11673:8:12","nodeType":"VariableDeclaration","scope":3302,"src":"11665:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3288,"name":"address","nodeType":"ElementaryTypeName","src":"11665:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3291,"mutability":"mutable","name":"requester","nameLocation":"11699:9:12","nodeType":"VariableDeclaration","scope":3302,"src":"11691:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3290,"name":"address","nodeType":"ElementaryTypeName","src":"11691:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3293,"mutability":"mutable","name":"identifier","nameLocation":"11726:10:12","nodeType":"VariableDeclaration","scope":3302,"src":"11718:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11718:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3295,"mutability":"mutable","name":"timestamp","nameLocation":"11754:9:12","nodeType":"VariableDeclaration","scope":3302,"src":"11746:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3294,"name":"uint256","nodeType":"ElementaryTypeName","src":"11746:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3297,"mutability":"mutable","name":"ancillaryData","nameLocation":"11786:13:12","nodeType":"VariableDeclaration","scope":3302,"src":"11773:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3296,"name":"bytes","nodeType":"ElementaryTypeName","src":"11773:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11655:150:12"},"returnParameters":{"id":3301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3300,"mutability":"mutable","name":"totalBond","nameLocation":"11838:9:12","nodeType":"VariableDeclaration","scope":3302,"src":"11830:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3299,"name":"uint256","nodeType":"ElementaryTypeName","src":"11830:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11829:19:12"},"scope":3396,"src":"11631:218:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"documentation":{"id":3303,"nodeType":"StructuredDocumentation","src":"11855:587:12","text":" @notice Disputes a price value for an existing price request with an active proposal.\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\n the disputer once settled if the dispute was valid (the proposal was incorrect)."},"functionSelector":"fba7f1e3","id":3316,"implemented":false,"kind":"function","modifiers":[],"name":"disputePrice","nameLocation":"12456:12:12","nodeType":"FunctionDefinition","parameters":{"id":3312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3305,"mutability":"mutable","name":"requester","nameLocation":"12486:9:12","nodeType":"VariableDeclaration","scope":3316,"src":"12478:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3304,"name":"address","nodeType":"ElementaryTypeName","src":"12478:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3307,"mutability":"mutable","name":"identifier","nameLocation":"12513:10:12","nodeType":"VariableDeclaration","scope":3316,"src":"12505:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3306,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12505:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3309,"mutability":"mutable","name":"timestamp","nameLocation":"12541:9:12","nodeType":"VariableDeclaration","scope":3316,"src":"12533:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3308,"name":"uint256","nodeType":"ElementaryTypeName","src":"12533:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3311,"mutability":"mutable","name":"ancillaryData","nameLocation":"12573:13:12","nodeType":"VariableDeclaration","scope":3316,"src":"12560:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3310,"name":"bytes","nodeType":"ElementaryTypeName","src":"12560:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12468:124:12"},"returnParameters":{"id":3315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3314,"mutability":"mutable","name":"totalBond","nameLocation":"12627:9:12","nodeType":"VariableDeclaration","scope":3316,"src":"12619:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3313,"name":"uint256","nodeType":"ElementaryTypeName","src":"12619:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12618:19:12"},"scope":3396,"src":"12447:191:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3317,"nodeType":"StructuredDocumentation","src":"12644:515:12","text":" @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\n or settleable. Note: this method is not view so that this call may actually settle the price request if it\n hasn't been settled.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @return resolved price."},"functionSelector":"53b59239","id":3328,"implemented":false,"kind":"function","modifiers":[],"name":"settleAndGetPrice","nameLocation":"13173:17:12","nodeType":"FunctionDefinition","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3319,"mutability":"mutable","name":"identifier","nameLocation":"13208:10:12","nodeType":"VariableDeclaration","scope":3328,"src":"13200:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13200:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3321,"mutability":"mutable","name":"timestamp","nameLocation":"13236:9:12","nodeType":"VariableDeclaration","scope":3328,"src":"13228:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3320,"name":"uint256","nodeType":"ElementaryTypeName","src":"13228:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3323,"mutability":"mutable","name":"ancillaryData","nameLocation":"13268:13:12","nodeType":"VariableDeclaration","scope":3328,"src":"13255:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3322,"name":"bytes","nodeType":"ElementaryTypeName","src":"13255:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13190:97:12"},"returnParameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3328,"src":"13314:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3325,"name":"int256","nodeType":"ElementaryTypeName","src":"13314:6:12","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"13313:8:12"},"scope":3396,"src":"13164:158:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3329,"nodeType":"StructuredDocumentation","src":"13328:565:12","text":" @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @return payout the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes\n the returned bonds as well as additional rewards."},"functionSelector":"5e9a79a9","id":3342,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"13907:6:12","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3331,"mutability":"mutable","name":"requester","nameLocation":"13931:9:12","nodeType":"VariableDeclaration","scope":3342,"src":"13923:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3330,"name":"address","nodeType":"ElementaryTypeName","src":"13923:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3333,"mutability":"mutable","name":"identifier","nameLocation":"13958:10:12","nodeType":"VariableDeclaration","scope":3342,"src":"13950:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3332,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13950:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3335,"mutability":"mutable","name":"timestamp","nameLocation":"13986:9:12","nodeType":"VariableDeclaration","scope":3342,"src":"13978:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3334,"name":"uint256","nodeType":"ElementaryTypeName","src":"13978:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3337,"mutability":"mutable","name":"ancillaryData","nameLocation":"14018:13:12","nodeType":"VariableDeclaration","scope":3342,"src":"14005:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3336,"name":"bytes","nodeType":"ElementaryTypeName","src":"14005:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13913:124:12"},"returnParameters":{"id":3341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"payout","nameLocation":"14072:6:12","nodeType":"VariableDeclaration","scope":3342,"src":"14064:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"14064:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14063:16:12"},"scope":3396,"src":"13898:182:12","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3343,"nodeType":"StructuredDocumentation","src":"14086:429:12","text":" @notice Gets the current data structure containing all information about a price request.\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @return the Request data structure."},"functionSelector":"a9904f9b","id":3357,"implemented":false,"kind":"function","modifiers":[],"name":"getRequest","nameLocation":"14529:10:12","nodeType":"FunctionDefinition","parameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3345,"mutability":"mutable","name":"requester","nameLocation":"14557:9:12","nodeType":"VariableDeclaration","scope":3357,"src":"14549:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3344,"name":"address","nodeType":"ElementaryTypeName","src":"14549:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3347,"mutability":"mutable","name":"identifier","nameLocation":"14584:10:12","nodeType":"VariableDeclaration","scope":3357,"src":"14576:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3346,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14576:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3349,"mutability":"mutable","name":"timestamp","nameLocation":"14612:9:12","nodeType":"VariableDeclaration","scope":3357,"src":"14604:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3348,"name":"uint256","nodeType":"ElementaryTypeName","src":"14604:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3351,"mutability":"mutable","name":"ancillaryData","nameLocation":"14644:13:12","nodeType":"VariableDeclaration","scope":3357,"src":"14631:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3350,"name":"bytes","nodeType":"ElementaryTypeName","src":"14631:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14539:124:12"},"returnParameters":{"id":3356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3357,"src":"14693:14:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$3149_memory_ptr","typeString":"struct OptimisticOracleV2Interface.Request"},"typeName":{"id":3354,"nodeType":"UserDefinedTypeName","pathNode":{"id":3353,"name":"Request","nameLocations":["14693:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3149,"src":"14693:7:12"},"referencedDeclaration":3149,"src":"14693:7:12","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$3149_storage_ptr","typeString":"struct OptimisticOracleV2Interface.Request"}},"visibility":"internal"}],"src":"14692:16:12"},"scope":3396,"src":"14520:189:12","stateMutability":"view","virtual":true,"visibility":"public"},{"documentation":{"id":3358,"nodeType":"StructuredDocumentation","src":"14715:379:12","text":" @notice Returns the state of a price request.\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @return the State enum value."},"functionSelector":"ba4b930c","id":3372,"implemented":false,"kind":"function","modifiers":[],"name":"getState","nameLocation":"15108:8:12","nodeType":"FunctionDefinition","parameters":{"id":3367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3360,"mutability":"mutable","name":"requester","nameLocation":"15134:9:12","nodeType":"VariableDeclaration","scope":3372,"src":"15126:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3359,"name":"address","nodeType":"ElementaryTypeName","src":"15126:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3362,"mutability":"mutable","name":"identifier","nameLocation":"15161:10:12","nodeType":"VariableDeclaration","scope":3372,"src":"15153:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15153:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3364,"mutability":"mutable","name":"timestamp","nameLocation":"15189:9:12","nodeType":"VariableDeclaration","scope":3372,"src":"15181:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3363,"name":"uint256","nodeType":"ElementaryTypeName","src":"15181:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3366,"mutability":"mutable","name":"ancillaryData","nameLocation":"15221:13:12","nodeType":"VariableDeclaration","scope":3372,"src":"15208:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3365,"name":"bytes","nodeType":"ElementaryTypeName","src":"15208:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15116:124:12"},"returnParameters":{"id":3371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3372,"src":"15270:5:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_State_$3111","typeString":"enum OptimisticOracleV2Interface.State"},"typeName":{"id":3369,"nodeType":"UserDefinedTypeName","pathNode":{"id":3368,"name":"State","nameLocations":["15270:5:12"],"nodeType":"IdentifierPath","referencedDeclaration":3111,"src":"15270:5:12"},"referencedDeclaration":3111,"src":"15270:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_State_$3111","typeString":"enum OptimisticOracleV2Interface.State"}},"visibility":"internal"}],"src":"15269:7:12"},"scope":3396,"src":"15099:178:12","stateMutability":"view","virtual":true,"visibility":"public"},{"documentation":{"id":3373,"nodeType":"StructuredDocumentation","src":"15283:471:12","text":" @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\n @param requester sender of the initial price request.\n @param identifier price identifier to identify the existing request.\n @param timestamp timestamp to identify the existing request.\n @param ancillaryData ancillary data of the price being requested.\n @return true if price has resolved or settled, false otherwise."},"functionSelector":"bc58ccaa","id":3386,"implemented":false,"kind":"function","modifiers":[],"name":"hasPrice","nameLocation":"15768:8:12","nodeType":"FunctionDefinition","parameters":{"id":3382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3375,"mutability":"mutable","name":"requester","nameLocation":"15794:9:12","nodeType":"VariableDeclaration","scope":3386,"src":"15786:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3374,"name":"address","nodeType":"ElementaryTypeName","src":"15786:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3377,"mutability":"mutable","name":"identifier","nameLocation":"15821:10:12","nodeType":"VariableDeclaration","scope":3386,"src":"15813:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15813:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3379,"mutability":"mutable","name":"timestamp","nameLocation":"15849:9:12","nodeType":"VariableDeclaration","scope":3386,"src":"15841:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3378,"name":"uint256","nodeType":"ElementaryTypeName","src":"15841:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3381,"mutability":"mutable","name":"ancillaryData","nameLocation":"15881:13:12","nodeType":"VariableDeclaration","scope":3386,"src":"15868:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3380,"name":"bytes","nodeType":"ElementaryTypeName","src":"15868:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15776:124:12"},"returnParameters":{"id":3385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3386,"src":"15930:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3383,"name":"bool","nodeType":"ElementaryTypeName","src":"15930:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15929:6:12"},"scope":3396,"src":"15759:177:12","stateMutability":"view","virtual":true,"visibility":"public"},{"functionSelector":"af5d2f39","id":3395,"implemented":false,"kind":"function","modifiers":[],"name":"stampAncillaryData","nameLocation":"15951:18:12","nodeType":"FunctionDefinition","parameters":{"id":3391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3388,"mutability":"mutable","name":"ancillaryData","nameLocation":"15983:13:12","nodeType":"VariableDeclaration","scope":3395,"src":"15970:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3387,"name":"bytes","nodeType":"ElementaryTypeName","src":"15970:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3390,"mutability":"mutable","name":"requester","nameLocation":"16006:9:12","nodeType":"VariableDeclaration","scope":3395,"src":"15998:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3389,"name":"address","nodeType":"ElementaryTypeName","src":"15998:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15969:47:12"},"returnParameters":{"id":3394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3395,"src":"16078:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3392,"name":"bytes","nodeType":"ElementaryTypeName","src":"16078:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16077:14:12"},"scope":3396,"src":"15942:150:12","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3397,"src":"333:15761:12","usedErrors":[]}],"src":"42:16053:12"},"id":12},"@uma/core/contracts/oracle/interfaces/StoreInterface.sol":{"ast":{"absolutePath":"@uma/core/contracts/oracle/interfaces/StoreInterface.sol","exportedSymbols":{"FixedPoint":[2984],"IERC20":[341],"SafeMath":[1287],"SignedSafeMath":[1351],"StoreInterface":[3441]},"id":3442,"license":"AGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3398,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"42:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3399,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3442,"sourceUnit":342,"src":"67:56:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uma/core/contracts/common/implementation/FixedPoint.sol","file":"../../common/implementation/FixedPoint.sol","id":3400,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3442,"sourceUnit":2985,"src":"124:52:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StoreInterface","contractDependencies":[],"contractKind":"interface","documentation":{"id":3401,"nodeType":"StructuredDocumentation","src":"178:107:13","text":" @title Interface that allows financial contracts to pay oracle fees for their use of the system."},"fullyImplemented":false,"id":3441,"linearizedBaseContracts":[3441],"name":"StoreInterface","nameLocation":"296:14:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3402,"nodeType":"StructuredDocumentation","src":"317:130:13","text":" @notice Pays Oracle fees in ETH to the store.\n @dev To be used by contracts whose margin currency is ETH."},"functionSelector":"cd3a9b24","id":3405,"implemented":false,"kind":"function","modifiers":[],"name":"payOracleFees","nameLocation":"461:13:13","nodeType":"FunctionDefinition","parameters":{"id":3403,"nodeType":"ParameterList","parameters":[],"src":"474:2:13"},"returnParameters":{"id":3404,"nodeType":"ParameterList","parameters":[],"src":"493:0:13"},"scope":3441,"src":"452:42:13","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":3406,"nodeType":"StructuredDocumentation","src":"500:351:13","text":" @notice Pays oracle fees in the margin currency, erc20Address, to the store.\n @dev To be used if the margin currency is an ERC20 token rather than ETH.\n @param erc20Address address of the ERC20 token used to pay the fee.\n @param amount number of tokens to transfer. An approval for at least this amount must exist."},"functionSelector":"8659d232","id":3414,"implemented":false,"kind":"function","modifiers":[],"name":"payOracleFeesErc20","nameLocation":"865:18:13","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3408,"mutability":"mutable","name":"erc20Address","nameLocation":"892:12:13","nodeType":"VariableDeclaration","scope":3414,"src":"884:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3407,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3411,"mutability":"mutable","name":"amount","nameLocation":"935:6:13","nodeType":"VariableDeclaration","scope":3414,"src":"906:35:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_calldata_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":3410,"nodeType":"UserDefinedTypeName","pathNode":{"id":3409,"name":"FixedPoint.Unsigned","nameLocations":["906:10:13","917:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"906:19:13"},"referencedDeclaration":1370,"src":"906:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"883:59:13"},"returnParameters":{"id":3413,"nodeType":"ParameterList","parameters":[],"src":"951:0:13"},"scope":3441,"src":"856:96:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3415,"nodeType":"StructuredDocumentation","src":"958:597:13","text":" @notice Computes the regular oracle fees that a contract should pay for a period.\n @param startTime defines the beginning time from which the fee is paid.\n @param endTime end time until which the fee is paid.\n @param pfc \"profit from corruption\", or the maximum amount of margin currency that a\n token sponsor could extract from the contract through corrupting the price feed in their favor.\n @return regularFee amount owed for the duration from start to end time for the given pfc.\n @return latePenalty for paying the fee after the deadline."},"functionSelector":"74201feb","id":3431,"implemented":false,"kind":"function","modifiers":[],"name":"computeRegularFee","nameLocation":"1569:17:13","nodeType":"FunctionDefinition","parameters":{"id":3423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3417,"mutability":"mutable","name":"startTime","nameLocation":"1604:9:13","nodeType":"VariableDeclaration","scope":3431,"src":"1596:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3416,"name":"uint256","nodeType":"ElementaryTypeName","src":"1596:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3419,"mutability":"mutable","name":"endTime","nameLocation":"1631:7:13","nodeType":"VariableDeclaration","scope":3431,"src":"1623:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3418,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3422,"mutability":"mutable","name":"pfc","nameLocation":"1677:3:13","nodeType":"VariableDeclaration","scope":3431,"src":"1648:32:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_calldata_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":3421,"nodeType":"UserDefinedTypeName","pathNode":{"id":3420,"name":"FixedPoint.Unsigned","nameLocations":["1648:10:13","1659:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1648:19:13"},"referencedDeclaration":1370,"src":"1648:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"1586:100:13"},"returnParameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"regularFee","nameLocation":"1737:10:13","nodeType":"VariableDeclaration","scope":3431,"src":"1710:37:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":3425,"nodeType":"UserDefinedTypeName","pathNode":{"id":3424,"name":"FixedPoint.Unsigned","nameLocations":["1710:10:13","1721:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1710:19:13"},"referencedDeclaration":1370,"src":"1710:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"},{"constant":false,"id":3429,"mutability":"mutable","name":"latePenalty","nameLocation":"1776:11:13","nodeType":"VariableDeclaration","scope":3431,"src":"1749:38:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":3428,"nodeType":"UserDefinedTypeName","pathNode":{"id":3427,"name":"FixedPoint.Unsigned","nameLocations":["1749:10:13","1760:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"1749:19:13"},"referencedDeclaration":1370,"src":"1749:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"1709:79:13"},"scope":3441,"src":"1560:229:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3432,"nodeType":"StructuredDocumentation","src":"1795:191:13","text":" @notice Computes the final oracle fees that a contract should pay at settlement.\n @param currency token used to pay the final fee.\n @return finalFee amount due."},"functionSelector":"5b97aadd","id":3440,"implemented":false,"kind":"function","modifiers":[],"name":"computeFinalFee","nameLocation":"2000:15:13","nodeType":"FunctionDefinition","parameters":{"id":3435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3434,"mutability":"mutable","name":"currency","nameLocation":"2024:8:13","nodeType":"VariableDeclaration","scope":3440,"src":"2016:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3433,"name":"address","nodeType":"ElementaryTypeName","src":"2016:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2015:18:13"},"returnParameters":{"id":3439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3438,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3440,"src":"2057:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_memory_ptr","typeString":"struct FixedPoint.Unsigned"},"typeName":{"id":3437,"nodeType":"UserDefinedTypeName","pathNode":{"id":3436,"name":"FixedPoint.Unsigned","nameLocations":["2057:10:13","2068:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":1370,"src":"2057:19:13"},"referencedDeclaration":1370,"src":"2057:19:13","typeDescriptions":{"typeIdentifier":"t_struct$_Unsigned_$1370_storage_ptr","typeString":"struct FixedPoint.Unsigned"}},"visibility":"internal"}],"src":"2056:28:13"},"scope":3441,"src":"1991:94:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3442,"src":"286:1801:13","usedErrors":[]}],"src":"42:2046:13"},"id":13},"contracts/interfaces/DecentralistInterface.sol":{"ast":{"absolutePath":"contracts/interfaces/DecentralistInterface.sol","exportedSymbols":{"Address":[953],"Context":[975],"DecentralistInterface":[3688],"FinderInterface":[3030],"FixedPoint":[2984],"IERC20":[341],"IERC20Permit":[377],"Initializable":[263],"OptimisticOracleV2Interface":[3396],"Ownable":[112],"SafeERC20":[658],"SafeMath":[1287],"SignedSafeMath":[1351],"StoreInterface":[3441]},"id":3689,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3443,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:14"},{"absolutePath":"@openzeppelin/contracts/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts/proxy/utils/Initializable.sol","id":3444,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":264,"src":"60:63:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":659,"src":"125:65:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":342,"src":"192:56:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":113,"src":"250:52:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uma/core/contracts/oracle/interfaces/StoreInterface.sol","file":"@uma/core/contracts/oracle/interfaces/StoreInterface.sol","id":3448,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":3442,"src":"306:66:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol","file":"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol","id":3449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3689,"sourceUnit":3397,"src":"374:79:14","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3450,"name":"Initializable","nameLocations":["500:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":263,"src":"500:13:14"},"id":3451,"nodeType":"InheritanceSpecifier","src":"500:13:14"},{"baseName":{"id":3452,"name":"Ownable","nameLocations":["515:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"515:7:14"},"id":3453,"nodeType":"InheritanceSpecifier","src":"515:7:14"}],"canonicalName":"DecentralistInterface","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":3688,"linearizedBaseContracts":[3688,112,975,263],"name":"DecentralistInterface","nameLocation":"475:21:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3457,"libraryName":{"id":3454,"name":"SafeERC20","nameLocations":["536:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":658,"src":"536:9:14"},"nodeType":"UsingForDirective","src":"530:27:14","typeName":{"id":3456,"nodeType":"UserDefinedTypeName","pathNode":{"id":3455,"name":"IERC20","nameLocations":["550:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"550:6:14"},"referencedDeclaration":341,"src":"550:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}}},{"anonymous":false,"eventSelector":"8f95c4957ee34edd4a485a670aa52f5a209c00623e1a6ede185a009a87e605b0","id":3466,"name":"RevisionProposed","nameLocation":"571:16:14","nodeType":"EventDefinition","parameters":{"id":3465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3459,"indexed":true,"mutability":"mutable","name":"revisionId","nameLocation":"614:10:14","nodeType":"VariableDeclaration","scope":3466,"src":"598:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3458,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3461,"indexed":false,"mutability":"mutable","name":"proposedValue","nameLocation":"642:13:14","nodeType":"VariableDeclaration","scope":3466,"src":"635:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3460,"name":"int256","nodeType":"ElementaryTypeName","src":"635:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3464,"indexed":false,"mutability":"mutable","name":"pendingAddresses","nameLocation":"676:16:14","nodeType":"VariableDeclaration","scope":3466,"src":"666:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3462,"name":"address","nodeType":"ElementaryTypeName","src":"666:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3463,"nodeType":"ArrayTypeName","src":"666:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"587:112:14"},"src":"565:135:14"},{"anonymous":false,"eventSelector":"5f1087556d42c4c3af637fe0024e1c4ab4274c137e1e40d1e005992dd9fc8d51","id":3472,"name":"RevisionApproved","nameLocation":"712:16:14","nodeType":"EventDefinition","parameters":{"id":3471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"indexed":true,"mutability":"mutable","name":"revisionId","nameLocation":"745:10:14","nodeType":"VariableDeclaration","scope":3472,"src":"729:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"729:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3470,"indexed":false,"mutability":"mutable","name":"proposedValue","nameLocation":"764:13:14","nodeType":"VariableDeclaration","scope":3472,"src":"757:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3469,"name":"int256","nodeType":"ElementaryTypeName","src":"757:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"728:50:14"},"src":"706:73:14"},{"anonymous":false,"eventSelector":"e796aea3ecdb85837e12c602f67420034db2f1f547e02e2af5d5210af31b088d","id":3478,"name":"RevisionRejected","nameLocation":"791:16:14","nodeType":"EventDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3474,"indexed":true,"mutability":"mutable","name":"revisionId","nameLocation":"824:10:14","nodeType":"VariableDeclaration","scope":3478,"src":"808:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3473,"name":"uint256","nodeType":"ElementaryTypeName","src":"808:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3476,"indexed":false,"mutability":"mutable","name":"proposedValue","nameLocation":"843:13:14","nodeType":"VariableDeclaration","scope":3478,"src":"836:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3475,"name":"int256","nodeType":"ElementaryTypeName","src":"836:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"807:50:14"},"src":"785:73:14"},{"anonymous":false,"eventSelector":"6446f5d68da210914a3be3112d8175160cfcaab4b3c6a955bbcea6c0c0e94aa5","id":3487,"name":"RevisionExecuted","nameLocation":"870:16:14","nodeType":"EventDefinition","parameters":{"id":3486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"indexed":true,"mutability":"mutable","name":"revisionId","nameLocation":"913:10:14","nodeType":"VariableDeclaration","scope":3487,"src":"897:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3479,"name":"uint256","nodeType":"ElementaryTypeName","src":"897:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3482,"indexed":false,"mutability":"mutable","name":"proposedValue","nameLocation":"941:13:14","nodeType":"VariableDeclaration","scope":3487,"src":"934:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3481,"name":"int256","nodeType":"ElementaryTypeName","src":"934:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3485,"indexed":false,"mutability":"mutable","name":"revisedAddresses","nameLocation":"975:16:14","nodeType":"VariableDeclaration","scope":3487,"src":"965:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3483,"name":"address","nodeType":"ElementaryTypeName","src":"965:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3484,"nodeType":"ArrayTypeName","src":"965:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"886:112:14"},"src":"864:135:14"},{"anonymous":false,"eventSelector":"067def216f0ef603ed8175482f6240978b15c9dc7efd8e1ac4bd3a743787a5b6","id":3493,"name":"RewardsSet","nameLocation":"1013:10:14","nodeType":"EventDefinition","parameters":{"id":3492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3489,"indexed":false,"mutability":"mutable","name":"additionReward","nameLocation":"1032:14:14","nodeType":"VariableDeclaration","scope":3493,"src":"1024:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3488,"name":"uint256","nodeType":"ElementaryTypeName","src":"1024:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3491,"indexed":false,"mutability":"mutable","name":"removalReward","nameLocation":"1056:13:14","nodeType":"VariableDeclaration","scope":3493,"src":"1048:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3490,"name":"uint256","nodeType":"ElementaryTypeName","src":"1048:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1023:47:14"},"src":"1007:64:14"},{"anonymous":false,"eventSelector":"e5e4fe1ed302905b2067dd5af3ef8c34bc829afc97a52f95dd96d97d1ee4351b","id":3497,"name":"LivenessSet","nameLocation":"1083:11:14","nodeType":"EventDefinition","parameters":{"id":3496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3495,"indexed":false,"mutability":"mutable","name":"liveness","nameLocation":"1102:8:14","nodeType":"VariableDeclaration","scope":3497,"src":"1095:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3494,"name":"uint64","nodeType":"ElementaryTypeName","src":"1095:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1094:17:14"},"src":"1077:35:14"},{"anonymous":false,"eventSelector":"1b44689fb73c0c9cdf591d534287488fc7959fd3647346821063a3e567ec9a99","id":3501,"name":"BondSet","nameLocation":"1124:7:14","nodeType":"EventDefinition","parameters":{"id":3500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3499,"indexed":false,"mutability":"mutable","name":"bondAmount","nameLocation":"1140:10:14","nodeType":"VariableDeclaration","scope":3501,"src":"1132:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3498,"name":"uint256","nodeType":"ElementaryTypeName","src":"1132:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1131:20:14"},"src":"1118:34:14"},{"functionSelector":"7dc0d1d0","id":3507,"implemented":false,"kind":"function","modifiers":[],"name":"oracle","nameLocation":"1169:6:14","nodeType":"FunctionDefinition","parameters":{"id":3502,"nodeType":"ParameterList","parameters":[],"src":"1175:2:14"},"returnParameters":{"id":3506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3507,"src":"1245:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OptimisticOracleV2Interface_$3396","typeString":"contract OptimisticOracleV2Interface"},"typeName":{"id":3504,"nodeType":"UserDefinedTypeName","pathNode":{"id":3503,"name":"OptimisticOracleV2Interface","nameLocations":["1245:27:14"],"nodeType":"IdentifierPath","referencedDeclaration":3396,"src":"1245:27:14"},"referencedDeclaration":3396,"src":"1245:27:14","typeDescriptions":{"typeIdentifier":"t_contract$_OptimisticOracleV2Interface_$3396","typeString":"contract OptimisticOracleV2Interface"}},"visibility":"internal"}],"src":"1244:29:14"},"scope":3688,"src":"1160:114:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"975057e7","id":3513,"implemented":false,"kind":"function","modifiers":[],"name":"store","nameLocation":"1291:5:14","nodeType":"FunctionDefinition","parameters":{"id":3508,"nodeType":"ParameterList","parameters":[],"src":"1296:2:14"},"returnParameters":{"id":3512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3513,"src":"1330:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_StoreInterface_$3441","typeString":"contract StoreInterface"},"typeName":{"id":3510,"nodeType":"UserDefinedTypeName","pathNode":{"id":3509,"name":"StoreInterface","nameLocations":["1330:14:14"],"nodeType":"IdentifierPath","referencedDeclaration":3441,"src":"1330:14:14"},"referencedDeclaration":3441,"src":"1330:14:14","typeDescriptions":{"typeIdentifier":"t_contract$_StoreInterface_$3441","typeString":"contract StoreInterface"}},"visibility":"internal"}],"src":"1329:16:14"},"scope":3688,"src":"1282:64:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"b9a3c84c","id":3519,"implemented":false,"kind":"function","modifiers":[],"name":"finder","nameLocation":"1363:6:14","nodeType":"FunctionDefinition","parameters":{"id":3514,"nodeType":"ParameterList","parameters":[],"src":"1369:2:14"},"returnParameters":{"id":3518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3519,"src":"1403:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_FinderInterface_$3030","typeString":"contract FinderInterface"},"typeName":{"id":3516,"nodeType":"UserDefinedTypeName","pathNode":{"id":3515,"name":"FinderInterface","nameLocations":["1403:15:14"],"nodeType":"IdentifierPath","referencedDeclaration":3030,"src":"1403:15:14"},"referencedDeclaration":3030,"src":"1403:15:14","typeDescriptions":{"typeIdentifier":"t_contract$_FinderInterface_$3030","typeString":"contract FinderInterface"}},"visibility":"internal"}],"src":"1402:17:14"},"scope":3688,"src":"1354:66:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"5cae7fb5","id":3524,"implemented":false,"kind":"function","modifiers":[],"name":"fixedAncillaryData","nameLocation":"1437:18:14","nodeType":"FunctionDefinition","parameters":{"id":3520,"nodeType":"ParameterList","parameters":[],"src":"1455:2:14"},"returnParameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3524,"src":"1489:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3521,"name":"bytes","nodeType":"ElementaryTypeName","src":"1489:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1488:14:14"},"scope":3688,"src":"1428:75:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"4a79d50c","id":3529,"implemented":false,"kind":"function","modifiers":[],"name":"title","nameLocation":"1520:5:14","nodeType":"FunctionDefinition","parameters":{"id":3525,"nodeType":"ParameterList","parameters":[],"src":"1525:2:14"},"returnParameters":{"id":3528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3527,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3529,"src":"1559:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3526,"name":"string","nodeType":"ElementaryTypeName","src":"1559:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1558:15:14"},"scope":3688,"src":"1511:63:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"80f323a7","id":3534,"implemented":false,"kind":"function","modifiers":[],"name":"bondAmount","nameLocation":"1591:10:14","nodeType":"FunctionDefinition","parameters":{"id":3530,"nodeType":"ParameterList","parameters":[],"src":"1601:2:14"},"returnParameters":{"id":3533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3534,"src":"1635:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"1635:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1634:9:14"},"scope":3688,"src":"1582:62:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"fc0c546a","id":3540,"implemented":false,"kind":"function","modifiers":[],"name":"token","nameLocation":"1661:5:14","nodeType":"FunctionDefinition","parameters":{"id":3535,"nodeType":"ParameterList","parameters":[],"src":"1666:2:14"},"returnParameters":{"id":3539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3540,"src":"1700:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"},"typeName":{"id":3537,"nodeType":"UserDefinedTypeName","pathNode":{"id":3536,"name":"IERC20","nameLocations":["1700:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":341,"src":"1700:6:14"},"referencedDeclaration":341,"src":"1700:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$341","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1699:8:14"},"scope":3688,"src":"1652:56:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"8dee967e","id":3545,"implemented":false,"kind":"function","modifiers":[],"name":"additionReward","nameLocation":"1725:14:14","nodeType":"FunctionDefinition","parameters":{"id":3541,"nodeType":"ParameterList","parameters":[],"src":"1739:2:14"},"returnParameters":{"id":3544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3545,"src":"1773:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1773:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1772:9:14"},"scope":3688,"src":"1716:66:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"c207ec6e","id":3550,"implemented":false,"kind":"function","modifiers":[],"name":"removalReward","nameLocation":"1799:13:14","nodeType":"FunctionDefinition","parameters":{"id":3546,"nodeType":"ParameterList","parameters":[],"src":"1812:2:14"},"returnParameters":{"id":3549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3550,"src":"1846:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3547,"name":"uint256","nodeType":"ElementaryTypeName","src":"1846:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1845:9:14"},"scope":3688,"src":"1790:65:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"6ad0690a","id":3555,"implemented":false,"kind":"function","modifiers":[],"name":"liveness","nameLocation":"1872:8:14","nodeType":"FunctionDefinition","parameters":{"id":3551,"nodeType":"ParameterList","parameters":[],"src":"1880:2:14"},"returnParameters":{"id":3554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3555,"src":"1914:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3552,"name":"uint64","nodeType":"ElementaryTypeName","src":"1914:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1913:8:14"},"scope":3688,"src":"1863:59:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"91152f10","id":3560,"implemented":false,"kind":"function","modifiers":[],"name":"minimumLiveness","nameLocation":"1939:15:14","nodeType":"FunctionDefinition","parameters":{"id":3556,"nodeType":"ParameterList","parameters":[],"src":"1954:2:14"},"returnParameters":{"id":3559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3560,"src":"1988:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3557,"name":"uint64","nodeType":"ElementaryTypeName","src":"1988:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1987:8:14"},"scope":3688,"src":"1930:66:14","stateMutability":"view","virtual":true,"visibility":"external"},{"canonicalName":"DecentralistInterface.Status","id":3566,"members":[{"id":3561,"name":"Invalid","nameLocation":"2027:7:14","nodeType":"EnumValue","src":"2027:7:14"},{"id":3562,"name":"Pending","nameLocation":"2045:7:14","nodeType":"EnumValue","src":"2045:7:14"},{"id":3563,"name":"Approved","nameLocation":"2063:8:14","nodeType":"EnumValue","src":"2063:8:14"},{"id":3564,"name":"Rejected","nameLocation":"2082:8:14","nodeType":"EnumValue","src":"2082:8:14"},{"id":3565,"name":"Executed","nameLocation":"2101:8:14","nodeType":"EnumValue","src":"2101:8:14"}],"name":"Status","nameLocation":"2009:6:14","nodeType":"EnumDefinition","src":"2004:112:14"},{"canonicalName":"DecentralistInterface.Revision","id":3576,"members":[{"constant":false,"id":3568,"mutability":"mutable","name":"proposer","nameLocation":"2159:8:14","nodeType":"VariableDeclaration","scope":3576,"src":"2151:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3567,"name":"address","nodeType":"ElementaryTypeName","src":"2151:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3570,"mutability":"mutable","name":"addressesHash","nameLocation":"2186:13:14","nodeType":"VariableDeclaration","scope":3576,"src":"2178:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2178:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3572,"mutability":"mutable","name":"proposedValue","nameLocation":"2217:13:14","nodeType":"VariableDeclaration","scope":3576,"src":"2210:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3571,"name":"int256","nodeType":"ElementaryTypeName","src":"2210:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3575,"mutability":"mutable","name":"status","nameLocation":"2248:6:14","nodeType":"VariableDeclaration","scope":3576,"src":"2241:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$3566","typeString":"enum DecentralistInterface.Status"},"typeName":{"id":3574,"nodeType":"UserDefinedTypeName","pathNode":{"id":3573,"name":"Status","nameLocations":["2241:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":3566,"src":"2241:6:14"},"referencedDeclaration":3566,"src":"2241:6:14","typeDescriptions":{"typeIdentifier":"t_enum$_Status_$3566","typeString":"enum DecentralistInterface.Status"}},"visibility":"internal"}],"name":"Revision","nameLocation":"2131:8:14","nodeType":"StructDefinition","scope":3688,"src":"2124:138:14","visibility":"public"},{"functionSelector":"0ef486d1","id":3584,"implemented":false,"kind":"function","modifiers":[],"name":"revisions","nameLocation":"2322:9:14","nodeType":"FunctionDefinition","parameters":{"id":3579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3578,"mutability":"mutable","name":"RevisionId","nameLocation":"2340:10:14","nodeType":"VariableDeclaration","scope":3584,"src":"2332:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3577,"name":"uint256","nodeType":"ElementaryTypeName","src":"2332:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2331:20:14"},"returnParameters":{"id":3583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3584,"src":"2419:15:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Revision_$3576_memory_ptr","typeString":"struct DecentralistInterface.Revision"},"typeName":{"id":3581,"nodeType":"UserDefinedTypeName","pathNode":{"id":3580,"name":"Revision","nameLocations":["2419:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":3576,"src":"2419:8:14"},"referencedDeclaration":3576,"src":"2419:8:14","typeDescriptions":{"typeIdentifier":"t_struct$_Revision_$3576_storage_ptr","typeString":"struct DecentralistInterface.Revision"}},"visibility":"internal"}],"src":"2418:17:14"},"scope":3688,"src":"2313:123:14","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"6f626eb3","id":3591,"implemented":false,"kind":"function","modifiers":[],"name":"onList","nameLocation":"2504:6:14","nodeType":"FunctionDefinition","parameters":{"id":3587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3591,"src":"2511:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3585,"name":"address","nodeType":"ElementaryTypeName","src":"2511:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2510:9:14"},"returnParameters":{"id":3590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3589,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3591,"src":"2551:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3588,"name":"bool","nodeType":"ElementaryTypeName","src":"2551:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2550:6:14"},"scope":3688,"src":"2495:62:14","stateMutability":"view","virtual":true,"visibility":"external"},{"documentation":{"id":3592,"nodeType":"StructuredDocumentation","src":"2565:1109:14","text":" @notice Initializes the contract.\n @param _finder The address of UMA Finder contract. This is set in the DecentralistProxyFactory constructor.\n @param _listCriteria Criteria for what addresses should be included on the list. Can be on-chain text or a link to IPFS.\n @param _title Short title for the list.\n @param _token The address of the token currency used for this contract. Must be on UMA's collateral whitelist.\n @param _bondAmount Additional bond required, beyond the final fee.\n @param _additionReward Reward per address successfully added to the list, paid by the contract to the proposer.\n @param _removalReward Reward per address successfully removed from the list, paid by the contract to the proposer.\n @param _liveness The period, in seconds, in which a proposal can be disputed.\n @param _minimumLiveness The minimum allowable liveness period, in seconds.\n @param _owner Owner of the contract can remove funds from the contract and adjust reward rates. Set to the 0 address to make the contract 'public'."},"functionSelector":"74881462","id":3615,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"3689:10:14","nodeType":"FunctionDefinition","parameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3594,"mutability":"mutable","name":"_finder","nameLocation":"3718:7:14","nodeType":"VariableDeclaration","scope":3615,"src":"3710:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3593,"name":"address","nodeType":"ElementaryTypeName","src":"3710:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3596,"mutability":"mutable","name":"_listCriteria","nameLocation":"3749:13:14","nodeType":"VariableDeclaration","scope":3615,"src":"3736:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3595,"name":"bytes","nodeType":"ElementaryTypeName","src":"3736:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3598,"mutability":"mutable","name":"_title","nameLocation":"3787:6:14","nodeType":"VariableDeclaration","scope":3615,"src":"3773:20:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3597,"name":"string","nodeType":"ElementaryTypeName","src":"3773:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3600,"mutability":"mutable","name":"_token","nameLocation":"3812:6:14","nodeType":"VariableDeclaration","scope":3615,"src":"3804:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3599,"name":"address","nodeType":"ElementaryTypeName","src":"3804:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3602,"mutability":"mutable","name":"_bondAmount","nameLocation":"3837:11:14","nodeType":"VariableDeclaration","scope":3615,"src":"3829:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3601,"name":"uint256","nodeType":"ElementaryTypeName","src":"3829:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3604,"mutability":"mutable","name":"_additionReward","nameLocation":"3867:15:14","nodeType":"VariableDeclaration","scope":3615,"src":"3859:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3603,"name":"uint256","nodeType":"ElementaryTypeName","src":"3859:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3606,"mutability":"mutable","name":"_removalReward","nameLocation":"3901:14:14","nodeType":"VariableDeclaration","scope":3615,"src":"3893:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3605,"name":"uint256","nodeType":"ElementaryTypeName","src":"3893:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3608,"mutability":"mutable","name":"_liveness","nameLocation":"3933:9:14","nodeType":"VariableDeclaration","scope":3615,"src":"3926:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3607,"name":"uint64","nodeType":"ElementaryTypeName","src":"3926:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"_minimumLiveness","nameLocation":"3960:16:14","nodeType":"VariableDeclaration","scope":3615,"src":"3953:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3609,"name":"uint64","nodeType":"ElementaryTypeName","src":"3953:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"_owner","nameLocation":"3995:6:14","nodeType":"VariableDeclaration","scope":3615,"src":"3987:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3611,"name":"address","nodeType":"ElementaryTypeName","src":"3987:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3699:309:14"},"returnParameters":{"id":3614,"nodeType":"ParameterList","parameters":[],"src":"4025:0:14"},"scope":3688,"src":"3680:346:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3616,"nodeType":"StructuredDocumentation","src":"4034:389:14","text":" @notice Proposes addresses to add or remove from the list.\n @param _value Indicates if the proposed revision is adding or removing addresses. 0 = remove, 1e18 = add.\n @param _addresses Array of addresses for the proposed revision.\n @dev Caller must have approved this contract to spend the total bond amount of the contract's token before calling."},"functionSelector":"ec40ad51","id":3624,"implemented":false,"kind":"function","modifiers":[],"name":"proposeRevision","nameLocation":"4438:15:14","nodeType":"FunctionDefinition","parameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3618,"mutability":"mutable","name":"_value","nameLocation":"4461:6:14","nodeType":"VariableDeclaration","scope":3624,"src":"4454:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3617,"name":"int256","nodeType":"ElementaryTypeName","src":"4454:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3621,"mutability":"mutable","name":"_addresses","nameLocation":"4488:10:14","nodeType":"VariableDeclaration","scope":3624,"src":"4469:29:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3619,"name":"address","nodeType":"ElementaryTypeName","src":"4469:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3620,"nodeType":"ArrayTypeName","src":"4469:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4453:46:14"},"returnParameters":{"id":3623,"nodeType":"ParameterList","parameters":[],"src":"4534:0:14"},"scope":3688,"src":"4429:106:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3625,"nodeType":"StructuredDocumentation","src":"4543:331:14","text":" @notice Callback function called upon oracle data settlement to update the Revision status to Approved or Rejected.\n @param timestamp Timestamp to identify the existing request.\n @param ancillaryData Ancillary data of the data being requested.\n @param value Value returned from the oracle."},"functionSelector":"04cc1fd5","id":3636,"implemented":false,"kind":"function","modifiers":[],"name":"priceSettled","nameLocation":"4889:12:14","nodeType":"FunctionDefinition","parameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3636,"src":"4912:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4912:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3629,"mutability":"mutable","name":"timestamp","nameLocation":"4955:9:14","nodeType":"VariableDeclaration","scope":3636,"src":"4947:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3628,"name":"uint256","nodeType":"ElementaryTypeName","src":"4947:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3631,"mutability":"mutable","name":"ancillaryData","nameLocation":"4988:13:14","nodeType":"VariableDeclaration","scope":3636,"src":"4975:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3630,"name":"bytes","nodeType":"ElementaryTypeName","src":"4975:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3633,"mutability":"mutable","name":"value","nameLocation":"5019:5:14","nodeType":"VariableDeclaration","scope":3636,"src":"5012:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3632,"name":"int256","nodeType":"ElementaryTypeName","src":"5012:6:14","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4901:130:14"},"returnParameters":{"id":3635,"nodeType":"ParameterList","parameters":[],"src":"5048:0:14"},"scope":3688,"src":"4880:169:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3637,"nodeType":"StructuredDocumentation","src":"5057:374:14","text":" @notice Executes approved revisions by revising the list and paying out rewards to the proposer.\n @param _revisionId ID of revision to be executed. If Revision submitted does not have status Approved, tx will revert.\n @param _addresses Address array that matches the array logged in the RevisionProposed event for the provided _revisionId."},"functionSelector":"fee53ab6","id":3645,"implemented":false,"kind":"function","modifiers":[],"name":"executeRevision","nameLocation":"5446:15:14","nodeType":"FunctionDefinition","parameters":{"id":3643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3639,"mutability":"mutable","name":"_revisionId","nameLocation":"5470:11:14","nodeType":"VariableDeclaration","scope":3645,"src":"5462:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3638,"name":"uint256","nodeType":"ElementaryTypeName","src":"5462:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3642,"mutability":"mutable","name":"_addresses","nameLocation":"5502:10:14","nodeType":"VariableDeclaration","scope":3645,"src":"5483:29:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3640,"name":"address","nodeType":"ElementaryTypeName","src":"5483:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3641,"nodeType":"ArrayTypeName","src":"5483:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"5461:52:14"},"returnParameters":{"id":3644,"nodeType":"ParameterList","parameters":[],"src":"5539:0:14"},"scope":3688,"src":"5437:103:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3646,"nodeType":"StructuredDocumentation","src":"5548:200:14","text":" @notice Allows owner to withdraw the default tokens from the contract.\n @param recipient The recipient of the tokens.\n @param amount The amount of tokens to to send."},"functionSelector":"f3fef3a3","id":3653,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"5763:8:14","nodeType":"FunctionDefinition","parameters":{"id":3651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3648,"mutability":"mutable","name":"recipient","nameLocation":"5780:9:14","nodeType":"VariableDeclaration","scope":3653,"src":"5772:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3647,"name":"address","nodeType":"ElementaryTypeName","src":"5772:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3650,"mutability":"mutable","name":"amount","nameLocation":"5799:6:14","nodeType":"VariableDeclaration","scope":3653,"src":"5791:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3649,"name":"uint256","nodeType":"ElementaryTypeName","src":"5791:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5771:35:14"},"returnParameters":{"id":3652,"nodeType":"ParameterList","parameters":[],"src":"5823:0:14"},"scope":3688,"src":"5754:70:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3654,"nodeType":"StructuredDocumentation","src":"5832:267:14","text":" @notice Allows owner to rescue tokens sent accidentally to the contract.\n @param recipient The recipient of the tokens.\n @param amount The amount of tokens to to send.\n @param _token The contract address of the token to send."},"functionSelector":"8671d23b","id":3663,"implemented":false,"kind":"function","modifiers":[],"name":"rescue","nameLocation":"6114:6:14","nodeType":"FunctionDefinition","parameters":{"id":3661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3656,"mutability":"mutable","name":"recipient","nameLocation":"6139:9:14","nodeType":"VariableDeclaration","scope":3663,"src":"6131:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3655,"name":"address","nodeType":"ElementaryTypeName","src":"6131:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3658,"mutability":"mutable","name":"amount","nameLocation":"6167:6:14","nodeType":"VariableDeclaration","scope":3663,"src":"6159:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3657,"name":"uint256","nodeType":"ElementaryTypeName","src":"6159:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3660,"mutability":"mutable","name":"_token","nameLocation":"6192:6:14","nodeType":"VariableDeclaration","scope":3663,"src":"6184:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3659,"name":"address","nodeType":"ElementaryTypeName","src":"6184:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6120:85:14"},"returnParameters":{"id":3662,"nodeType":"ParameterList","parameters":[],"src":"6222:0:14"},"scope":3688,"src":"6105:118:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3664,"nodeType":"StructuredDocumentation","src":"6231:262:14","text":" @notice Sets the rewards for successful revisions.\n @param _additionReward Reward to proposer per address successfully added to the list.\n @param _removalReward Reward to proposer per address successfully removed from the list."},"functionSelector":"654e51e7","id":3671,"implemented":false,"kind":"function","modifiers":[],"name":"setRewards","nameLocation":"6508:10:14","nodeType":"FunctionDefinition","parameters":{"id":3669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3666,"mutability":"mutable","name":"_additionReward","nameLocation":"6527:15:14","nodeType":"VariableDeclaration","scope":3671,"src":"6519:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3665,"name":"uint256","nodeType":"ElementaryTypeName","src":"6519:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3668,"mutability":"mutable","name":"_removalReward","nameLocation":"6552:14:14","nodeType":"VariableDeclaration","scope":3671,"src":"6544:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3667,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6518:49:14"},"returnParameters":{"id":3670,"nodeType":"ParameterList","parameters":[],"src":"6593:0:14"},"scope":3688,"src":"6499:95:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3672,"nodeType":"StructuredDocumentation","src":"6602:164:14","text":" @notice Sets the bond amount for revisions.\n @param _bondAmount Amount of the bond token that will need to be paid for future proposals."},"functionSelector":"259bd920","id":3677,"implemented":false,"kind":"function","modifiers":[],"name":"setBond","nameLocation":"6781:7:14","nodeType":"FunctionDefinition","parameters":{"id":3675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3674,"mutability":"mutable","name":"_bondAmount","nameLocation":"6797:11:14","nodeType":"VariableDeclaration","scope":3677,"src":"6789:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3673,"name":"uint256","nodeType":"ElementaryTypeName","src":"6789:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6788:21:14"},"returnParameters":{"id":3676,"nodeType":"ParameterList","parameters":[],"src":"6826:0:14"},"scope":3688,"src":"6772:55:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3678,"nodeType":"StructuredDocumentation","src":"6835:199:14","text":" @notice Sets the liveness for future revisions. This is the amount of delay before a proposal is approved by\n default.\n @param _liveness Liveness to set in seconds."},"functionSelector":"3c4432f1","id":3683,"implemented":false,"kind":"function","modifiers":[],"name":"setLiveness","nameLocation":"7049:11:14","nodeType":"FunctionDefinition","parameters":{"id":3681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3680,"mutability":"mutable","name":"_liveness","nameLocation":"7068:9:14","nodeType":"VariableDeclaration","scope":3683,"src":"7061:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3679,"name":"uint64","nodeType":"ElementaryTypeName","src":"7061:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7060:18:14"},"returnParameters":{"id":3682,"nodeType":"ParameterList","parameters":[],"src":"7095:0:14"},"scope":3688,"src":"7040:56:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3684,"nodeType":"StructuredDocumentation","src":"7104:250:14","text":" @notice This pulls in the most up-to-date Optimistic Oracle contract.\n @dev If a new OptimisticOracle is added and this is run between a revision's introduction and execution, the\n proposal will become unexecutable."},"functionSelector":"8a301adc","id":3687,"implemented":false,"kind":"function","modifiers":[],"name":"syncContracts","nameLocation":"7369:13:14","nodeType":"FunctionDefinition","parameters":{"id":3685,"nodeType":"ParameterList","parameters":[],"src":"7382:2:14"},"returnParameters":{"id":3686,"nodeType":"ParameterList","parameters":[],"src":"7399:0:14"},"scope":3688,"src":"7360:40:14","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":3689,"src":"457:6946:14","usedErrors":[]}],"src":"33:7372:14"},"id":14},"contracts/interfaces/DecentralistProxyFactoryInterface.sol":{"ast":{"absolutePath":"contracts/interfaces/DecentralistProxyFactoryInterface.sol","exportedSymbols":{"AddressWhitelistInterface":[3010],"DecentralistProxyFactoryInterface":[3758],"FinderInterface":[3030]},"id":3759,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3690,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"33:23:15"},{"absolutePath":"@uma/core/contracts/oracle/interfaces/FinderInterface.sol","file":"@uma/core/contracts/oracle/interfaces/FinderInterface.sol","id":3691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3759,"sourceUnit":3031,"src":"60:67:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol","file":"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol","id":3692,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3759,"sourceUnit":3011,"src":"129:77:15","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"DecentralistProxyFactoryInterface","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":3758,"linearizedBaseContracts":[3758],"name":"DecentralistProxyFactoryInterface","nameLocation":"228:33:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"91152f10","id":3697,"implemented":false,"kind":"function","modifiers":[],"name":"minimumLiveness","nameLocation":"278:15:15","nodeType":"FunctionDefinition","parameters":{"id":3693,"nodeType":"ParameterList","parameters":[],"src":"293:2:15"},"returnParameters":{"id":3696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3695,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3697,"src":"327:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3694,"name":"uint64","nodeType":"ElementaryTypeName","src":"327:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"326:8:15"},"scope":3758,"src":"269:66:15","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"99e7d056","id":3702,"implemented":false,"kind":"function","modifiers":[],"name":"implementationContract","nameLocation":"352:22:15","nodeType":"FunctionDefinition","parameters":{"id":3698,"nodeType":"ParameterList","parameters":[],"src":"374:2:15"},"returnParameters":{"id":3701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3702,"src":"408:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3699,"name":"address","nodeType":"ElementaryTypeName","src":"408:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"407:9:15"},"scope":3758,"src":"343:74:15","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"61437f88","id":3708,"implemented":false,"kind":"function","modifiers":[],"name":"allClones","nameLocation":"434:9:15","nodeType":"FunctionDefinition","parameters":{"id":3703,"nodeType":"ParameterList","parameters":[],"src":"443:2:15"},"returnParameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3708,"src":"477:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3704,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3705,"nodeType":"ArrayTypeName","src":"477:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"476:18:15"},"scope":3758,"src":"425:70:15","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"b9a3c84c","id":3714,"implemented":false,"kind":"function","modifiers":[],"name":"finder","nameLocation":"512:6:15","nodeType":"FunctionDefinition","parameters":{"id":3709,"nodeType":"ParameterList","parameters":[],"src":"518:2:15"},"returnParameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3714,"src":"552:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_FinderInterface_$3030","typeString":"contract FinderInterface"},"typeName":{"id":3711,"nodeType":"UserDefinedTypeName","pathNode":{"id":3710,"name":"FinderInterface","nameLocations":["552:15:15"],"nodeType":"IdentifierPath","referencedDeclaration":3030,"src":"552:15:15"},"referencedDeclaration":3030,"src":"552:15:15","typeDescriptions":{"typeIdentifier":"t_contract$_FinderInterface_$3030","typeString":"contract FinderInterface"}},"visibility":"internal"}],"src":"551:17:15"},"scope":3758,"src":"503:66:15","stateMutability":"view","virtual":true,"visibility":"external"},{"functionSelector":"e4ee614a","id":3720,"implemented":false,"kind":"function","modifiers":[],"name":"collateralWhitelist","nameLocation":"586:19:15","nodeType":"FunctionDefinition","parameters":{"id":3715,"nodeType":"ParameterList","parameters":[],"src":"605:2:15"},"returnParameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3720,"src":"666:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AddressWhitelistInterface_$3010","typeString":"contract AddressWhitelistInterface"},"typeName":{"id":3717,"nodeType":"UserDefinedTypeName","pathNode":{"id":3716,"name":"AddressWhitelistInterface","nameLocations":["666:25:15"],"nodeType":"IdentifierPath","referencedDeclaration":3010,"src":"666:25:15"},"referencedDeclaration":3010,"src":"666:25:15","typeDescriptions":{"typeIdentifier":"t_contract$_AddressWhitelistInterface_$3010","typeString":"contract AddressWhitelistInterface"}},"visibility":"internal"}],"src":"665:27:15"},"scope":3758,"src":"577:116:15","stateMutability":"view","virtual":true,"visibility":"external"},{"anonymous":false,"eventSelector":"cc1e9c890bc4f4943c457abb8d17f97703b9f7144e1f4a69e50c6e4988ef38b7","id":3724,"name":"NewClone","nameLocation":"707:8:15","nodeType":"EventDefinition","parameters":{"id":3723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3722,"indexed":false,"mutability":"mutable","name":"_clone","nameLocation":"724:6:15","nodeType":"VariableDeclaration","scope":3724,"src":"716:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3721,"name":"address","nodeType":"ElementaryTypeName","src":"716:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"715:16:15"},"src":"701:31:15"},{"documentation":{"id":3725,"nodeType":"StructuredDocumentation","src":"740:1002:15","text":" @notice Creates a new decentraList smart contract.\n @param _listCriteria Criteria for what addresses should be included on the list. Can be on-chain text or a link to IPFS.\n @param _title Short title for the list.\n @param _token The address of the token currency used for this contract. Must be on UMA's collateral whitelist.\n @param _bondAmount Additional bond required, beyond the final fee.\n @param _additionReward Reward per address successfully added to the list, paid by the contract to the proposer.\n @param _removalReward Reward per address successfully removed from the list, paid by the contract to the proposer.\n @param _liveness The period, in seconds, in which a proposal can be disputed. Must be greater than 8 hours.\n @param _owner Owner of the contract can remove funds from the contract and adjust bondAmount, rewards and liveness.\n Set to the 0 address to make the contract a non-managed public good."},"functionSelector":"3ca9482d","id":3746,"implemented":false,"kind":"function","modifiers":[],"name":"createNewDecentralist","nameLocation":"1757:21:15","nodeType":"FunctionDefinition","parameters":{"id":3742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3727,"mutability":"mutable","name":"_listCriteria","nameLocation":"1802:13:15","nodeType":"VariableDeclaration","scope":3746,"src":"1789:26:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3726,"name":"bytes","nodeType":"ElementaryTypeName","src":"1789:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3729,"mutability":"mutable","name":"_title","nameLocation":"1840:6:15","nodeType":"VariableDeclaration","scope":3746,"src":"1826:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3728,"name":"string","nodeType":"ElementaryTypeName","src":"1826:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3731,"mutability":"mutable","name":"_token","nameLocation":"1865:6:15","nodeType":"VariableDeclaration","scope":3746,"src":"1857:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3730,"name":"address","nodeType":"ElementaryTypeName","src":"1857:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3733,"mutability":"mutable","name":"_bondAmount","nameLocation":"1890:11:15","nodeType":"VariableDeclaration","scope":3746,"src":"1882:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1882:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3735,"mutability":"mutable","name":"_additionReward","nameLocation":"1920:15:15","nodeType":"VariableDeclaration","scope":3746,"src":"1912:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1912:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3737,"mutability":"mutable","name":"_removalReward","nameLocation":"1954:14:15","nodeType":"VariableDeclaration","scope":3746,"src":"1946:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3736,"name":"uint256","nodeType":"ElementaryTypeName","src":"1946:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3739,"mutability":"mutable","name":"_liveness","nameLocation":"1986:9:15","nodeType":"VariableDeclaration","scope":3746,"src":"1979:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3738,"name":"uint64","nodeType":"ElementaryTypeName","src":"1979:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3741,"mutability":"mutable","name":"_owner","nameLocation":"2014:6:15","nodeType":"VariableDeclaration","scope":3746,"src":"2006:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3740,"name":"address","nodeType":"ElementaryTypeName","src":"2006:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1778:249:15"},"returnParameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"instance","nameLocation":"2061:8:15","nodeType":"VariableDeclaration","scope":3746,"src":"2053:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3743,"name":"address","nodeType":"ElementaryTypeName","src":"2053:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2052:18:15"},"scope":3758,"src":"1748:323:15","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"documentation":{"id":3747,"nodeType":"StructuredDocumentation","src":"2079:59:15","text":" @notice Returns all instances created."},"functionSelector":"27831ee0","id":3753,"implemented":false,"kind":"function","modifiers":[],"name":"getAllClones","nameLocation":"2153:12:15","nodeType":"FunctionDefinition","parameters":{"id":3748,"nodeType":"ParameterList","parameters":[],"src":"2165:2:15"},"returnParameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3753,"src":"2199:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3749,"name":"address","nodeType":"ElementaryTypeName","src":"2199:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3750,"nodeType":"ArrayTypeName","src":"2199:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2198:18:15"},"scope":3758,"src":"2144:73:15","stateMutability":"view","virtual":true,"visibility":"external"},{"documentation":{"id":3754,"nodeType":"StructuredDocumentation","src":"2225:254:15","text":" @notice This pulls in the most up-to-date collateral whitelist.\n @dev If a new OptimisticOracle is added and this function is run between a list revision's proposal and execution,\n the proposal will become unexecutable."},"functionSelector":"2177a32b","id":3757,"implemented":false,"kind":"function","modifiers":[],"name":"syncWhitelist","nameLocation":"2494:13:15","nodeType":"FunctionDefinition","parameters":{"id":3755,"nodeType":"ParameterList","parameters":[],"src":"2507:2:15"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[],"src":"2524:0:15"},"scope":3758,"src":"2485:40:15","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":3759,"src":"210:2318:15","usedErrors":[]}],"src":"33:2497:15"},"id":15}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}"}},"@openzeppelin/contracts/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f\",\"dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122067d4ee51d479eab352e85bdd83829ce15cf7d68f46af836dbfcbdbac3af324e564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0xD4EE51D479EAB352 0xE8 JUMPDEST 0xDD DUP4 DUP3 SWAP13 0xE1 0x5C 0xF7 0xD6 DUP16 CHAINID 0xAF DUP4 PUSH14 0xBFCBDBAC3AF324E564736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"707:3748:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122067d4ee51d479eab352e85bdd83829ce15cf7d68f46af836dbfcbdbac3af324e564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0xD4EE51D479EAB352 0xE8 JUMPDEST 0xDD DUP4 DUP3 SWAP13 0xE1 0x5C 0xF7 0xD6 DUP16 CHAINID 0xAF DUP4 PUSH14 0xBFCBDBAC3AF324E564736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"707:3748:4:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6\",\"dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a50ddba8ce647ff71fce7647b07d539b9ef8eac3d95a80b37e64fa592b0a034564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xD 0xDB 0xA8 0xCE PUSH5 0x7FF71FCE76 SELFBALANCE 0xB0 PUSH30 0x539B9EF8EAC3D95A80B37E64FA592B0A034564736F6C6343000811003300 ","sourceMap":"194:8111:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8111:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a50ddba8ce647ff71fce7647b07d539b9ef8eac3d95a80b37e64fa592b0a034564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xD 0xDB 0xA8 0xCE PUSH5 0x7FF71FCE76 SELFBALANCE 0xB0 PUSH30 0x539B9EF8EAC3D95A80B37E64FA592B0A034564736F6C6343000811003300 ","sourceMap":"194:8111:5:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3e74c59a1e495e947b391fd22ff9e3a9325e1dc6f95b675dda12f13154926cf64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xE7 0x4C MSIZE LOG1 0xE4 SWAP6 0xE9 SELFBALANCE 0xB3 SWAP2 REVERT 0x22 SELFDESTRUCT SWAP15 GASPRICE SWAP4 0x25 0xE1 0xDC PUSH16 0x95B675DDA12F13154926CF64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"482:6300:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6300:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3e74c59a1e495e947b391fd22ff9e3a9325e1dc6f95b675dda12f13154926cf64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xE7 0x4C MSIZE LOG1 0xE4 SWAP6 0xE9 SELFBALANCE 0xB3 SWAP2 REVERT 0x22 SELFDESTRUCT SWAP15 GASPRICE SWAP4 0x25 0xE1 0xDC PUSH16 0x95B675DDA12F13154926CF64736F6C63 NUMBER STOP ADDMOD GT STOP CALLER ","sourceMap":"482:6300:7:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/SignedSafeMath.sol":{"SignedSafeMath":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df9a303903f9c030f30f24af0b7a44d284db6481c2bb871175053512c1847e0564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF SWAP11 ADDRESS CODECOPY SUB 0xF9 0xC0 ADDRESS RETURN 0xF 0x24 0xAF SIGNEXTEND PUSH27 0x44D284DB6481C2BB871175053512C1847E0564736F6C6343000811 STOP CALLER ","sourceMap":"316:1399:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;316:1399:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df9a303903f9c030f30f24af0b7a44d284db6481c2bb871175053512c1847e0564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF SWAP11 ADDRESS CODECOPY SUB 0xF9 0xC0 ADDRESS RETURN 0xF 0x24 0xAF SIGNEXTEND PUSH27 0x44D284DB6481C2BB871175053512C1847E0564736F6C6343000811 STOP CALLER ","sourceMap":"316:1399:8:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":\"SignedSafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efd599513c2f313a3f5e9536beb2b80a0d2b3dd34202c174a707d81b7dc751ce\",\"dweb:/ipfs/QmdDiENVFSyWjfFskNLnViMH77DHg3oDthkSZk7dMzNNKB\"]}},\"version\":1}"}},"@uma/core/contracts/common/implementation/FixedPoint.sol":{"FixedPoint":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b94ffb831cbdb7edbebffdca054155dda34bb48902a353bca0a1c15c04cc3d0e64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 0x4F 0xFB DUP4 SHR 0xBD 0xB7 0xED 0xBE 0xBF REVERT 0xCA SDIV COINBASE SSTORE 0xDD LOG3 0x4B 0xB4 DUP10 MUL LOG3 MSTORE8 0xBC LOG0 LOG1 0xC1 0x5C DIV 0xCC RETURNDATASIZE 0xE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"252:28526:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;252:28526:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b94ffb831cbdb7edbebffdca054155dda34bb48902a353bca0a1c15c04cc3d0e64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 0x4F 0xFB DUP4 SHR 0xBD 0xB7 0xED 0xBE 0xBF REVERT 0xCA SDIV COINBASE SSTORE 0xDD LOG3 0x4B 0xB4 DUP10 MUL LOG3 MSTORE8 0xBC LOG0 LOG1 0xC1 0x5C DIV 0xCC RETURNDATASIZE 0xE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"252:28526:9:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for fixed point arithmetic on uints\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uma/core/contracts/common/implementation/FixedPoint.sol\":\"FixedPoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efd599513c2f313a3f5e9536beb2b80a0d2b3dd34202c174a707d81b7dc751ce\",\"dweb:/ipfs/QmdDiENVFSyWjfFskNLnViMH77DHg3oDthkSZk7dMzNNKB\"]},\"@uma/core/contracts/common/implementation/FixedPoint.sol\":{\"keccak256\":\"0x996b97cc4fa5da4064e3aee500edc6972485d59a9334ceec81155e2c2f484dae\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://8d7c028926dc2b27e7dc103363dca8a43f60b3351f4a14bcb702660f95c68663\",\"dweb:/ipfs/QmXz4ieFjP5RxJ35F8GbPryYEGvFmxc4Gqx8EK7N57ixzT\"]}},\"version\":1}"}},"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol":{"AddressWhitelistInterface":{"abi":[{"inputs":[{"internalType":"address","name":"newElement","type":"address"}],"name":"addToWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getWhitelist","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newElement","type":"address"}],"name":"isOnWhitelist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newElement","type":"address"}],"name":"removeFromWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"addToWhitelist(address)":"e43252d7","getWhitelist()":"d01f63f5","isOnWhitelist(address)":"3a3ab672","removeFromWhitelist(address)":"8ab1d681"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newElement\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newElement\",\"type\":\"address\"}],\"name\":\"isOnWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newElement\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol\":\"AddressWhitelistInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol\":{\"keccak256\":\"0x22fb8588dff1d5cff76a28111d6c9b190765d99facd93c8ff3b54771f245c0d8\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://5ecd993f00de290a3c7bf21da23a9439cf2ccb22028316df92b79780ac8aa533\",\"dweb:/ipfs/QmTZ7x7U4EEzTacqapzSdFs2np5WNsqm4XeUBqzQxxDJei\"]}},\"version\":1}"}},"@uma/core/contracts/oracle/interfaces/FinderInterface.sol":{"FinderInterface":{"abi":[{"inputs":[{"internalType":"bytes32","name":"interfaceName","type":"bytes32"},{"internalType":"address","name":"implementationAddress","type":"address"}],"name":"changeImplementationAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"interfaceName","type":"bytes32"}],"name":"getImplementationAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"changeImplementationAddress(bytes32,address)":"31f9665e","getImplementationAddress(bytes32)":"aafd5e40"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"changeImplementationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceName\",\"type\":\"bytes32\"}],\"name\":\"getImplementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Examples are the Oracle or Store interfaces.\",\"kind\":\"dev\",\"methods\":{\"changeImplementationAddress(bytes32,address)\":{\"params\":{\"implementationAddress\":\"address of the deployed contract that implements the interface.\",\"interfaceName\":\"bytes32 encoding of the interface name that is either changed or registered.\"}},\"getImplementationAddress(bytes32)\":{\"params\":{\"interfaceName\":\"queried interface.\"},\"returns\":{\"_0\":\"implementationAddress address of the deployed contract that implements the interface.\"}}},\"title\":\"Provides addresses of the live contracts implementing certain interfaces.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeImplementationAddress(bytes32,address)\":{\"notice\":\"Updates the address of the contract that implements `interfaceName`.\"},\"getImplementationAddress(bytes32)\":{\"notice\":\"Gets the address of the contract that implements the given `interfaceName`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":\"FinderInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://e611e12bcaaebfdf65b67c566ff1d34708e757f01a445bd87c55862e89383b81\",\"dweb:/ipfs/QmYNSq5oopTShdS6j4VWKqoLxmQSRKmWebCxw6K4LfmKrf\"]}},\"version\":1}"}},"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol":{"OptimisticOracleV2Interface":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"requester","type":"address"},{"indexed":true,"internalType":"address","name":"proposer","type":"address"},{"indexed":true,"internalType":"address","name":"disputer","type":"address"},{"indexed":false,"internalType":"bytes32","name":"identifier","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"indexed":false,"internalType":"int256","name":"proposedPrice","type":"int256"}],"name":"DisputePrice","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"requester","type":"address"},{"indexed":true,"internalType":"address","name":"proposer","type":"address"},{"indexed":false,"internalType":"bytes32","name":"identifier","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"indexed":false,"internalType":"int256","name":"proposedPrice","type":"int256"},{"indexed":false,"internalType":"uint256","name":"expirationTimestamp","type":"uint256"},{"indexed":false,"internalType":"address","name":"currency","type":"address"}],"name":"ProposePrice","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"requester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"identifier","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"indexed":false,"internalType":"address","name":"currency","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"finalFee","type":"uint256"}],"name":"RequestPrice","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"requester","type":"address"},{"indexed":true,"internalType":"address","name":"proposer","type":"address"},{"indexed":true,"internalType":"address","name":"disputer","type":"address"},{"indexed":false,"internalType":"bytes32","name":"identifier","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"indexed":false,"internalType":"int256","name":"price","type":"int256"},{"indexed":false,"internalType":"uint256","name":"payout","type":"uint256"}],"name":"Settle","type":"event"},{"inputs":[],"name":"ancillaryBytesLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultLiveness","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"disputePrice","outputs":[{"internalType":"uint256","name":"totalBond","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"disputer","type":"address"},{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"disputePriceFor","outputs":[{"internalType":"uint256","name":"totalBond","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finder","outputs":[{"internalType":"contract FinderInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"getRequest","outputs":[{"components":[{"internalType":"address","name":"proposer","type":"address"},{"internalType":"address","name":"disputer","type":"address"},{"internalType":"contract IERC20","name":"currency","type":"address"},{"internalType":"bool","name":"settled","type":"bool"},{"components":[{"internalType":"bool","name":"eventBased","type":"bool"},{"internalType":"bool","name":"refundOnDispute","type":"bool"},{"internalType":"bool","name":"callbackOnPriceProposed","type":"bool"},{"internalType":"bool","name":"callbackOnPriceDisputed","type":"bool"},{"internalType":"bool","name":"callbackOnPriceSettled","type":"bool"},{"internalType":"uint256","name":"bond","type":"uint256"},{"internalType":"uint256","name":"customLiveness","type":"uint256"}],"internalType":"struct OptimisticOracleV2Interface.RequestSettings","name":"requestSettings","type":"tuple"},{"internalType":"int256","name":"proposedPrice","type":"int256"},{"internalType":"int256","name":"resolvedPrice","type":"int256"},{"internalType":"uint256","name":"expirationTime","type":"uint256"},{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"finalFee","type":"uint256"}],"internalType":"struct OptimisticOracleV2Interface.Request","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"getState","outputs":[{"internalType":"enum OptimisticOracleV2Interface.State","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"hasPrice","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"int256","name":"proposedPrice","type":"int256"}],"name":"proposePrice","outputs":[{"internalType":"uint256","name":"totalBond","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"proposer","type":"address"},{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"int256","name":"proposedPrice","type":"int256"}],"name":"proposePriceFor","outputs":[{"internalType":"uint256","name":"totalBond","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"contract IERC20","name":"currency","type":"address"},{"internalType":"uint256","name":"reward","type":"uint256"}],"name":"requestPrice","outputs":[{"internalType":"uint256","name":"totalBond","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"requests","outputs":[{"internalType":"address","name":"proposer","type":"address"},{"internalType":"address","name":"disputer","type":"address"},{"internalType":"contract IERC20","name":"currency","type":"address"},{"internalType":"bool","name":"settled","type":"bool"},{"components":[{"internalType":"bool","name":"eventBased","type":"bool"},{"internalType":"bool","name":"refundOnDispute","type":"bool"},{"internalType":"bool","name":"callbackOnPriceProposed","type":"bool"},{"internalType":"bool","name":"callbackOnPriceDisputed","type":"bool"},{"internalType":"bool","name":"callbackOnPriceSettled","type":"bool"},{"internalType":"uint256","name":"bond","type":"uint256"},{"internalType":"uint256","name":"customLiveness","type":"uint256"}],"internalType":"struct OptimisticOracleV2Interface.RequestSettings","name":"requestSettings","type":"tuple"},{"internalType":"int256","name":"proposedPrice","type":"int256"},{"internalType":"int256","name":"resolvedPrice","type":"int256"},{"internalType":"uint256","name":"expirationTime","type":"uint256"},{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"finalFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"uint256","name":"bond","type":"uint256"}],"name":"setBond","outputs":[{"internalType":"uint256","name":"totalBond","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"bool","name":"callbackOnPriceProposed","type":"bool"},{"internalType":"bool","name":"callbackOnPriceDisputed","type":"bool"},{"internalType":"bool","name":"callbackOnPriceSettled","type":"bool"}],"name":"setCallbacks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"uint256","name":"customLiveness","type":"uint256"}],"name":"setCustomLiveness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"setEventBased","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"setRefundOnDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"requester","type":"address"},{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"settle","outputs":[{"internalType":"uint256","name":"payout","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"identifier","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"}],"name":"settleAndGetPrice","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"address","name":"requester","type":"address"}],"name":"stampAncillaryData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"ancillaryBytesLimit()":"c371dda7","defaultLiveness()":"fe4e1983","disputePrice(address,bytes32,uint256,bytes)":"fba7f1e3","disputePriceFor(address,address,bytes32,uint256,bytes)":"76c7823f","finder()":"b9a3c84c","getCurrentTime()":"29cb924d","getRequest(address,bytes32,uint256,bytes)":"a9904f9b","getState(address,bytes32,uint256,bytes)":"ba4b930c","hasPrice(address,bytes32,uint256,bytes)":"bc58ccaa","proposePrice(address,bytes32,uint256,bytes,int256)":"b8b4f908","proposePriceFor(address,address,bytes32,uint256,bytes,int256)":"7c82288f","requestPrice(bytes32,uint256,bytes,address,uint256)":"11df92f1","requests(bytes32)":"9d866985","setBond(bytes32,uint256,bytes,uint256)":"ad5a755a","setCallbacks(bytes32,uint256,bytes,bool,bool,bool)":"f327b075","setCustomLiveness(bytes32,uint256,bytes,uint256)":"473c45fe","setEventBased(bytes32,uint256,bytes)":"120698af","setRefundOnDispute(bytes32,uint256,bytes)":"91f58dcb","settle(address,bytes32,uint256,bytes)":"5e9a79a9","settleAndGetPrice(bytes32,uint256,bytes)":"53b59239","stampAncillaryData(bytes,address)":"af5d2f39"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"DisputePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"ProposePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"name\":\"RequestPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ancillaryBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLiveness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"disputePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"disputePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"eventBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundOnDispute\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticOracleV2Interface.Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum OptimisticOracleV2Interface.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"proposePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"proposePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"requestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"eventBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundOnDispute\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"setBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"}],\"name\":\"setCallbacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"name\":\"setCustomLiveness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"setEventBased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"setRefundOnDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"settleAndGetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"stampAncillaryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\",\"kind\":\"dev\",\"methods\":{\"disputePrice(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).\"}},\"disputePriceFor(address,address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"disputer\":\"address to set as the disputer.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was value (the proposal was incorrect).\"}},\"getRequest(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"the Request data structure.\"}},\"getState(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"the State enum value.\"}},\"hasPrice(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"true if price has resolved or settled, false otherwise.\"}},\"proposePrice(address,bytes32,uint256,bytes,int256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"proposePriceFor(address,address,bytes32,uint256,bytes,int256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"proposer\":\"address to set as the proposer.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"requestPrice(bytes32,uint256,bytes,address,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data representing additional args being passed with the price request.\",\"currency\":\"ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\",\"identifier\":\"price identifier being requested.\",\"reward\":\"reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.\",\"timestamp\":\"timestamp of the price being requested.\"},\"returns\":{\"totalBond\":\"default bond (final fee) + final fee that the proposer and disputer will be required to pay. This can be changed with a subsequent call to setBond().\"}},\"setBond(bytes32,uint256,bytes,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"bond\":\"custom bond amount to set.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"new bond + final fee that the proposer and disputer will be required to pay. This can be changed again with a subsequent call to setBond().\"}},\"setCallbacks(bytes32,uint256,bytes,bool,bool,bool)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"callbackOnPriceDisputed\":\"whether to enable the callback onPriceDisputed.\",\"callbackOnPriceProposed\":\"whether to enable the callback onPriceProposed.\",\"callbackOnPriceSettled\":\"whether to enable the callback onPriceSettled.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setCustomLiveness(bytes32,uint256,bytes,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"customLiveness\":\"new custom liveness.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setEventBased(bytes32,uint256,bytes)\":{\"details\":\"Calling this method has a few impacts on the request: 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated    with the request. 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who    prematurely proposes a response loses their bond. 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to    the requesting contract.\",\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setRefundOnDispute(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"settle(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"payout\":\"the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.\"}},\"settleAndGetPrice(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"resolved price.\"}}},\"title\":\"Financial contract facing Oracle interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disputePrice(address,bytes32,uint256,bytes)\":{\"notice\":\"Disputes a price value for an existing price request with an active proposal.\"},\"disputePriceFor(address,address,bytes32,uint256,bytes)\":{\"notice\":\"Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\"},\"getRequest(address,bytes32,uint256,bytes)\":{\"notice\":\"Gets the current data structure containing all information about a price request.\"},\"getState(address,bytes32,uint256,bytes)\":{\"notice\":\"Returns the state of a price request.\"},\"hasPrice(address,bytes32,uint256,bytes)\":{\"notice\":\"Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\"},\"proposePrice(address,bytes32,uint256,bytes,int256)\":{\"notice\":\"Proposes a price value for an existing price request.\"},\"proposePriceFor(address,address,bytes32,uint256,bytes,int256)\":{\"notice\":\"Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\"},\"requestPrice(bytes32,uint256,bytes,address,uint256)\":{\"notice\":\"Requests a new price.\"},\"setBond(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Set the proposal bond associated with a price request.\"},\"setCallbacks(bytes32,uint256,bytes,bool,bool,bool)\":{\"notice\":\"Sets which callbacks should be enabled for the request.\"},\"setCustomLiveness(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.\"},\"setEventBased(bytes32,uint256,bytes)\":{\"notice\":\"Sets the request to be an \\\"event-based\\\" request.\"},\"setRefundOnDispute(bytes32,uint256,bytes)\":{\"notice\":\"Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.\"},\"settle(address,bytes32,uint256,bytes)\":{\"notice\":\"Attempts to settle an outstanding price request. Will revert if it isn't settleable.\"},\"settleAndGetPrice(bytes32,uint256,bytes)\":{\"notice\":\"Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":\"OptimisticOracleV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://e611e12bcaaebfdf65b67c566ff1d34708e757f01a445bd87c55862e89383b81\",\"dweb:/ipfs/QmYNSq5oopTShdS6j4VWKqoLxmQSRKmWebCxw6K4LfmKrf\"]},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0f52a8f51cce3444937d477426077785bb68b22de41f39a6e4d58a6dc1c7ede5\",\"dweb:/ipfs/QmdNMPxBjhvcEoKNKdzLB8pA2uhqrZWHo8vcrhWeC9r6ro\"]}},\"version\":1}"}},"@uma/core/contracts/oracle/interfaces/StoreInterface.sol":{"StoreInterface":{"abi":[{"inputs":[{"internalType":"address","name":"currency","type":"address"}],"name":"computeFinalFee","outputs":[{"components":[{"internalType":"uint256","name":"rawValue","type":"uint256"}],"internalType":"struct FixedPoint.Unsigned","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"components":[{"internalType":"uint256","name":"rawValue","type":"uint256"}],"internalType":"struct FixedPoint.Unsigned","name":"pfc","type":"tuple"}],"name":"computeRegularFee","outputs":[{"components":[{"internalType":"uint256","name":"rawValue","type":"uint256"}],"internalType":"struct FixedPoint.Unsigned","name":"regularFee","type":"tuple"},{"components":[{"internalType":"uint256","name":"rawValue","type":"uint256"}],"internalType":"struct FixedPoint.Unsigned","name":"latePenalty","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payOracleFees","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"erc20Address","type":"address"},{"components":[{"internalType":"uint256","name":"rawValue","type":"uint256"}],"internalType":"struct FixedPoint.Unsigned","name":"amount","type":"tuple"}],"name":"payOracleFeesErc20","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"computeFinalFee(address)":"5b97aadd","computeRegularFee(uint256,uint256,(uint256))":"74201feb","payOracleFees()":"cd3a9b24","payOracleFeesErc20(address,(uint256))":"8659d232"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"computeFinalFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"pfc\",\"type\":\"tuple\"}],\"name\":\"computeRegularFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"regularFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"latePenalty\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payOracleFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"amount\",\"type\":\"tuple\"}],\"name\":\"payOracleFeesErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeFinalFee(address)\":{\"params\":{\"currency\":\"token used to pay the final fee.\"},\"returns\":{\"_0\":\"finalFee amount due.\"}},\"computeRegularFee(uint256,uint256,(uint256))\":{\"params\":{\"endTime\":\"end time until which the fee is paid.\",\"pfc\":\"\\\"profit from corruption\\\", or the maximum amount of margin currency that a token sponsor could extract from the contract through corrupting the price feed in their favor.\",\"startTime\":\"defines the beginning time from which the fee is paid.\"},\"returns\":{\"latePenalty\":\"for paying the fee after the deadline.\",\"regularFee\":\"amount owed for the duration from start to end time for the given pfc.\"}},\"payOracleFees()\":{\"details\":\"To be used by contracts whose margin currency is ETH.\"},\"payOracleFeesErc20(address,(uint256))\":{\"details\":\"To be used if the margin currency is an ERC20 token rather than ETH.\",\"params\":{\"amount\":\"number of tokens to transfer. An approval for at least this amount must exist.\",\"erc20Address\":\"address of the ERC20 token used to pay the fee.\"}}},\"title\":\"Interface that allows financial contracts to pay oracle fees for their use of the system.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeFinalFee(address)\":{\"notice\":\"Computes the final oracle fees that a contract should pay at settlement.\"},\"computeRegularFee(uint256,uint256,(uint256))\":{\"notice\":\"Computes the regular oracle fees that a contract should pay for a period.\"},\"payOracleFees()\":{\"notice\":\"Pays Oracle fees in ETH to the store.\"},\"payOracleFeesErc20(address,(uint256))\":{\"notice\":\"Pays oracle fees in the margin currency, erc20Address, to the store.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uma/core/contracts/oracle/interfaces/StoreInterface.sol\":\"StoreInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efd599513c2f313a3f5e9536beb2b80a0d2b3dd34202c174a707d81b7dc751ce\",\"dweb:/ipfs/QmdDiENVFSyWjfFskNLnViMH77DHg3oDthkSZk7dMzNNKB\"]},\"@uma/core/contracts/common/implementation/FixedPoint.sol\":{\"keccak256\":\"0x996b97cc4fa5da4064e3aee500edc6972485d59a9334ceec81155e2c2f484dae\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://8d7c028926dc2b27e7dc103363dca8a43f60b3351f4a14bcb702660f95c68663\",\"dweb:/ipfs/QmXz4ieFjP5RxJ35F8GbPryYEGvFmxc4Gqx8EK7N57ixzT\"]},\"@uma/core/contracts/oracle/interfaces/StoreInterface.sol\":{\"keccak256\":\"0xbb73671684309c91ad5ef3da1474051d03f2e7d5882bed7f5c4317e5d4c768df\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://32386544d3119fd0187a8c4e8b01c739f508ab863faa04345cabc2544081f9e8\",\"dweb:/ipfs/QmYszDURs1x75rsejZkGt9zCkASXnJtufbNsL3XHe2eJPQ\"]}},\"version\":1}"}},"contracts/interfaces/DecentralistInterface.sol":{"DecentralistInterface":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"bondAmount","type":"uint256"}],"name":"BondSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"liveness","type":"uint64"}],"name":"LivenessSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"revisionId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"proposedValue","type":"int256"}],"name":"RevisionApproved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"revisionId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"proposedValue","type":"int256"},{"indexed":false,"internalType":"address[]","name":"revisedAddresses","type":"address[]"}],"name":"RevisionExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"revisionId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"proposedValue","type":"int256"},{"indexed":false,"internalType":"address[]","name":"pendingAddresses","type":"address[]"}],"name":"RevisionProposed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"revisionId","type":"uint256"},{"indexed":false,"internalType":"int256","name":"proposedValue","type":"int256"}],"name":"RevisionRejected","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"additionReward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"removalReward","type":"uint256"}],"name":"RewardsSet","type":"event"},{"inputs":[],"name":"additionReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bondAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_revisionId","type":"uint256"},{"internalType":"address[]","name":"_addresses","type":"address[]"}],"name":"executeRevision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finder","outputs":[{"internalType":"contract FinderInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fixedAncillaryData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_finder","type":"address"},{"internalType":"bytes","name":"_listCriteria","type":"bytes"},{"internalType":"string","name":"_title","type":"string"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_bondAmount","type":"uint256"},{"internalType":"uint256","name":"_additionReward","type":"uint256"},{"internalType":"uint256","name":"_removalReward","type":"uint256"},{"internalType":"uint64","name":"_liveness","type":"uint64"},{"internalType":"uint64","name":"_minimumLiveness","type":"uint64"},{"internalType":"address","name":"_owner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liveness","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumLiveness","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"onList","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"oracle","outputs":[{"internalType":"contract OptimisticOracleV2Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"bytes","name":"ancillaryData","type":"bytes"},{"internalType":"int256","name":"value","type":"int256"}],"name":"priceSettled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int256","name":"_value","type":"int256"},{"internalType":"address[]","name":"_addresses","type":"address[]"}],"name":"proposeRevision","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"removalReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"_token","type":"address"}],"name":"rescue","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"RevisionId","type":"uint256"}],"name":"revisions","outputs":[{"components":[{"internalType":"address","name":"proposer","type":"address"},{"internalType":"bytes32","name":"addressesHash","type":"bytes32"},{"internalType":"int256","name":"proposedValue","type":"int256"},{"internalType":"enum DecentralistInterface.Status","name":"status","type":"uint8"}],"internalType":"struct DecentralistInterface.Revision","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_bondAmount","type":"uint256"}],"name":"setBond","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_liveness","type":"uint64"}],"name":"setLiveness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_additionReward","type":"uint256"},{"internalType":"uint256","name":"_removalReward","type":"uint256"}],"name":"setRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"store","outputs":[{"internalType":"contract StoreInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"syncContracts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"title","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"additionReward()":"8dee967e","bondAmount()":"80f323a7","executeRevision(uint256,address[])":"fee53ab6","finder()":"b9a3c84c","fixedAncillaryData()":"5cae7fb5","initialize(address,bytes,string,address,uint256,uint256,uint256,uint64,uint64,address)":"74881462","liveness()":"6ad0690a","minimumLiveness()":"91152f10","onList(address)":"6f626eb3","oracle()":"7dc0d1d0","owner()":"8da5cb5b","priceSettled(bytes32,uint256,bytes,int256)":"04cc1fd5","proposeRevision(int256,address[])":"ec40ad51","removalReward()":"c207ec6e","renounceOwnership()":"715018a6","rescue(address,uint256,address)":"8671d23b","revisions(uint256)":"0ef486d1","setBond(uint256)":"259bd920","setLiveness(uint64)":"3c4432f1","setRewards(uint256,uint256)":"654e51e7","store()":"975057e7","syncContracts()":"8a301adc","title()":"4a79d50c","token()":"fc0c546a","transferOwnership(address)":"f2fde38b","withdraw(address,uint256)":"f3fef3a3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"name\":\"BondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"liveness\",\"type\":\"uint64\"}],\"name\":\"LivenessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"revisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedValue\",\"type\":\"int256\"}],\"name\":\"RevisionApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"revisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"revisedAddresses\",\"type\":\"address[]\"}],\"name\":\"RevisionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"revisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pendingAddresses\",\"type\":\"address[]\"}],\"name\":\"RevisionProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"revisionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedValue\",\"type\":\"int256\"}],\"name\":\"RevisionRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removalReward\",\"type\":\"uint256\"}],\"name\":\"RewardsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"additionReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_revisionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"executeRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedAncillaryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_finder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_listCriteria\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_additionReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_removalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_liveness\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minimumLiveness\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveness\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLiveness\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OptimisticOracleV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"priceSettled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_value\",\"type\":\"int256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"proposeRevision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"RevisionId\",\"type\":\"uint256\"}],\"name\":\"revisions\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"addressesHash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"proposedValue\",\"type\":\"int256\"},{\"internalType\":\"enum DecentralistInterface.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct DecentralistInterface.Revision\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"}],\"name\":\"setBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_liveness\",\"type\":\"uint64\"}],\"name\":\"setLiveness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_removalReward\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract StoreInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeRevision(uint256,address[])\":{\"params\":{\"_addresses\":\"Address array that matches the array logged in the RevisionProposed event for the provided _revisionId.\",\"_revisionId\":\"ID of revision to be executed. If Revision submitted does not have status Approved, tx will revert.\"}},\"initialize(address,bytes,string,address,uint256,uint256,uint256,uint64,uint64,address)\":{\"params\":{\"_additionReward\":\"Reward per address successfully added to the list, paid by the contract to the proposer.\",\"_bondAmount\":\"Additional bond required, beyond the final fee.\",\"_finder\":\"The address of UMA Finder contract. This is set in the DecentralistProxyFactory constructor.\",\"_listCriteria\":\"Criteria for what addresses should be included on the list. Can be on-chain text or a link to IPFS.\",\"_liveness\":\"The period, in seconds, in which a proposal can be disputed.\",\"_minimumLiveness\":\"The minimum allowable liveness period, in seconds.\",\"_owner\":\"Owner of the contract can remove funds from the contract and adjust reward rates. Set to the 0 address to make the contract 'public'.\",\"_removalReward\":\"Reward per address successfully removed from the list, paid by the contract to the proposer.\",\"_title\":\"Short title for the list.\",\"_token\":\"The address of the token currency used for this contract. Must be on UMA's collateral whitelist.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"priceSettled(bytes32,uint256,bytes,int256)\":{\"params\":{\"ancillaryData\":\"Ancillary data of the data being requested.\",\"timestamp\":\"Timestamp to identify the existing request.\",\"value\":\"Value returned from the oracle.\"}},\"proposeRevision(int256,address[])\":{\"details\":\"Caller must have approved this contract to spend the total bond amount of the contract's token before calling.\",\"params\":{\"_addresses\":\"Array of addresses for the proposed revision.\",\"_value\":\"Indicates if the proposed revision is adding or removing addresses. 0 = remove, 1e18 = add.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescue(address,uint256,address)\":{\"params\":{\"_token\":\"The contract address of the token to send.\",\"amount\":\"The amount of tokens to to send.\",\"recipient\":\"The recipient of the tokens.\"}},\"setBond(uint256)\":{\"params\":{\"_bondAmount\":\"Amount of the bond token that will need to be paid for future proposals.\"}},\"setLiveness(uint64)\":{\"params\":{\"_liveness\":\"Liveness to set in seconds.\"}},\"setRewards(uint256,uint256)\":{\"params\":{\"_additionReward\":\"Reward to proposer per address successfully added to the list.\",\"_removalReward\":\"Reward to proposer per address successfully removed from the list.\"}},\"syncContracts()\":{\"details\":\"If a new OptimisticOracle is added and this is run between a revision's introduction and execution, the proposal will become unexecutable.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to to send.\",\"recipient\":\"The recipient of the tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeRevision(uint256,address[])\":{\"notice\":\"Executes approved revisions by revising the list and paying out rewards to the proposer.\"},\"initialize(address,bytes,string,address,uint256,uint256,uint256,uint64,uint64,address)\":{\"notice\":\"Initializes the contract.\"},\"priceSettled(bytes32,uint256,bytes,int256)\":{\"notice\":\"Callback function called upon oracle data settlement to update the Revision status to Approved or Rejected.\"},\"proposeRevision(int256,address[])\":{\"notice\":\"Proposes addresses to add or remove from the list.\"},\"rescue(address,uint256,address)\":{\"notice\":\"Allows owner to rescue tokens sent accidentally to the contract.\"},\"setBond(uint256)\":{\"notice\":\"Sets the bond amount for revisions.\"},\"setLiveness(uint64)\":{\"notice\":\"Sets the liveness for future revisions. This is the amount of delay before a proposal is approved by default.\"},\"setRewards(uint256,uint256)\":{\"notice\":\"Sets the rewards for successful revisions.\"},\"syncContracts()\":{\"notice\":\"This pulls in the most up-to-date Optimistic Oracle contract.\"},\"withdraw(address,uint256)\":{\"notice\":\"Allows owner to withdraw the default tokens from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/DecentralistInterface.sol\":\"DecentralistInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3313a8f9bb1f9476857c9050067b31982bf2140b83d84f3bc0cec1f62bbe947f\",\"dweb:/ipfs/Qma17Pk8NRe7aB4UD3jjVxk7nSFaov3eQyv86hcyqkwJRV\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11756f42121f6541a35a8339ea899ee7514cfaa2e6d740625fcc844419296aa6\",\"dweb:/ipfs/QmekMuk6BY4DAjzeXr4MSbKdgoqqsZnA8JPtuyWc6CwXHf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://efd599513c2f313a3f5e9536beb2b80a0d2b3dd34202c174a707d81b7dc751ce\",\"dweb:/ipfs/QmdDiENVFSyWjfFskNLnViMH77DHg3oDthkSZk7dMzNNKB\"]},\"@uma/core/contracts/common/implementation/FixedPoint.sol\":{\"keccak256\":\"0x996b97cc4fa5da4064e3aee500edc6972485d59a9334ceec81155e2c2f484dae\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://8d7c028926dc2b27e7dc103363dca8a43f60b3351f4a14bcb702660f95c68663\",\"dweb:/ipfs/QmXz4ieFjP5RxJ35F8GbPryYEGvFmxc4Gqx8EK7N57ixzT\"]},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://e611e12bcaaebfdf65b67c566ff1d34708e757f01a445bd87c55862e89383b81\",\"dweb:/ipfs/QmYNSq5oopTShdS6j4VWKqoLxmQSRKmWebCxw6K4LfmKrf\"]},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleV2Interface.sol\":{\"keccak256\":\"0xbfd9778b3e7c86e149cc140eda5e7210ef4a604cde576abaaa46c1289c5e334f\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0f52a8f51cce3444937d477426077785bb68b22de41f39a6e4d58a6dc1c7ede5\",\"dweb:/ipfs/QmdNMPxBjhvcEoKNKdzLB8pA2uhqrZWHo8vcrhWeC9r6ro\"]},\"@uma/core/contracts/oracle/interfaces/StoreInterface.sol\":{\"keccak256\":\"0xbb73671684309c91ad5ef3da1474051d03f2e7d5882bed7f5c4317e5d4c768df\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://32386544d3119fd0187a8c4e8b01c739f508ab863faa04345cabc2544081f9e8\",\"dweb:/ipfs/QmYszDURs1x75rsejZkGt9zCkASXnJtufbNsL3XHe2eJPQ\"]},\"contracts/interfaces/DecentralistInterface.sol\":{\"keccak256\":\"0x909805a5c5c4daecc8c569ef48ffe1ac186554bc7e52eb7b047d0d367278d514\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3079d790395eeb2a42c414175d3104acdfc94f47df20dbb674ddb47a97310682\",\"dweb:/ipfs/QmXKuB7QcQBWAodQYAtRoHHtjQqWMwQ8VfSeBMKETVLgrC\"]}},\"version\":1}"}},"contracts/interfaces/DecentralistProxyFactoryInterface.sol":{"DecentralistProxyFactoryInterface":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"_clone","type":"address"}],"name":"NewClone","type":"event"},{"inputs":[],"name":"allClones","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"collateralWhitelist","outputs":[{"internalType":"contract AddressWhitelistInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_listCriteria","type":"bytes"},{"internalType":"string","name":"_title","type":"string"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_bondAmount","type":"uint256"},{"internalType":"uint256","name":"_additionReward","type":"uint256"},{"internalType":"uint256","name":"_removalReward","type":"uint256"},{"internalType":"uint64","name":"_liveness","type":"uint64"},{"internalType":"address","name":"_owner","type":"address"}],"name":"createNewDecentralist","outputs":[{"internalType":"address","name":"instance","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"finder","outputs":[{"internalType":"contract FinderInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllClones","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"implementationContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumLiveness","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"syncWhitelist","outputs":[],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allClones()":"61437f88","collateralWhitelist()":"e4ee614a","createNewDecentralist(bytes,string,address,uint256,uint256,uint256,uint64,address)":"3ca9482d","finder()":"b9a3c84c","getAllClones()":"27831ee0","implementationContract()":"99e7d056","minimumLiveness()":"91152f10","syncWhitelist()":"2177a32b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_clone\",\"type\":\"address\"}],\"name\":\"NewClone\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allClones\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralWhitelist\",\"outputs\":[{\"internalType\":\"contract AddressWhitelistInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_listCriteria\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bondAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_additionReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_removalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_liveness\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createNewDecentralist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClones\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLiveness\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createNewDecentralist(bytes,string,address,uint256,uint256,uint256,uint64,address)\":{\"params\":{\"_additionReward\":\"Reward per address successfully added to the list, paid by the contract to the proposer.\",\"_bondAmount\":\"Additional bond required, beyond the final fee.\",\"_listCriteria\":\"Criteria for what addresses should be included on the list. Can be on-chain text or a link to IPFS.\",\"_liveness\":\"The period, in seconds, in which a proposal can be disputed. Must be greater than 8 hours.\",\"_owner\":\"Owner of the contract can remove funds from the contract and adjust bondAmount, rewards and liveness. Set to the 0 address to make the contract a non-managed public good.\",\"_removalReward\":\"Reward per address successfully removed from the list, paid by the contract to the proposer.\",\"_title\":\"Short title for the list.\",\"_token\":\"The address of the token currency used for this contract. Must be on UMA's collateral whitelist.\"}},\"syncWhitelist()\":{\"details\":\"If a new OptimisticOracle is added and this function is run between a list revision's proposal and execution, the proposal will become unexecutable.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createNewDecentralist(bytes,string,address,uint256,uint256,uint256,uint64,address)\":{\"notice\":\"Creates a new decentraList smart contract.\"},\"getAllClones()\":{\"notice\":\"Returns all instances created.\"},\"syncWhitelist()\":{\"notice\":\"This pulls in the most up-to-date collateral whitelist.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/DecentralistProxyFactoryInterface.sol\":\"DecentralistProxyFactoryInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol\":{\"keccak256\":\"0x22fb8588dff1d5cff76a28111d6c9b190765d99facd93c8ff3b54771f245c0d8\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://5ecd993f00de290a3c7bf21da23a9439cf2ccb22028316df92b79780ac8aa533\",\"dweb:/ipfs/QmTZ7x7U4EEzTacqapzSdFs2np5WNsqm4XeUBqzQxxDJei\"]},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://e611e12bcaaebfdf65b67c566ff1d34708e757f01a445bd87c55862e89383b81\",\"dweb:/ipfs/QmYNSq5oopTShdS6j4VWKqoLxmQSRKmWebCxw6K4LfmKrf\"]},\"contracts/interfaces/DecentralistProxyFactoryInterface.sol\":{\"keccak256\":\"0x523f59a3e725202a5008a92657ef9457d0371f7dcc69cd88336dc15d1877772d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99882ea76e6e96d62a3ec16cffcd8e3ef5ea77abc9cf62b904b4f0b41a400667\",\"dweb:/ipfs/QmchPVDX4D8tRkSHpfwecqPn4bj1M1CGQjYe22R4M5mLiJ\"]}},\"version\":1}"}}}}}